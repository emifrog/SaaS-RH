generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Categorie {
  SPV
  SPP
  PATS
}

enum StatutPersonnel {
  ACTIF
  SUSPENDU
  RETRAITE
}

enum Role {
  USER
  FORMATEUR
  CHEF_CENTRE
  ADMIN_SDIS
}

enum StatutSession {
  PLANIFIE
  CONFIRME
  TERMINE
  ANNULE
}

enum StatutInscription {
  INSCRIT
  PRESENT
  ABSENT_JUSTIFIE
  ABSENT
}

enum StatutAptitude {
  APTE
  INAPTE
  RESTRICTION
}

// Models
model Personnel {
  id           Int             @id @default(autoincrement())
  matricule    String          @unique
  nom          String
  prenom       String
  email        String          @unique
  telephone    String?
  password     String
  grade        String
  centreId     Int
  categorie    Categorie
  statut       StatutPersonnel @default(ACTIF)
  roles        Role[]          @default([USER])
  refreshToken String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt

  // Relations
  centre            Centre            @relation(fields: [centreId], references: [id])
  aptitudeMedicale  AptitudeMedicale?
  competences       Competence[]
  inscriptions      InscriptionFMPA[]
  sessionsFormateur SessionFMPA[]     @relation("FormateurPrincipal")
  signatures        SignatureFMPA[]
  notifications     Notification[]
  auditLogs         AuditLog[]

  @@index([matricule])
  @@index([email])
  @@index([centreId])
}

model Centre {
  id        Int      @id @default(autoincrement())
  code      String   @unique
  nom       String
  type      String // CIS, CSP, CPI
  adresse   String?
  telephone String?
  email     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  personnels Personnel[]
  sessions   SessionFMPA[]

  @@index([code])
}

model TypeFMPA {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  libelle     String
  dureeHeures Float
  tauxHoraire Float    @default(12.50)
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  sessions SessionFMPA[]

  @@index([code])
}

model SessionFMPA {
  id                   Int           @id @default(autoincrement())
  typeFMPAId           Int
  dateDebut            DateTime
  dateFin              DateTime
  lieu                 String
  placesMax            Int           @default(15)
  placesOccupees       Int           @default(0)
  formateurPrincipalId Int
  centreId             Int
  statut               StatutSession @default(PLANIFIE)
  codeTTA              String
  tauxHoraire          Float         @default(12.50)
  observations         String?
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt

  // Relations
  typeFMPA           TypeFMPA          @relation(fields: [typeFMPAId], references: [id])
  formateurPrincipal Personnel         @relation("FormateurPrincipal", fields: [formateurPrincipalId], references: [id])
  centre             Centre            @relation(fields: [centreId], references: [id])
  inscriptions       InscriptionFMPA[]
  signatures         SignatureFMPA[]
  exportsTTA         ExportTTA[]

  @@index([dateDebut])
  @@index([centreId])
  @@index([statut])
}

model InscriptionFMPA {
  id                    Int               @id @default(autoincrement())
  sessionId             Int
  personnelId           Int
  statut                StatutInscription @default(INSCRIT)
  present               Boolean           @default(false)
  signatureElectronique String? // Base64
  dateSignature         DateTime?
  heuresValidees        Float?
  montantTTA            Float?
  dateInscription       DateTime          @default(now())
  dateModification      DateTime          @updatedAt

  // Relations
  session   SessionFMPA @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  personnel Personnel   @relation(fields: [personnelId], references: [id])

  @@unique([sessionId, personnelId])
  @@index([sessionId])
  @@index([personnelId])
  @@index([statut])
}

model SignatureFMPA {
  id            String   @id @default(uuid())
  sessionFMPAId Int
  personnelId   Int
  type          String // EMARGEMENT, FORMATEUR, etc.
  signature     String // Base64
  dateSignature DateTime @default(now())

  // Relations
  session   SessionFMPA @relation(fields: [sessionFMPAId], references: [id], onDelete: Cascade)
  personnel Personnel   @relation(fields: [personnelId], references: [id])

  @@index([sessionFMPAId])
  @@index([personnelId])
}

model AptitudeMedicale {
  id                 Int            @id @default(autoincrement())
  personnelId        Int            @unique
  statut             StatutAptitude @default(APTE)
  dateVisite         DateTime
  dateProchainExamen DateTime
  restrictions       String?
  medecin            String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  // Relations
  personnel Personnel @relation(fields: [personnelId], references: [id])

  @@index([personnelId])
  @@index([dateProchainExamen])
}

model Competence {
  id             Int       @id @default(autoincrement())
  personnelId    Int
  code           String // PSE1, PSE2, COD1, etc.
  libelle        String
  dateObtention  DateTime
  dateExpiration DateTime?
  niveau         String?
  organisme      String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Relations
  personnel Personnel @relation(fields: [personnelId], references: [id])

  @@index([personnelId])
  @@index([code])
  @@index([dateExpiration])
}

model ExportTTA {
  id             Int       @id @default(autoincrement())
  mois           DateTime
  centreId       Int
  sessionId      Int?
  nombreLignes   Int
  montantTotal   Float
  fichierCsv     String // Path ou contenu
  statut         String // GENERE, VALIDE, ENVOYE
  validePar      Int?
  dateValidation DateTime?
  createdAt      DateTime  @default(now())

  // Relations
  session SessionFMPA? @relation(fields: [sessionId], references: [id])

  @@index([mois])
  @@index([centreId])
}

model Notification {
  id          Int       @id @default(autoincrement())
  personnelId Int
  type        String // EMAIL, PUSH, IN_APP
  sujet       String
  message     String
  lu          Boolean   @default(false)
  dateLecture DateTime?
  createdAt   DateTime  @default(now())

  // Relations
  personnel Personnel @relation(fields: [personnelId], references: [id])

  @@index([personnelId])
  @@index([lu])
  @@index([createdAt])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    Int?
  action    String
  entity    String
  entityId  String?
  oldValues Json?
  newValues Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relations
  user Personnel? @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([entity])
  @@index([createdAt])
}
