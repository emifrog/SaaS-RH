const { PrismaClient } = require('@prisma/client');
require('dotenv').config();

const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

async function testConnection() {
  console.log('üîç Test de connexion √† la base de donn√©es...\n');
  console.log('üìç DATABASE_URL:', process.env.DATABASE_URL ? 'Configur√©e' : 'Non configur√©e');
  
  try {
    // Tenter de se connecter
    await prisma.$connect();
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie!\n');
    
    // Tester une requ√™te simple
    const result = await prisma.$queryRaw`SELECT 1 as test`;
    console.log('‚úÖ Requ√™te de test ex√©cut√©e avec succ√®s:', result);
    
    // V√©rifier les tables
    const tables = await prisma.$queryRaw`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
    `;
    console.log('\nüìä Tables dans la base de donn√©es:');
    if (tables.length > 0) {
      tables.forEach(table => {
        console.log(`   - ${table.table_name}`);
      });
    } else {
      console.log('   Aucune table trouv√©e');
    }
    
    console.log('\n‚úÖ La base de donn√©es est bien connect√©e et op√©rationnelle!');
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion √† la base de donn√©es:');
    console.error('   Message:', error.message);
    if (error.code) {
      console.error('   Code:', error.code);
    }
    if (error.meta) {
      console.error('   D√©tails:', error.meta);
    }
  } finally {
    await prisma.$disconnect();
    console.log('\nüîå Connexion ferm√©e');
  }
}

testConnection();
