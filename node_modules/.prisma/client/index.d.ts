
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Personnel
 * 
 */
export type Personnel = $Result.DefaultSelection<Prisma.$PersonnelPayload>
/**
 * Model Centre
 * 
 */
export type Centre = $Result.DefaultSelection<Prisma.$CentrePayload>
/**
 * Model TypeFMPA
 * 
 */
export type TypeFMPA = $Result.DefaultSelection<Prisma.$TypeFMPAPayload>
/**
 * Model SessionFMPA
 * 
 */
export type SessionFMPA = $Result.DefaultSelection<Prisma.$SessionFMPAPayload>
/**
 * Model InscriptionFMPA
 * 
 */
export type InscriptionFMPA = $Result.DefaultSelection<Prisma.$InscriptionFMPAPayload>
/**
 * Model SignatureFMPA
 * 
 */
export type SignatureFMPA = $Result.DefaultSelection<Prisma.$SignatureFMPAPayload>
/**
 * Model AptitudeMedicale
 * 
 */
export type AptitudeMedicale = $Result.DefaultSelection<Prisma.$AptitudeMedicalePayload>
/**
 * Model Competence
 * 
 */
export type Competence = $Result.DefaultSelection<Prisma.$CompetencePayload>
/**
 * Model ExportTTA
 * 
 */
export type ExportTTA = $Result.DefaultSelection<Prisma.$ExportTTAPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model AuditLog
 * 
 */
export type AuditLog = $Result.DefaultSelection<Prisma.$AuditLogPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Categorie: {
  SPV: 'SPV',
  SPP: 'SPP',
  PATS: 'PATS'
};

export type Categorie = (typeof Categorie)[keyof typeof Categorie]


export const StatutPersonnel: {
  ACTIF: 'ACTIF',
  SUSPENDU: 'SUSPENDU',
  RETRAITE: 'RETRAITE'
};

export type StatutPersonnel = (typeof StatutPersonnel)[keyof typeof StatutPersonnel]


export const Role: {
  USER: 'USER',
  FORMATEUR: 'FORMATEUR',
  CHEF_CENTRE: 'CHEF_CENTRE',
  ADMIN_SDIS: 'ADMIN_SDIS'
};

export type Role = (typeof Role)[keyof typeof Role]


export const StatutSession: {
  PLANIFIE: 'PLANIFIE',
  CONFIRME: 'CONFIRME',
  TERMINE: 'TERMINE',
  ANNULE: 'ANNULE'
};

export type StatutSession = (typeof StatutSession)[keyof typeof StatutSession]


export const StatutInscription: {
  INSCRIT: 'INSCRIT',
  PRESENT: 'PRESENT',
  ABSENT_JUSTIFIE: 'ABSENT_JUSTIFIE',
  ABSENT: 'ABSENT'
};

export type StatutInscription = (typeof StatutInscription)[keyof typeof StatutInscription]


export const StatutAptitude: {
  APTE: 'APTE',
  INAPTE: 'INAPTE',
  RESTRICTION: 'RESTRICTION'
};

export type StatutAptitude = (typeof StatutAptitude)[keyof typeof StatutAptitude]

}

export type Categorie = $Enums.Categorie

export const Categorie: typeof $Enums.Categorie

export type StatutPersonnel = $Enums.StatutPersonnel

export const StatutPersonnel: typeof $Enums.StatutPersonnel

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type StatutSession = $Enums.StatutSession

export const StatutSession: typeof $Enums.StatutSession

export type StatutInscription = $Enums.StatutInscription

export const StatutInscription: typeof $Enums.StatutInscription

export type StatutAptitude = $Enums.StatutAptitude

export const StatutAptitude: typeof $Enums.StatutAptitude

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Personnel
 * const personnel = await prisma.personnel.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Personnel
   * const personnel = await prisma.personnel.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.personnel`: Exposes CRUD operations for the **Personnel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Personnel
    * const personnel = await prisma.personnel.findMany()
    * ```
    */
  get personnel(): Prisma.PersonnelDelegate<ExtArgs>;

  /**
   * `prisma.centre`: Exposes CRUD operations for the **Centre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Centres
    * const centres = await prisma.centre.findMany()
    * ```
    */
  get centre(): Prisma.CentreDelegate<ExtArgs>;

  /**
   * `prisma.typeFMPA`: Exposes CRUD operations for the **TypeFMPA** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TypeFMPAS
    * const typeFMPAS = await prisma.typeFMPA.findMany()
    * ```
    */
  get typeFMPA(): Prisma.TypeFMPADelegate<ExtArgs>;

  /**
   * `prisma.sessionFMPA`: Exposes CRUD operations for the **SessionFMPA** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SessionFMPAS
    * const sessionFMPAS = await prisma.sessionFMPA.findMany()
    * ```
    */
  get sessionFMPA(): Prisma.SessionFMPADelegate<ExtArgs>;

  /**
   * `prisma.inscriptionFMPA`: Exposes CRUD operations for the **InscriptionFMPA** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InscriptionFMPAS
    * const inscriptionFMPAS = await prisma.inscriptionFMPA.findMany()
    * ```
    */
  get inscriptionFMPA(): Prisma.InscriptionFMPADelegate<ExtArgs>;

  /**
   * `prisma.signatureFMPA`: Exposes CRUD operations for the **SignatureFMPA** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SignatureFMPAS
    * const signatureFMPAS = await prisma.signatureFMPA.findMany()
    * ```
    */
  get signatureFMPA(): Prisma.SignatureFMPADelegate<ExtArgs>;

  /**
   * `prisma.aptitudeMedicale`: Exposes CRUD operations for the **AptitudeMedicale** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AptitudeMedicales
    * const aptitudeMedicales = await prisma.aptitudeMedicale.findMany()
    * ```
    */
  get aptitudeMedicale(): Prisma.AptitudeMedicaleDelegate<ExtArgs>;

  /**
   * `prisma.competence`: Exposes CRUD operations for the **Competence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Competences
    * const competences = await prisma.competence.findMany()
    * ```
    */
  get competence(): Prisma.CompetenceDelegate<ExtArgs>;

  /**
   * `prisma.exportTTA`: Exposes CRUD operations for the **ExportTTA** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExportTTAS
    * const exportTTAS = await prisma.exportTTA.findMany()
    * ```
    */
  get exportTTA(): Prisma.ExportTTADelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Personnel: 'Personnel',
    Centre: 'Centre',
    TypeFMPA: 'TypeFMPA',
    SessionFMPA: 'SessionFMPA',
    InscriptionFMPA: 'InscriptionFMPA',
    SignatureFMPA: 'SignatureFMPA',
    AptitudeMedicale: 'AptitudeMedicale',
    Competence: 'Competence',
    ExportTTA: 'ExportTTA',
    Notification: 'Notification',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "personnel" | "centre" | "typeFMPA" | "sessionFMPA" | "inscriptionFMPA" | "signatureFMPA" | "aptitudeMedicale" | "competence" | "exportTTA" | "notification" | "auditLog"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Personnel: {
        payload: Prisma.$PersonnelPayload<ExtArgs>
        fields: Prisma.PersonnelFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PersonnelFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnelPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PersonnelFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnelPayload>
          }
          findFirst: {
            args: Prisma.PersonnelFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnelPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PersonnelFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnelPayload>
          }
          findMany: {
            args: Prisma.PersonnelFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnelPayload>[]
          }
          create: {
            args: Prisma.PersonnelCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnelPayload>
          }
          createMany: {
            args: Prisma.PersonnelCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PersonnelCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnelPayload>[]
          }
          delete: {
            args: Prisma.PersonnelDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnelPayload>
          }
          update: {
            args: Prisma.PersonnelUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnelPayload>
          }
          deleteMany: {
            args: Prisma.PersonnelDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PersonnelUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PersonnelUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PersonnelPayload>
          }
          aggregate: {
            args: Prisma.PersonnelAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePersonnel>
          }
          groupBy: {
            args: Prisma.PersonnelGroupByArgs<ExtArgs>
            result: $Utils.Optional<PersonnelGroupByOutputType>[]
          }
          count: {
            args: Prisma.PersonnelCountArgs<ExtArgs>
            result: $Utils.Optional<PersonnelCountAggregateOutputType> | number
          }
        }
      }
      Centre: {
        payload: Prisma.$CentrePayload<ExtArgs>
        fields: Prisma.CentreFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CentreFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CentrePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CentreFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CentrePayload>
          }
          findFirst: {
            args: Prisma.CentreFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CentrePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CentreFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CentrePayload>
          }
          findMany: {
            args: Prisma.CentreFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CentrePayload>[]
          }
          create: {
            args: Prisma.CentreCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CentrePayload>
          }
          createMany: {
            args: Prisma.CentreCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CentreCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CentrePayload>[]
          }
          delete: {
            args: Prisma.CentreDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CentrePayload>
          }
          update: {
            args: Prisma.CentreUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CentrePayload>
          }
          deleteMany: {
            args: Prisma.CentreDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CentreUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CentreUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CentrePayload>
          }
          aggregate: {
            args: Prisma.CentreAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCentre>
          }
          groupBy: {
            args: Prisma.CentreGroupByArgs<ExtArgs>
            result: $Utils.Optional<CentreGroupByOutputType>[]
          }
          count: {
            args: Prisma.CentreCountArgs<ExtArgs>
            result: $Utils.Optional<CentreCountAggregateOutputType> | number
          }
        }
      }
      TypeFMPA: {
        payload: Prisma.$TypeFMPAPayload<ExtArgs>
        fields: Prisma.TypeFMPAFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TypeFMPAFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypeFMPAPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TypeFMPAFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypeFMPAPayload>
          }
          findFirst: {
            args: Prisma.TypeFMPAFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypeFMPAPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TypeFMPAFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypeFMPAPayload>
          }
          findMany: {
            args: Prisma.TypeFMPAFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypeFMPAPayload>[]
          }
          create: {
            args: Prisma.TypeFMPACreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypeFMPAPayload>
          }
          createMany: {
            args: Prisma.TypeFMPACreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TypeFMPACreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypeFMPAPayload>[]
          }
          delete: {
            args: Prisma.TypeFMPADeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypeFMPAPayload>
          }
          update: {
            args: Prisma.TypeFMPAUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypeFMPAPayload>
          }
          deleteMany: {
            args: Prisma.TypeFMPADeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TypeFMPAUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TypeFMPAUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TypeFMPAPayload>
          }
          aggregate: {
            args: Prisma.TypeFMPAAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTypeFMPA>
          }
          groupBy: {
            args: Prisma.TypeFMPAGroupByArgs<ExtArgs>
            result: $Utils.Optional<TypeFMPAGroupByOutputType>[]
          }
          count: {
            args: Prisma.TypeFMPACountArgs<ExtArgs>
            result: $Utils.Optional<TypeFMPACountAggregateOutputType> | number
          }
        }
      }
      SessionFMPA: {
        payload: Prisma.$SessionFMPAPayload<ExtArgs>
        fields: Prisma.SessionFMPAFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFMPAFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFMPAPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFMPAFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFMPAPayload>
          }
          findFirst: {
            args: Prisma.SessionFMPAFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFMPAPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFMPAFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFMPAPayload>
          }
          findMany: {
            args: Prisma.SessionFMPAFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFMPAPayload>[]
          }
          create: {
            args: Prisma.SessionFMPACreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFMPAPayload>
          }
          createMany: {
            args: Prisma.SessionFMPACreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionFMPACreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFMPAPayload>[]
          }
          delete: {
            args: Prisma.SessionFMPADeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFMPAPayload>
          }
          update: {
            args: Prisma.SessionFMPAUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFMPAPayload>
          }
          deleteMany: {
            args: Prisma.SessionFMPADeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionFMPAUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SessionFMPAUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionFMPAPayload>
          }
          aggregate: {
            args: Prisma.SessionFMPAAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSessionFMPA>
          }
          groupBy: {
            args: Prisma.SessionFMPAGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionFMPAGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionFMPACountArgs<ExtArgs>
            result: $Utils.Optional<SessionFMPACountAggregateOutputType> | number
          }
        }
      }
      InscriptionFMPA: {
        payload: Prisma.$InscriptionFMPAPayload<ExtArgs>
        fields: Prisma.InscriptionFMPAFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InscriptionFMPAFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscriptionFMPAPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InscriptionFMPAFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscriptionFMPAPayload>
          }
          findFirst: {
            args: Prisma.InscriptionFMPAFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscriptionFMPAPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InscriptionFMPAFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscriptionFMPAPayload>
          }
          findMany: {
            args: Prisma.InscriptionFMPAFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscriptionFMPAPayload>[]
          }
          create: {
            args: Prisma.InscriptionFMPACreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscriptionFMPAPayload>
          }
          createMany: {
            args: Prisma.InscriptionFMPACreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InscriptionFMPACreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscriptionFMPAPayload>[]
          }
          delete: {
            args: Prisma.InscriptionFMPADeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscriptionFMPAPayload>
          }
          update: {
            args: Prisma.InscriptionFMPAUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscriptionFMPAPayload>
          }
          deleteMany: {
            args: Prisma.InscriptionFMPADeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InscriptionFMPAUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.InscriptionFMPAUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InscriptionFMPAPayload>
          }
          aggregate: {
            args: Prisma.InscriptionFMPAAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInscriptionFMPA>
          }
          groupBy: {
            args: Prisma.InscriptionFMPAGroupByArgs<ExtArgs>
            result: $Utils.Optional<InscriptionFMPAGroupByOutputType>[]
          }
          count: {
            args: Prisma.InscriptionFMPACountArgs<ExtArgs>
            result: $Utils.Optional<InscriptionFMPACountAggregateOutputType> | number
          }
        }
      }
      SignatureFMPA: {
        payload: Prisma.$SignatureFMPAPayload<ExtArgs>
        fields: Prisma.SignatureFMPAFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SignatureFMPAFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignatureFMPAPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SignatureFMPAFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignatureFMPAPayload>
          }
          findFirst: {
            args: Prisma.SignatureFMPAFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignatureFMPAPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SignatureFMPAFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignatureFMPAPayload>
          }
          findMany: {
            args: Prisma.SignatureFMPAFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignatureFMPAPayload>[]
          }
          create: {
            args: Prisma.SignatureFMPACreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignatureFMPAPayload>
          }
          createMany: {
            args: Prisma.SignatureFMPACreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SignatureFMPACreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignatureFMPAPayload>[]
          }
          delete: {
            args: Prisma.SignatureFMPADeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignatureFMPAPayload>
          }
          update: {
            args: Prisma.SignatureFMPAUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignatureFMPAPayload>
          }
          deleteMany: {
            args: Prisma.SignatureFMPADeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SignatureFMPAUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.SignatureFMPAUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SignatureFMPAPayload>
          }
          aggregate: {
            args: Prisma.SignatureFMPAAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSignatureFMPA>
          }
          groupBy: {
            args: Prisma.SignatureFMPAGroupByArgs<ExtArgs>
            result: $Utils.Optional<SignatureFMPAGroupByOutputType>[]
          }
          count: {
            args: Prisma.SignatureFMPACountArgs<ExtArgs>
            result: $Utils.Optional<SignatureFMPACountAggregateOutputType> | number
          }
        }
      }
      AptitudeMedicale: {
        payload: Prisma.$AptitudeMedicalePayload<ExtArgs>
        fields: Prisma.AptitudeMedicaleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AptitudeMedicaleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AptitudeMedicalePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AptitudeMedicaleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AptitudeMedicalePayload>
          }
          findFirst: {
            args: Prisma.AptitudeMedicaleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AptitudeMedicalePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AptitudeMedicaleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AptitudeMedicalePayload>
          }
          findMany: {
            args: Prisma.AptitudeMedicaleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AptitudeMedicalePayload>[]
          }
          create: {
            args: Prisma.AptitudeMedicaleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AptitudeMedicalePayload>
          }
          createMany: {
            args: Prisma.AptitudeMedicaleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AptitudeMedicaleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AptitudeMedicalePayload>[]
          }
          delete: {
            args: Prisma.AptitudeMedicaleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AptitudeMedicalePayload>
          }
          update: {
            args: Prisma.AptitudeMedicaleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AptitudeMedicalePayload>
          }
          deleteMany: {
            args: Prisma.AptitudeMedicaleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AptitudeMedicaleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AptitudeMedicaleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AptitudeMedicalePayload>
          }
          aggregate: {
            args: Prisma.AptitudeMedicaleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAptitudeMedicale>
          }
          groupBy: {
            args: Prisma.AptitudeMedicaleGroupByArgs<ExtArgs>
            result: $Utils.Optional<AptitudeMedicaleGroupByOutputType>[]
          }
          count: {
            args: Prisma.AptitudeMedicaleCountArgs<ExtArgs>
            result: $Utils.Optional<AptitudeMedicaleCountAggregateOutputType> | number
          }
        }
      }
      Competence: {
        payload: Prisma.$CompetencePayload<ExtArgs>
        fields: Prisma.CompetenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CompetenceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CompetenceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          findFirst: {
            args: Prisma.CompetenceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CompetenceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          findMany: {
            args: Prisma.CompetenceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>[]
          }
          create: {
            args: Prisma.CompetenceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          createMany: {
            args: Prisma.CompetenceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CompetenceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>[]
          }
          delete: {
            args: Prisma.CompetenceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          update: {
            args: Prisma.CompetenceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          deleteMany: {
            args: Prisma.CompetenceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CompetenceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CompetenceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CompetencePayload>
          }
          aggregate: {
            args: Prisma.CompetenceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompetence>
          }
          groupBy: {
            args: Prisma.CompetenceGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompetenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.CompetenceCountArgs<ExtArgs>
            result: $Utils.Optional<CompetenceCountAggregateOutputType> | number
          }
        }
      }
      ExportTTA: {
        payload: Prisma.$ExportTTAPayload<ExtArgs>
        fields: Prisma.ExportTTAFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExportTTAFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportTTAPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExportTTAFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportTTAPayload>
          }
          findFirst: {
            args: Prisma.ExportTTAFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportTTAPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExportTTAFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportTTAPayload>
          }
          findMany: {
            args: Prisma.ExportTTAFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportTTAPayload>[]
          }
          create: {
            args: Prisma.ExportTTACreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportTTAPayload>
          }
          createMany: {
            args: Prisma.ExportTTACreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExportTTACreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportTTAPayload>[]
          }
          delete: {
            args: Prisma.ExportTTADeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportTTAPayload>
          }
          update: {
            args: Prisma.ExportTTAUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportTTAPayload>
          }
          deleteMany: {
            args: Prisma.ExportTTADeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExportTTAUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExportTTAUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportTTAPayload>
          }
          aggregate: {
            args: Prisma.ExportTTAAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExportTTA>
          }
          groupBy: {
            args: Prisma.ExportTTAGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExportTTAGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExportTTACountArgs<ExtArgs>
            result: $Utils.Optional<ExportTTACountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NotificationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: Prisma.$AuditLogPayload<ExtArgs>
        fields: Prisma.AuditLogFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AuditLogCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>[]
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type PersonnelCountOutputType
   */

  export type PersonnelCountOutputType = {
    competences: number
    inscriptions: number
    sessionsFormateur: number
    signatures: number
    notifications: number
    auditLogs: number
  }

  export type PersonnelCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    competences?: boolean | PersonnelCountOutputTypeCountCompetencesArgs
    inscriptions?: boolean | PersonnelCountOutputTypeCountInscriptionsArgs
    sessionsFormateur?: boolean | PersonnelCountOutputTypeCountSessionsFormateurArgs
    signatures?: boolean | PersonnelCountOutputTypeCountSignaturesArgs
    notifications?: boolean | PersonnelCountOutputTypeCountNotificationsArgs
    auditLogs?: boolean | PersonnelCountOutputTypeCountAuditLogsArgs
  }

  // Custom InputTypes
  /**
   * PersonnelCountOutputType without action
   */
  export type PersonnelCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PersonnelCountOutputType
     */
    select?: PersonnelCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PersonnelCountOutputType without action
   */
  export type PersonnelCountOutputTypeCountCompetencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetenceWhereInput
  }

  /**
   * PersonnelCountOutputType without action
   */
  export type PersonnelCountOutputTypeCountInscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InscriptionFMPAWhereInput
  }

  /**
   * PersonnelCountOutputType without action
   */
  export type PersonnelCountOutputTypeCountSessionsFormateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionFMPAWhereInput
  }

  /**
   * PersonnelCountOutputType without action
   */
  export type PersonnelCountOutputTypeCountSignaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SignatureFMPAWhereInput
  }

  /**
   * PersonnelCountOutputType without action
   */
  export type PersonnelCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * PersonnelCountOutputType without action
   */
  export type PersonnelCountOutputTypeCountAuditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
  }


  /**
   * Count Type CentreCountOutputType
   */

  export type CentreCountOutputType = {
    personnels: number
    sessions: number
  }

  export type CentreCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personnels?: boolean | CentreCountOutputTypeCountPersonnelsArgs
    sessions?: boolean | CentreCountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * CentreCountOutputType without action
   */
  export type CentreCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CentreCountOutputType
     */
    select?: CentreCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CentreCountOutputType without action
   */
  export type CentreCountOutputTypeCountPersonnelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonnelWhereInput
  }

  /**
   * CentreCountOutputType without action
   */
  export type CentreCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionFMPAWhereInput
  }


  /**
   * Count Type TypeFMPACountOutputType
   */

  export type TypeFMPACountOutputType = {
    sessions: number
  }

  export type TypeFMPACountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | TypeFMPACountOutputTypeCountSessionsArgs
  }

  // Custom InputTypes
  /**
   * TypeFMPACountOutputType without action
   */
  export type TypeFMPACountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeFMPACountOutputType
     */
    select?: TypeFMPACountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TypeFMPACountOutputType without action
   */
  export type TypeFMPACountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionFMPAWhereInput
  }


  /**
   * Count Type SessionFMPACountOutputType
   */

  export type SessionFMPACountOutputType = {
    inscriptions: number
    signatures: number
    exportsTTA: number
  }

  export type SessionFMPACountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    inscriptions?: boolean | SessionFMPACountOutputTypeCountInscriptionsArgs
    signatures?: boolean | SessionFMPACountOutputTypeCountSignaturesArgs
    exportsTTA?: boolean | SessionFMPACountOutputTypeCountExportsTTAArgs
  }

  // Custom InputTypes
  /**
   * SessionFMPACountOutputType without action
   */
  export type SessionFMPACountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPACountOutputType
     */
    select?: SessionFMPACountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SessionFMPACountOutputType without action
   */
  export type SessionFMPACountOutputTypeCountInscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InscriptionFMPAWhereInput
  }

  /**
   * SessionFMPACountOutputType without action
   */
  export type SessionFMPACountOutputTypeCountSignaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SignatureFMPAWhereInput
  }

  /**
   * SessionFMPACountOutputType without action
   */
  export type SessionFMPACountOutputTypeCountExportsTTAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExportTTAWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Personnel
   */

  export type AggregatePersonnel = {
    _count: PersonnelCountAggregateOutputType | null
    _avg: PersonnelAvgAggregateOutputType | null
    _sum: PersonnelSumAggregateOutputType | null
    _min: PersonnelMinAggregateOutputType | null
    _max: PersonnelMaxAggregateOutputType | null
  }

  export type PersonnelAvgAggregateOutputType = {
    id: number | null
    centreId: number | null
  }

  export type PersonnelSumAggregateOutputType = {
    id: number | null
    centreId: number | null
  }

  export type PersonnelMinAggregateOutputType = {
    id: number | null
    matricule: string | null
    nom: string | null
    prenom: string | null
    email: string | null
    telephone: string | null
    password: string | null
    grade: string | null
    centreId: number | null
    categorie: $Enums.Categorie | null
    statut: $Enums.StatutPersonnel | null
    refreshToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PersonnelMaxAggregateOutputType = {
    id: number | null
    matricule: string | null
    nom: string | null
    prenom: string | null
    email: string | null
    telephone: string | null
    password: string | null
    grade: string | null
    centreId: number | null
    categorie: $Enums.Categorie | null
    statut: $Enums.StatutPersonnel | null
    refreshToken: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PersonnelCountAggregateOutputType = {
    id: number
    matricule: number
    nom: number
    prenom: number
    email: number
    telephone: number
    password: number
    grade: number
    centreId: number
    categorie: number
    statut: number
    roles: number
    refreshToken: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PersonnelAvgAggregateInputType = {
    id?: true
    centreId?: true
  }

  export type PersonnelSumAggregateInputType = {
    id?: true
    centreId?: true
  }

  export type PersonnelMinAggregateInputType = {
    id?: true
    matricule?: true
    nom?: true
    prenom?: true
    email?: true
    telephone?: true
    password?: true
    grade?: true
    centreId?: true
    categorie?: true
    statut?: true
    refreshToken?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PersonnelMaxAggregateInputType = {
    id?: true
    matricule?: true
    nom?: true
    prenom?: true
    email?: true
    telephone?: true
    password?: true
    grade?: true
    centreId?: true
    categorie?: true
    statut?: true
    refreshToken?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PersonnelCountAggregateInputType = {
    id?: true
    matricule?: true
    nom?: true
    prenom?: true
    email?: true
    telephone?: true
    password?: true
    grade?: true
    centreId?: true
    categorie?: true
    statut?: true
    roles?: true
    refreshToken?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PersonnelAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Personnel to aggregate.
     */
    where?: PersonnelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personnel to fetch.
     */
    orderBy?: PersonnelOrderByWithRelationInput | PersonnelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PersonnelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personnel from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personnel.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Personnel
    **/
    _count?: true | PersonnelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PersonnelAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PersonnelSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PersonnelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PersonnelMaxAggregateInputType
  }

  export type GetPersonnelAggregateType<T extends PersonnelAggregateArgs> = {
        [P in keyof T & keyof AggregatePersonnel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePersonnel[P]>
      : GetScalarType<T[P], AggregatePersonnel[P]>
  }




  export type PersonnelGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PersonnelWhereInput
    orderBy?: PersonnelOrderByWithAggregationInput | PersonnelOrderByWithAggregationInput[]
    by: PersonnelScalarFieldEnum[] | PersonnelScalarFieldEnum
    having?: PersonnelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PersonnelCountAggregateInputType | true
    _avg?: PersonnelAvgAggregateInputType
    _sum?: PersonnelSumAggregateInputType
    _min?: PersonnelMinAggregateInputType
    _max?: PersonnelMaxAggregateInputType
  }

  export type PersonnelGroupByOutputType = {
    id: number
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone: string | null
    password: string
    grade: string
    centreId: number
    categorie: $Enums.Categorie
    statut: $Enums.StatutPersonnel
    roles: $Enums.Role[]
    refreshToken: string | null
    createdAt: Date
    updatedAt: Date
    _count: PersonnelCountAggregateOutputType | null
    _avg: PersonnelAvgAggregateOutputType | null
    _sum: PersonnelSumAggregateOutputType | null
    _min: PersonnelMinAggregateOutputType | null
    _max: PersonnelMaxAggregateOutputType | null
  }

  type GetPersonnelGroupByPayload<T extends PersonnelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PersonnelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PersonnelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PersonnelGroupByOutputType[P]>
            : GetScalarType<T[P], PersonnelGroupByOutputType[P]>
        }
      >
    >


  export type PersonnelSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matricule?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
    grade?: boolean
    centreId?: boolean
    categorie?: boolean
    statut?: boolean
    roles?: boolean
    refreshToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    centre?: boolean | CentreDefaultArgs<ExtArgs>
    aptitudeMedicale?: boolean | Personnel$aptitudeMedicaleArgs<ExtArgs>
    competences?: boolean | Personnel$competencesArgs<ExtArgs>
    inscriptions?: boolean | Personnel$inscriptionsArgs<ExtArgs>
    sessionsFormateur?: boolean | Personnel$sessionsFormateurArgs<ExtArgs>
    signatures?: boolean | Personnel$signaturesArgs<ExtArgs>
    notifications?: boolean | Personnel$notificationsArgs<ExtArgs>
    auditLogs?: boolean | Personnel$auditLogsArgs<ExtArgs>
    _count?: boolean | PersonnelCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personnel"]>

  export type PersonnelSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    matricule?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
    grade?: boolean
    centreId?: boolean
    categorie?: boolean
    statut?: boolean
    roles?: boolean
    refreshToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    centre?: boolean | CentreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["personnel"]>

  export type PersonnelSelectScalar = {
    id?: boolean
    matricule?: boolean
    nom?: boolean
    prenom?: boolean
    email?: boolean
    telephone?: boolean
    password?: boolean
    grade?: boolean
    centreId?: boolean
    categorie?: boolean
    statut?: boolean
    roles?: boolean
    refreshToken?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PersonnelInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    centre?: boolean | CentreDefaultArgs<ExtArgs>
    aptitudeMedicale?: boolean | Personnel$aptitudeMedicaleArgs<ExtArgs>
    competences?: boolean | Personnel$competencesArgs<ExtArgs>
    inscriptions?: boolean | Personnel$inscriptionsArgs<ExtArgs>
    sessionsFormateur?: boolean | Personnel$sessionsFormateurArgs<ExtArgs>
    signatures?: boolean | Personnel$signaturesArgs<ExtArgs>
    notifications?: boolean | Personnel$notificationsArgs<ExtArgs>
    auditLogs?: boolean | Personnel$auditLogsArgs<ExtArgs>
    _count?: boolean | PersonnelCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PersonnelIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    centre?: boolean | CentreDefaultArgs<ExtArgs>
  }

  export type $PersonnelPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Personnel"
    objects: {
      centre: Prisma.$CentrePayload<ExtArgs>
      aptitudeMedicale: Prisma.$AptitudeMedicalePayload<ExtArgs> | null
      competences: Prisma.$CompetencePayload<ExtArgs>[]
      inscriptions: Prisma.$InscriptionFMPAPayload<ExtArgs>[]
      sessionsFormateur: Prisma.$SessionFMPAPayload<ExtArgs>[]
      signatures: Prisma.$SignatureFMPAPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      auditLogs: Prisma.$AuditLogPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      matricule: string
      nom: string
      prenom: string
      email: string
      telephone: string | null
      password: string
      grade: string
      centreId: number
      categorie: $Enums.Categorie
      statut: $Enums.StatutPersonnel
      roles: $Enums.Role[]
      refreshToken: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["personnel"]>
    composites: {}
  }

  type PersonnelGetPayload<S extends boolean | null | undefined | PersonnelDefaultArgs> = $Result.GetResult<Prisma.$PersonnelPayload, S>

  type PersonnelCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PersonnelFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PersonnelCountAggregateInputType | true
    }

  export interface PersonnelDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Personnel'], meta: { name: 'Personnel' } }
    /**
     * Find zero or one Personnel that matches the filter.
     * @param {PersonnelFindUniqueArgs} args - Arguments to find a Personnel
     * @example
     * // Get one Personnel
     * const personnel = await prisma.personnel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PersonnelFindUniqueArgs>(args: SelectSubset<T, PersonnelFindUniqueArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Personnel that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PersonnelFindUniqueOrThrowArgs} args - Arguments to find a Personnel
     * @example
     * // Get one Personnel
     * const personnel = await prisma.personnel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PersonnelFindUniqueOrThrowArgs>(args: SelectSubset<T, PersonnelFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Personnel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelFindFirstArgs} args - Arguments to find a Personnel
     * @example
     * // Get one Personnel
     * const personnel = await prisma.personnel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PersonnelFindFirstArgs>(args?: SelectSubset<T, PersonnelFindFirstArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Personnel that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelFindFirstOrThrowArgs} args - Arguments to find a Personnel
     * @example
     * // Get one Personnel
     * const personnel = await prisma.personnel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PersonnelFindFirstOrThrowArgs>(args?: SelectSubset<T, PersonnelFindFirstOrThrowArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Personnel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Personnel
     * const personnel = await prisma.personnel.findMany()
     * 
     * // Get first 10 Personnel
     * const personnel = await prisma.personnel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const personnelWithIdOnly = await prisma.personnel.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PersonnelFindManyArgs>(args?: SelectSubset<T, PersonnelFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Personnel.
     * @param {PersonnelCreateArgs} args - Arguments to create a Personnel.
     * @example
     * // Create one Personnel
     * const Personnel = await prisma.personnel.create({
     *   data: {
     *     // ... data to create a Personnel
     *   }
     * })
     * 
     */
    create<T extends PersonnelCreateArgs>(args: SelectSubset<T, PersonnelCreateArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Personnel.
     * @param {PersonnelCreateManyArgs} args - Arguments to create many Personnel.
     * @example
     * // Create many Personnel
     * const personnel = await prisma.personnel.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PersonnelCreateManyArgs>(args?: SelectSubset<T, PersonnelCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Personnel and returns the data saved in the database.
     * @param {PersonnelCreateManyAndReturnArgs} args - Arguments to create many Personnel.
     * @example
     * // Create many Personnel
     * const personnel = await prisma.personnel.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Personnel and only return the `id`
     * const personnelWithIdOnly = await prisma.personnel.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PersonnelCreateManyAndReturnArgs>(args?: SelectSubset<T, PersonnelCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Personnel.
     * @param {PersonnelDeleteArgs} args - Arguments to delete one Personnel.
     * @example
     * // Delete one Personnel
     * const Personnel = await prisma.personnel.delete({
     *   where: {
     *     // ... filter to delete one Personnel
     *   }
     * })
     * 
     */
    delete<T extends PersonnelDeleteArgs>(args: SelectSubset<T, PersonnelDeleteArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Personnel.
     * @param {PersonnelUpdateArgs} args - Arguments to update one Personnel.
     * @example
     * // Update one Personnel
     * const personnel = await prisma.personnel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PersonnelUpdateArgs>(args: SelectSubset<T, PersonnelUpdateArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Personnel.
     * @param {PersonnelDeleteManyArgs} args - Arguments to filter Personnel to delete.
     * @example
     * // Delete a few Personnel
     * const { count } = await prisma.personnel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PersonnelDeleteManyArgs>(args?: SelectSubset<T, PersonnelDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Personnel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Personnel
     * const personnel = await prisma.personnel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PersonnelUpdateManyArgs>(args: SelectSubset<T, PersonnelUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Personnel.
     * @param {PersonnelUpsertArgs} args - Arguments to update or create a Personnel.
     * @example
     * // Update or create a Personnel
     * const personnel = await prisma.personnel.upsert({
     *   create: {
     *     // ... data to create a Personnel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Personnel we want to update
     *   }
     * })
     */
    upsert<T extends PersonnelUpsertArgs>(args: SelectSubset<T, PersonnelUpsertArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Personnel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelCountArgs} args - Arguments to filter Personnel to count.
     * @example
     * // Count the number of Personnel
     * const count = await prisma.personnel.count({
     *   where: {
     *     // ... the filter for the Personnel we want to count
     *   }
     * })
    **/
    count<T extends PersonnelCountArgs>(
      args?: Subset<T, PersonnelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PersonnelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Personnel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PersonnelAggregateArgs>(args: Subset<T, PersonnelAggregateArgs>): Prisma.PrismaPromise<GetPersonnelAggregateType<T>>

    /**
     * Group by Personnel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PersonnelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PersonnelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PersonnelGroupByArgs['orderBy'] }
        : { orderBy?: PersonnelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PersonnelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPersonnelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Personnel model
   */
  readonly fields: PersonnelFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Personnel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PersonnelClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    centre<T extends CentreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CentreDefaultArgs<ExtArgs>>): Prisma__CentreClient<$Result.GetResult<Prisma.$CentrePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    aptitudeMedicale<T extends Personnel$aptitudeMedicaleArgs<ExtArgs> = {}>(args?: Subset<T, Personnel$aptitudeMedicaleArgs<ExtArgs>>): Prisma__AptitudeMedicaleClient<$Result.GetResult<Prisma.$AptitudeMedicalePayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    competences<T extends Personnel$competencesArgs<ExtArgs> = {}>(args?: Subset<T, Personnel$competencesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findMany"> | Null>
    inscriptions<T extends Personnel$inscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Personnel$inscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscriptionFMPAPayload<ExtArgs>, T, "findMany"> | Null>
    sessionsFormateur<T extends Personnel$sessionsFormateurArgs<ExtArgs> = {}>(args?: Subset<T, Personnel$sessionsFormateurArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "findMany"> | Null>
    signatures<T extends Personnel$signaturesArgs<ExtArgs> = {}>(args?: Subset<T, Personnel$signaturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignatureFMPAPayload<ExtArgs>, T, "findMany"> | Null>
    notifications<T extends Personnel$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, Personnel$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany"> | Null>
    auditLogs<T extends Personnel$auditLogsArgs<ExtArgs> = {}>(args?: Subset<T, Personnel$auditLogsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Personnel model
   */ 
  interface PersonnelFieldRefs {
    readonly id: FieldRef<"Personnel", 'Int'>
    readonly matricule: FieldRef<"Personnel", 'String'>
    readonly nom: FieldRef<"Personnel", 'String'>
    readonly prenom: FieldRef<"Personnel", 'String'>
    readonly email: FieldRef<"Personnel", 'String'>
    readonly telephone: FieldRef<"Personnel", 'String'>
    readonly password: FieldRef<"Personnel", 'String'>
    readonly grade: FieldRef<"Personnel", 'String'>
    readonly centreId: FieldRef<"Personnel", 'Int'>
    readonly categorie: FieldRef<"Personnel", 'Categorie'>
    readonly statut: FieldRef<"Personnel", 'StatutPersonnel'>
    readonly roles: FieldRef<"Personnel", 'Role[]'>
    readonly refreshToken: FieldRef<"Personnel", 'String'>
    readonly createdAt: FieldRef<"Personnel", 'DateTime'>
    readonly updatedAt: FieldRef<"Personnel", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Personnel findUnique
   */
  export type PersonnelFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelInclude<ExtArgs> | null
    /**
     * Filter, which Personnel to fetch.
     */
    where: PersonnelWhereUniqueInput
  }

  /**
   * Personnel findUniqueOrThrow
   */
  export type PersonnelFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelInclude<ExtArgs> | null
    /**
     * Filter, which Personnel to fetch.
     */
    where: PersonnelWhereUniqueInput
  }

  /**
   * Personnel findFirst
   */
  export type PersonnelFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelInclude<ExtArgs> | null
    /**
     * Filter, which Personnel to fetch.
     */
    where?: PersonnelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personnel to fetch.
     */
    orderBy?: PersonnelOrderByWithRelationInput | PersonnelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Personnel.
     */
    cursor?: PersonnelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personnel from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personnel.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Personnel.
     */
    distinct?: PersonnelScalarFieldEnum | PersonnelScalarFieldEnum[]
  }

  /**
   * Personnel findFirstOrThrow
   */
  export type PersonnelFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelInclude<ExtArgs> | null
    /**
     * Filter, which Personnel to fetch.
     */
    where?: PersonnelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personnel to fetch.
     */
    orderBy?: PersonnelOrderByWithRelationInput | PersonnelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Personnel.
     */
    cursor?: PersonnelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personnel from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personnel.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Personnel.
     */
    distinct?: PersonnelScalarFieldEnum | PersonnelScalarFieldEnum[]
  }

  /**
   * Personnel findMany
   */
  export type PersonnelFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelInclude<ExtArgs> | null
    /**
     * Filter, which Personnel to fetch.
     */
    where?: PersonnelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Personnel to fetch.
     */
    orderBy?: PersonnelOrderByWithRelationInput | PersonnelOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Personnel.
     */
    cursor?: PersonnelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Personnel from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Personnel.
     */
    skip?: number
    distinct?: PersonnelScalarFieldEnum | PersonnelScalarFieldEnum[]
  }

  /**
   * Personnel create
   */
  export type PersonnelCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelInclude<ExtArgs> | null
    /**
     * The data needed to create a Personnel.
     */
    data: XOR<PersonnelCreateInput, PersonnelUncheckedCreateInput>
  }

  /**
   * Personnel createMany
   */
  export type PersonnelCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Personnel.
     */
    data: PersonnelCreateManyInput | PersonnelCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Personnel createManyAndReturn
   */
  export type PersonnelCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Personnel.
     */
    data: PersonnelCreateManyInput | PersonnelCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Personnel update
   */
  export type PersonnelUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelInclude<ExtArgs> | null
    /**
     * The data needed to update a Personnel.
     */
    data: XOR<PersonnelUpdateInput, PersonnelUncheckedUpdateInput>
    /**
     * Choose, which Personnel to update.
     */
    where: PersonnelWhereUniqueInput
  }

  /**
   * Personnel updateMany
   */
  export type PersonnelUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Personnel.
     */
    data: XOR<PersonnelUpdateManyMutationInput, PersonnelUncheckedUpdateManyInput>
    /**
     * Filter which Personnel to update
     */
    where?: PersonnelWhereInput
  }

  /**
   * Personnel upsert
   */
  export type PersonnelUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelInclude<ExtArgs> | null
    /**
     * The filter to search for the Personnel to update in case it exists.
     */
    where: PersonnelWhereUniqueInput
    /**
     * In case the Personnel found by the `where` argument doesn't exist, create a new Personnel with this data.
     */
    create: XOR<PersonnelCreateInput, PersonnelUncheckedCreateInput>
    /**
     * In case the Personnel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PersonnelUpdateInput, PersonnelUncheckedUpdateInput>
  }

  /**
   * Personnel delete
   */
  export type PersonnelDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelInclude<ExtArgs> | null
    /**
     * Filter which Personnel to delete.
     */
    where: PersonnelWhereUniqueInput
  }

  /**
   * Personnel deleteMany
   */
  export type PersonnelDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Personnel to delete
     */
    where?: PersonnelWhereInput
  }

  /**
   * Personnel.aptitudeMedicale
   */
  export type Personnel$aptitudeMedicaleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AptitudeMedicale
     */
    select?: AptitudeMedicaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AptitudeMedicaleInclude<ExtArgs> | null
    where?: AptitudeMedicaleWhereInput
  }

  /**
   * Personnel.competences
   */
  export type Personnel$competencesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    where?: CompetenceWhereInput
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    cursor?: CompetenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CompetenceScalarFieldEnum | CompetenceScalarFieldEnum[]
  }

  /**
   * Personnel.inscriptions
   */
  export type Personnel$inscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAInclude<ExtArgs> | null
    where?: InscriptionFMPAWhereInput
    orderBy?: InscriptionFMPAOrderByWithRelationInput | InscriptionFMPAOrderByWithRelationInput[]
    cursor?: InscriptionFMPAWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InscriptionFMPAScalarFieldEnum | InscriptionFMPAScalarFieldEnum[]
  }

  /**
   * Personnel.sessionsFormateur
   */
  export type Personnel$sessionsFormateurArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    where?: SessionFMPAWhereInput
    orderBy?: SessionFMPAOrderByWithRelationInput | SessionFMPAOrderByWithRelationInput[]
    cursor?: SessionFMPAWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionFMPAScalarFieldEnum | SessionFMPAScalarFieldEnum[]
  }

  /**
   * Personnel.signatures
   */
  export type Personnel$signaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAInclude<ExtArgs> | null
    where?: SignatureFMPAWhereInput
    orderBy?: SignatureFMPAOrderByWithRelationInput | SignatureFMPAOrderByWithRelationInput[]
    cursor?: SignatureFMPAWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SignatureFMPAScalarFieldEnum | SignatureFMPAScalarFieldEnum[]
  }

  /**
   * Personnel.notifications
   */
  export type Personnel$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Personnel.auditLogs
   */
  export type Personnel$auditLogsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    cursor?: AuditLogWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * Personnel without action
   */
  export type PersonnelDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelInclude<ExtArgs> | null
  }


  /**
   * Model Centre
   */

  export type AggregateCentre = {
    _count: CentreCountAggregateOutputType | null
    _avg: CentreAvgAggregateOutputType | null
    _sum: CentreSumAggregateOutputType | null
    _min: CentreMinAggregateOutputType | null
    _max: CentreMaxAggregateOutputType | null
  }

  export type CentreAvgAggregateOutputType = {
    id: number | null
  }

  export type CentreSumAggregateOutputType = {
    id: number | null
  }

  export type CentreMinAggregateOutputType = {
    id: number | null
    code: string | null
    nom: string | null
    type: string | null
    adresse: string | null
    telephone: string | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CentreMaxAggregateOutputType = {
    id: number | null
    code: string | null
    nom: string | null
    type: string | null
    adresse: string | null
    telephone: string | null
    email: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CentreCountAggregateOutputType = {
    id: number
    code: number
    nom: number
    type: number
    adresse: number
    telephone: number
    email: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CentreAvgAggregateInputType = {
    id?: true
  }

  export type CentreSumAggregateInputType = {
    id?: true
  }

  export type CentreMinAggregateInputType = {
    id?: true
    code?: true
    nom?: true
    type?: true
    adresse?: true
    telephone?: true
    email?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CentreMaxAggregateInputType = {
    id?: true
    code?: true
    nom?: true
    type?: true
    adresse?: true
    telephone?: true
    email?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CentreCountAggregateInputType = {
    id?: true
    code?: true
    nom?: true
    type?: true
    adresse?: true
    telephone?: true
    email?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CentreAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Centre to aggregate.
     */
    where?: CentreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Centres to fetch.
     */
    orderBy?: CentreOrderByWithRelationInput | CentreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CentreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Centres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Centres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Centres
    **/
    _count?: true | CentreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CentreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CentreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CentreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CentreMaxAggregateInputType
  }

  export type GetCentreAggregateType<T extends CentreAggregateArgs> = {
        [P in keyof T & keyof AggregateCentre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCentre[P]>
      : GetScalarType<T[P], AggregateCentre[P]>
  }




  export type CentreGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CentreWhereInput
    orderBy?: CentreOrderByWithAggregationInput | CentreOrderByWithAggregationInput[]
    by: CentreScalarFieldEnum[] | CentreScalarFieldEnum
    having?: CentreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CentreCountAggregateInputType | true
    _avg?: CentreAvgAggregateInputType
    _sum?: CentreSumAggregateInputType
    _min?: CentreMinAggregateInputType
    _max?: CentreMaxAggregateInputType
  }

  export type CentreGroupByOutputType = {
    id: number
    code: string
    nom: string
    type: string
    adresse: string | null
    telephone: string | null
    email: string | null
    createdAt: Date
    updatedAt: Date
    _count: CentreCountAggregateOutputType | null
    _avg: CentreAvgAggregateOutputType | null
    _sum: CentreSumAggregateOutputType | null
    _min: CentreMinAggregateOutputType | null
    _max: CentreMaxAggregateOutputType | null
  }

  type GetCentreGroupByPayload<T extends CentreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CentreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CentreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CentreGroupByOutputType[P]>
            : GetScalarType<T[P], CentreGroupByOutputType[P]>
        }
      >
    >


  export type CentreSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    nom?: boolean
    type?: boolean
    adresse?: boolean
    telephone?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    personnels?: boolean | Centre$personnelsArgs<ExtArgs>
    sessions?: boolean | Centre$sessionsArgs<ExtArgs>
    _count?: boolean | CentreCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["centre"]>

  export type CentreSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    nom?: boolean
    type?: boolean
    adresse?: boolean
    telephone?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["centre"]>

  export type CentreSelectScalar = {
    id?: boolean
    code?: boolean
    nom?: boolean
    type?: boolean
    adresse?: boolean
    telephone?: boolean
    email?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CentreInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personnels?: boolean | Centre$personnelsArgs<ExtArgs>
    sessions?: boolean | Centre$sessionsArgs<ExtArgs>
    _count?: boolean | CentreCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CentreIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CentrePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Centre"
    objects: {
      personnels: Prisma.$PersonnelPayload<ExtArgs>[]
      sessions: Prisma.$SessionFMPAPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      nom: string
      type: string
      adresse: string | null
      telephone: string | null
      email: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["centre"]>
    composites: {}
  }

  type CentreGetPayload<S extends boolean | null | undefined | CentreDefaultArgs> = $Result.GetResult<Prisma.$CentrePayload, S>

  type CentreCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CentreFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CentreCountAggregateInputType | true
    }

  export interface CentreDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Centre'], meta: { name: 'Centre' } }
    /**
     * Find zero or one Centre that matches the filter.
     * @param {CentreFindUniqueArgs} args - Arguments to find a Centre
     * @example
     * // Get one Centre
     * const centre = await prisma.centre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CentreFindUniqueArgs>(args: SelectSubset<T, CentreFindUniqueArgs<ExtArgs>>): Prisma__CentreClient<$Result.GetResult<Prisma.$CentrePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Centre that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CentreFindUniqueOrThrowArgs} args - Arguments to find a Centre
     * @example
     * // Get one Centre
     * const centre = await prisma.centre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CentreFindUniqueOrThrowArgs>(args: SelectSubset<T, CentreFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CentreClient<$Result.GetResult<Prisma.$CentrePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Centre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreFindFirstArgs} args - Arguments to find a Centre
     * @example
     * // Get one Centre
     * const centre = await prisma.centre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CentreFindFirstArgs>(args?: SelectSubset<T, CentreFindFirstArgs<ExtArgs>>): Prisma__CentreClient<$Result.GetResult<Prisma.$CentrePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Centre that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreFindFirstOrThrowArgs} args - Arguments to find a Centre
     * @example
     * // Get one Centre
     * const centre = await prisma.centre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CentreFindFirstOrThrowArgs>(args?: SelectSubset<T, CentreFindFirstOrThrowArgs<ExtArgs>>): Prisma__CentreClient<$Result.GetResult<Prisma.$CentrePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Centres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Centres
     * const centres = await prisma.centre.findMany()
     * 
     * // Get first 10 Centres
     * const centres = await prisma.centre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const centreWithIdOnly = await prisma.centre.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CentreFindManyArgs>(args?: SelectSubset<T, CentreFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CentrePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Centre.
     * @param {CentreCreateArgs} args - Arguments to create a Centre.
     * @example
     * // Create one Centre
     * const Centre = await prisma.centre.create({
     *   data: {
     *     // ... data to create a Centre
     *   }
     * })
     * 
     */
    create<T extends CentreCreateArgs>(args: SelectSubset<T, CentreCreateArgs<ExtArgs>>): Prisma__CentreClient<$Result.GetResult<Prisma.$CentrePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Centres.
     * @param {CentreCreateManyArgs} args - Arguments to create many Centres.
     * @example
     * // Create many Centres
     * const centre = await prisma.centre.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CentreCreateManyArgs>(args?: SelectSubset<T, CentreCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Centres and returns the data saved in the database.
     * @param {CentreCreateManyAndReturnArgs} args - Arguments to create many Centres.
     * @example
     * // Create many Centres
     * const centre = await prisma.centre.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Centres and only return the `id`
     * const centreWithIdOnly = await prisma.centre.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CentreCreateManyAndReturnArgs>(args?: SelectSubset<T, CentreCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CentrePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Centre.
     * @param {CentreDeleteArgs} args - Arguments to delete one Centre.
     * @example
     * // Delete one Centre
     * const Centre = await prisma.centre.delete({
     *   where: {
     *     // ... filter to delete one Centre
     *   }
     * })
     * 
     */
    delete<T extends CentreDeleteArgs>(args: SelectSubset<T, CentreDeleteArgs<ExtArgs>>): Prisma__CentreClient<$Result.GetResult<Prisma.$CentrePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Centre.
     * @param {CentreUpdateArgs} args - Arguments to update one Centre.
     * @example
     * // Update one Centre
     * const centre = await prisma.centre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CentreUpdateArgs>(args: SelectSubset<T, CentreUpdateArgs<ExtArgs>>): Prisma__CentreClient<$Result.GetResult<Prisma.$CentrePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Centres.
     * @param {CentreDeleteManyArgs} args - Arguments to filter Centres to delete.
     * @example
     * // Delete a few Centres
     * const { count } = await prisma.centre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CentreDeleteManyArgs>(args?: SelectSubset<T, CentreDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Centres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Centres
     * const centre = await prisma.centre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CentreUpdateManyArgs>(args: SelectSubset<T, CentreUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Centre.
     * @param {CentreUpsertArgs} args - Arguments to update or create a Centre.
     * @example
     * // Update or create a Centre
     * const centre = await prisma.centre.upsert({
     *   create: {
     *     // ... data to create a Centre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Centre we want to update
     *   }
     * })
     */
    upsert<T extends CentreUpsertArgs>(args: SelectSubset<T, CentreUpsertArgs<ExtArgs>>): Prisma__CentreClient<$Result.GetResult<Prisma.$CentrePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Centres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreCountArgs} args - Arguments to filter Centres to count.
     * @example
     * // Count the number of Centres
     * const count = await prisma.centre.count({
     *   where: {
     *     // ... the filter for the Centres we want to count
     *   }
     * })
    **/
    count<T extends CentreCountArgs>(
      args?: Subset<T, CentreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CentreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Centre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CentreAggregateArgs>(args: Subset<T, CentreAggregateArgs>): Prisma.PrismaPromise<GetCentreAggregateType<T>>

    /**
     * Group by Centre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CentreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CentreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CentreGroupByArgs['orderBy'] }
        : { orderBy?: CentreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CentreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCentreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Centre model
   */
  readonly fields: CentreFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Centre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CentreClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    personnels<T extends Centre$personnelsArgs<ExtArgs> = {}>(args?: Subset<T, Centre$personnelsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findMany"> | Null>
    sessions<T extends Centre$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, Centre$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Centre model
   */ 
  interface CentreFieldRefs {
    readonly id: FieldRef<"Centre", 'Int'>
    readonly code: FieldRef<"Centre", 'String'>
    readonly nom: FieldRef<"Centre", 'String'>
    readonly type: FieldRef<"Centre", 'String'>
    readonly adresse: FieldRef<"Centre", 'String'>
    readonly telephone: FieldRef<"Centre", 'String'>
    readonly email: FieldRef<"Centre", 'String'>
    readonly createdAt: FieldRef<"Centre", 'DateTime'>
    readonly updatedAt: FieldRef<"Centre", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Centre findUnique
   */
  export type CentreFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Centre
     */
    select?: CentreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreInclude<ExtArgs> | null
    /**
     * Filter, which Centre to fetch.
     */
    where: CentreWhereUniqueInput
  }

  /**
   * Centre findUniqueOrThrow
   */
  export type CentreFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Centre
     */
    select?: CentreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreInclude<ExtArgs> | null
    /**
     * Filter, which Centre to fetch.
     */
    where: CentreWhereUniqueInput
  }

  /**
   * Centre findFirst
   */
  export type CentreFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Centre
     */
    select?: CentreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreInclude<ExtArgs> | null
    /**
     * Filter, which Centre to fetch.
     */
    where?: CentreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Centres to fetch.
     */
    orderBy?: CentreOrderByWithRelationInput | CentreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Centres.
     */
    cursor?: CentreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Centres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Centres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Centres.
     */
    distinct?: CentreScalarFieldEnum | CentreScalarFieldEnum[]
  }

  /**
   * Centre findFirstOrThrow
   */
  export type CentreFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Centre
     */
    select?: CentreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreInclude<ExtArgs> | null
    /**
     * Filter, which Centre to fetch.
     */
    where?: CentreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Centres to fetch.
     */
    orderBy?: CentreOrderByWithRelationInput | CentreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Centres.
     */
    cursor?: CentreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Centres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Centres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Centres.
     */
    distinct?: CentreScalarFieldEnum | CentreScalarFieldEnum[]
  }

  /**
   * Centre findMany
   */
  export type CentreFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Centre
     */
    select?: CentreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreInclude<ExtArgs> | null
    /**
     * Filter, which Centres to fetch.
     */
    where?: CentreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Centres to fetch.
     */
    orderBy?: CentreOrderByWithRelationInput | CentreOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Centres.
     */
    cursor?: CentreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Centres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Centres.
     */
    skip?: number
    distinct?: CentreScalarFieldEnum | CentreScalarFieldEnum[]
  }

  /**
   * Centre create
   */
  export type CentreCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Centre
     */
    select?: CentreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreInclude<ExtArgs> | null
    /**
     * The data needed to create a Centre.
     */
    data: XOR<CentreCreateInput, CentreUncheckedCreateInput>
  }

  /**
   * Centre createMany
   */
  export type CentreCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Centres.
     */
    data: CentreCreateManyInput | CentreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Centre createManyAndReturn
   */
  export type CentreCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Centre
     */
    select?: CentreSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Centres.
     */
    data: CentreCreateManyInput | CentreCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Centre update
   */
  export type CentreUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Centre
     */
    select?: CentreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreInclude<ExtArgs> | null
    /**
     * The data needed to update a Centre.
     */
    data: XOR<CentreUpdateInput, CentreUncheckedUpdateInput>
    /**
     * Choose, which Centre to update.
     */
    where: CentreWhereUniqueInput
  }

  /**
   * Centre updateMany
   */
  export type CentreUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Centres.
     */
    data: XOR<CentreUpdateManyMutationInput, CentreUncheckedUpdateManyInput>
    /**
     * Filter which Centres to update
     */
    where?: CentreWhereInput
  }

  /**
   * Centre upsert
   */
  export type CentreUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Centre
     */
    select?: CentreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreInclude<ExtArgs> | null
    /**
     * The filter to search for the Centre to update in case it exists.
     */
    where: CentreWhereUniqueInput
    /**
     * In case the Centre found by the `where` argument doesn't exist, create a new Centre with this data.
     */
    create: XOR<CentreCreateInput, CentreUncheckedCreateInput>
    /**
     * In case the Centre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CentreUpdateInput, CentreUncheckedUpdateInput>
  }

  /**
   * Centre delete
   */
  export type CentreDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Centre
     */
    select?: CentreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreInclude<ExtArgs> | null
    /**
     * Filter which Centre to delete.
     */
    where: CentreWhereUniqueInput
  }

  /**
   * Centre deleteMany
   */
  export type CentreDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Centres to delete
     */
    where?: CentreWhereInput
  }

  /**
   * Centre.personnels
   */
  export type Centre$personnelsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelInclude<ExtArgs> | null
    where?: PersonnelWhereInput
    orderBy?: PersonnelOrderByWithRelationInput | PersonnelOrderByWithRelationInput[]
    cursor?: PersonnelWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PersonnelScalarFieldEnum | PersonnelScalarFieldEnum[]
  }

  /**
   * Centre.sessions
   */
  export type Centre$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    where?: SessionFMPAWhereInput
    orderBy?: SessionFMPAOrderByWithRelationInput | SessionFMPAOrderByWithRelationInput[]
    cursor?: SessionFMPAWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionFMPAScalarFieldEnum | SessionFMPAScalarFieldEnum[]
  }

  /**
   * Centre without action
   */
  export type CentreDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Centre
     */
    select?: CentreSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CentreInclude<ExtArgs> | null
  }


  /**
   * Model TypeFMPA
   */

  export type AggregateTypeFMPA = {
    _count: TypeFMPACountAggregateOutputType | null
    _avg: TypeFMPAAvgAggregateOutputType | null
    _sum: TypeFMPASumAggregateOutputType | null
    _min: TypeFMPAMinAggregateOutputType | null
    _max: TypeFMPAMaxAggregateOutputType | null
  }

  export type TypeFMPAAvgAggregateOutputType = {
    id: number | null
    dureeHeures: number | null
    tauxHoraire: number | null
  }

  export type TypeFMPASumAggregateOutputType = {
    id: number | null
    dureeHeures: number | null
    tauxHoraire: number | null
  }

  export type TypeFMPAMinAggregateOutputType = {
    id: number | null
    code: string | null
    libelle: string | null
    dureeHeures: number | null
    tauxHoraire: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TypeFMPAMaxAggregateOutputType = {
    id: number | null
    code: string | null
    libelle: string | null
    dureeHeures: number | null
    tauxHoraire: number | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TypeFMPACountAggregateOutputType = {
    id: number
    code: number
    libelle: number
    dureeHeures: number
    tauxHoraire: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TypeFMPAAvgAggregateInputType = {
    id?: true
    dureeHeures?: true
    tauxHoraire?: true
  }

  export type TypeFMPASumAggregateInputType = {
    id?: true
    dureeHeures?: true
    tauxHoraire?: true
  }

  export type TypeFMPAMinAggregateInputType = {
    id?: true
    code?: true
    libelle?: true
    dureeHeures?: true
    tauxHoraire?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TypeFMPAMaxAggregateInputType = {
    id?: true
    code?: true
    libelle?: true
    dureeHeures?: true
    tauxHoraire?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TypeFMPACountAggregateInputType = {
    id?: true
    code?: true
    libelle?: true
    dureeHeures?: true
    tauxHoraire?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TypeFMPAAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TypeFMPA to aggregate.
     */
    where?: TypeFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeFMPAS to fetch.
     */
    orderBy?: TypeFMPAOrderByWithRelationInput | TypeFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TypeFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeFMPAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TypeFMPAS
    **/
    _count?: true | TypeFMPACountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypeFMPAAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypeFMPASumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypeFMPAMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypeFMPAMaxAggregateInputType
  }

  export type GetTypeFMPAAggregateType<T extends TypeFMPAAggregateArgs> = {
        [P in keyof T & keyof AggregateTypeFMPA]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTypeFMPA[P]>
      : GetScalarType<T[P], AggregateTypeFMPA[P]>
  }




  export type TypeFMPAGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TypeFMPAWhereInput
    orderBy?: TypeFMPAOrderByWithAggregationInput | TypeFMPAOrderByWithAggregationInput[]
    by: TypeFMPAScalarFieldEnum[] | TypeFMPAScalarFieldEnum
    having?: TypeFMPAScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypeFMPACountAggregateInputType | true
    _avg?: TypeFMPAAvgAggregateInputType
    _sum?: TypeFMPASumAggregateInputType
    _min?: TypeFMPAMinAggregateInputType
    _max?: TypeFMPAMaxAggregateInputType
  }

  export type TypeFMPAGroupByOutputType = {
    id: number
    code: string
    libelle: string
    dureeHeures: number
    tauxHoraire: number
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: TypeFMPACountAggregateOutputType | null
    _avg: TypeFMPAAvgAggregateOutputType | null
    _sum: TypeFMPASumAggregateOutputType | null
    _min: TypeFMPAMinAggregateOutputType | null
    _max: TypeFMPAMaxAggregateOutputType | null
  }

  type GetTypeFMPAGroupByPayload<T extends TypeFMPAGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TypeFMPAGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypeFMPAGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypeFMPAGroupByOutputType[P]>
            : GetScalarType<T[P], TypeFMPAGroupByOutputType[P]>
        }
      >
    >


  export type TypeFMPASelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    libelle?: boolean
    dureeHeures?: boolean
    tauxHoraire?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    sessions?: boolean | TypeFMPA$sessionsArgs<ExtArgs>
    _count?: boolean | TypeFMPACountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["typeFMPA"]>

  export type TypeFMPASelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    libelle?: boolean
    dureeHeures?: boolean
    tauxHoraire?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["typeFMPA"]>

  export type TypeFMPASelectScalar = {
    id?: boolean
    code?: boolean
    libelle?: boolean
    dureeHeures?: boolean
    tauxHoraire?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TypeFMPAInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sessions?: boolean | TypeFMPA$sessionsArgs<ExtArgs>
    _count?: boolean | TypeFMPACountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TypeFMPAIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TypeFMPAPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TypeFMPA"
    objects: {
      sessions: Prisma.$SessionFMPAPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      libelle: string
      dureeHeures: number
      tauxHoraire: number
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["typeFMPA"]>
    composites: {}
  }

  type TypeFMPAGetPayload<S extends boolean | null | undefined | TypeFMPADefaultArgs> = $Result.GetResult<Prisma.$TypeFMPAPayload, S>

  type TypeFMPACountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TypeFMPAFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TypeFMPACountAggregateInputType | true
    }

  export interface TypeFMPADelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TypeFMPA'], meta: { name: 'TypeFMPA' } }
    /**
     * Find zero or one TypeFMPA that matches the filter.
     * @param {TypeFMPAFindUniqueArgs} args - Arguments to find a TypeFMPA
     * @example
     * // Get one TypeFMPA
     * const typeFMPA = await prisma.typeFMPA.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TypeFMPAFindUniqueArgs>(args: SelectSubset<T, TypeFMPAFindUniqueArgs<ExtArgs>>): Prisma__TypeFMPAClient<$Result.GetResult<Prisma.$TypeFMPAPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TypeFMPA that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TypeFMPAFindUniqueOrThrowArgs} args - Arguments to find a TypeFMPA
     * @example
     * // Get one TypeFMPA
     * const typeFMPA = await prisma.typeFMPA.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TypeFMPAFindUniqueOrThrowArgs>(args: SelectSubset<T, TypeFMPAFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TypeFMPAClient<$Result.GetResult<Prisma.$TypeFMPAPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TypeFMPA that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFMPAFindFirstArgs} args - Arguments to find a TypeFMPA
     * @example
     * // Get one TypeFMPA
     * const typeFMPA = await prisma.typeFMPA.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TypeFMPAFindFirstArgs>(args?: SelectSubset<T, TypeFMPAFindFirstArgs<ExtArgs>>): Prisma__TypeFMPAClient<$Result.GetResult<Prisma.$TypeFMPAPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TypeFMPA that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFMPAFindFirstOrThrowArgs} args - Arguments to find a TypeFMPA
     * @example
     * // Get one TypeFMPA
     * const typeFMPA = await prisma.typeFMPA.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TypeFMPAFindFirstOrThrowArgs>(args?: SelectSubset<T, TypeFMPAFindFirstOrThrowArgs<ExtArgs>>): Prisma__TypeFMPAClient<$Result.GetResult<Prisma.$TypeFMPAPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TypeFMPAS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFMPAFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TypeFMPAS
     * const typeFMPAS = await prisma.typeFMPA.findMany()
     * 
     * // Get first 10 TypeFMPAS
     * const typeFMPAS = await prisma.typeFMPA.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const typeFMPAWithIdOnly = await prisma.typeFMPA.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TypeFMPAFindManyArgs>(args?: SelectSubset<T, TypeFMPAFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TypeFMPAPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TypeFMPA.
     * @param {TypeFMPACreateArgs} args - Arguments to create a TypeFMPA.
     * @example
     * // Create one TypeFMPA
     * const TypeFMPA = await prisma.typeFMPA.create({
     *   data: {
     *     // ... data to create a TypeFMPA
     *   }
     * })
     * 
     */
    create<T extends TypeFMPACreateArgs>(args: SelectSubset<T, TypeFMPACreateArgs<ExtArgs>>): Prisma__TypeFMPAClient<$Result.GetResult<Prisma.$TypeFMPAPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TypeFMPAS.
     * @param {TypeFMPACreateManyArgs} args - Arguments to create many TypeFMPAS.
     * @example
     * // Create many TypeFMPAS
     * const typeFMPA = await prisma.typeFMPA.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TypeFMPACreateManyArgs>(args?: SelectSubset<T, TypeFMPACreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TypeFMPAS and returns the data saved in the database.
     * @param {TypeFMPACreateManyAndReturnArgs} args - Arguments to create many TypeFMPAS.
     * @example
     * // Create many TypeFMPAS
     * const typeFMPA = await prisma.typeFMPA.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TypeFMPAS and only return the `id`
     * const typeFMPAWithIdOnly = await prisma.typeFMPA.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TypeFMPACreateManyAndReturnArgs>(args?: SelectSubset<T, TypeFMPACreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TypeFMPAPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TypeFMPA.
     * @param {TypeFMPADeleteArgs} args - Arguments to delete one TypeFMPA.
     * @example
     * // Delete one TypeFMPA
     * const TypeFMPA = await prisma.typeFMPA.delete({
     *   where: {
     *     // ... filter to delete one TypeFMPA
     *   }
     * })
     * 
     */
    delete<T extends TypeFMPADeleteArgs>(args: SelectSubset<T, TypeFMPADeleteArgs<ExtArgs>>): Prisma__TypeFMPAClient<$Result.GetResult<Prisma.$TypeFMPAPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TypeFMPA.
     * @param {TypeFMPAUpdateArgs} args - Arguments to update one TypeFMPA.
     * @example
     * // Update one TypeFMPA
     * const typeFMPA = await prisma.typeFMPA.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TypeFMPAUpdateArgs>(args: SelectSubset<T, TypeFMPAUpdateArgs<ExtArgs>>): Prisma__TypeFMPAClient<$Result.GetResult<Prisma.$TypeFMPAPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TypeFMPAS.
     * @param {TypeFMPADeleteManyArgs} args - Arguments to filter TypeFMPAS to delete.
     * @example
     * // Delete a few TypeFMPAS
     * const { count } = await prisma.typeFMPA.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TypeFMPADeleteManyArgs>(args?: SelectSubset<T, TypeFMPADeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TypeFMPAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFMPAUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TypeFMPAS
     * const typeFMPA = await prisma.typeFMPA.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TypeFMPAUpdateManyArgs>(args: SelectSubset<T, TypeFMPAUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TypeFMPA.
     * @param {TypeFMPAUpsertArgs} args - Arguments to update or create a TypeFMPA.
     * @example
     * // Update or create a TypeFMPA
     * const typeFMPA = await prisma.typeFMPA.upsert({
     *   create: {
     *     // ... data to create a TypeFMPA
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TypeFMPA we want to update
     *   }
     * })
     */
    upsert<T extends TypeFMPAUpsertArgs>(args: SelectSubset<T, TypeFMPAUpsertArgs<ExtArgs>>): Prisma__TypeFMPAClient<$Result.GetResult<Prisma.$TypeFMPAPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TypeFMPAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFMPACountArgs} args - Arguments to filter TypeFMPAS to count.
     * @example
     * // Count the number of TypeFMPAS
     * const count = await prisma.typeFMPA.count({
     *   where: {
     *     // ... the filter for the TypeFMPAS we want to count
     *   }
     * })
    **/
    count<T extends TypeFMPACountArgs>(
      args?: Subset<T, TypeFMPACountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypeFMPACountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TypeFMPA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFMPAAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypeFMPAAggregateArgs>(args: Subset<T, TypeFMPAAggregateArgs>): Prisma.PrismaPromise<GetTypeFMPAAggregateType<T>>

    /**
     * Group by TypeFMPA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFMPAGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypeFMPAGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypeFMPAGroupByArgs['orderBy'] }
        : { orderBy?: TypeFMPAGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypeFMPAGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeFMPAGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TypeFMPA model
   */
  readonly fields: TypeFMPAFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TypeFMPA.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TypeFMPAClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    sessions<T extends TypeFMPA$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, TypeFMPA$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TypeFMPA model
   */ 
  interface TypeFMPAFieldRefs {
    readonly id: FieldRef<"TypeFMPA", 'Int'>
    readonly code: FieldRef<"TypeFMPA", 'String'>
    readonly libelle: FieldRef<"TypeFMPA", 'String'>
    readonly dureeHeures: FieldRef<"TypeFMPA", 'Float'>
    readonly tauxHoraire: FieldRef<"TypeFMPA", 'Float'>
    readonly description: FieldRef<"TypeFMPA", 'String'>
    readonly createdAt: FieldRef<"TypeFMPA", 'DateTime'>
    readonly updatedAt: FieldRef<"TypeFMPA", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TypeFMPA findUnique
   */
  export type TypeFMPAFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeFMPA
     */
    select?: TypeFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeFMPAInclude<ExtArgs> | null
    /**
     * Filter, which TypeFMPA to fetch.
     */
    where: TypeFMPAWhereUniqueInput
  }

  /**
   * TypeFMPA findUniqueOrThrow
   */
  export type TypeFMPAFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeFMPA
     */
    select?: TypeFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeFMPAInclude<ExtArgs> | null
    /**
     * Filter, which TypeFMPA to fetch.
     */
    where: TypeFMPAWhereUniqueInput
  }

  /**
   * TypeFMPA findFirst
   */
  export type TypeFMPAFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeFMPA
     */
    select?: TypeFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeFMPAInclude<ExtArgs> | null
    /**
     * Filter, which TypeFMPA to fetch.
     */
    where?: TypeFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeFMPAS to fetch.
     */
    orderBy?: TypeFMPAOrderByWithRelationInput | TypeFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TypeFMPAS.
     */
    cursor?: TypeFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeFMPAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TypeFMPAS.
     */
    distinct?: TypeFMPAScalarFieldEnum | TypeFMPAScalarFieldEnum[]
  }

  /**
   * TypeFMPA findFirstOrThrow
   */
  export type TypeFMPAFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeFMPA
     */
    select?: TypeFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeFMPAInclude<ExtArgs> | null
    /**
     * Filter, which TypeFMPA to fetch.
     */
    where?: TypeFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeFMPAS to fetch.
     */
    orderBy?: TypeFMPAOrderByWithRelationInput | TypeFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TypeFMPAS.
     */
    cursor?: TypeFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeFMPAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TypeFMPAS.
     */
    distinct?: TypeFMPAScalarFieldEnum | TypeFMPAScalarFieldEnum[]
  }

  /**
   * TypeFMPA findMany
   */
  export type TypeFMPAFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeFMPA
     */
    select?: TypeFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeFMPAInclude<ExtArgs> | null
    /**
     * Filter, which TypeFMPAS to fetch.
     */
    where?: TypeFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TypeFMPAS to fetch.
     */
    orderBy?: TypeFMPAOrderByWithRelationInput | TypeFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TypeFMPAS.
     */
    cursor?: TypeFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TypeFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TypeFMPAS.
     */
    skip?: number
    distinct?: TypeFMPAScalarFieldEnum | TypeFMPAScalarFieldEnum[]
  }

  /**
   * TypeFMPA create
   */
  export type TypeFMPACreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeFMPA
     */
    select?: TypeFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeFMPAInclude<ExtArgs> | null
    /**
     * The data needed to create a TypeFMPA.
     */
    data: XOR<TypeFMPACreateInput, TypeFMPAUncheckedCreateInput>
  }

  /**
   * TypeFMPA createMany
   */
  export type TypeFMPACreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TypeFMPAS.
     */
    data: TypeFMPACreateManyInput | TypeFMPACreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TypeFMPA createManyAndReturn
   */
  export type TypeFMPACreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeFMPA
     */
    select?: TypeFMPASelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TypeFMPAS.
     */
    data: TypeFMPACreateManyInput | TypeFMPACreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TypeFMPA update
   */
  export type TypeFMPAUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeFMPA
     */
    select?: TypeFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeFMPAInclude<ExtArgs> | null
    /**
     * The data needed to update a TypeFMPA.
     */
    data: XOR<TypeFMPAUpdateInput, TypeFMPAUncheckedUpdateInput>
    /**
     * Choose, which TypeFMPA to update.
     */
    where: TypeFMPAWhereUniqueInput
  }

  /**
   * TypeFMPA updateMany
   */
  export type TypeFMPAUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TypeFMPAS.
     */
    data: XOR<TypeFMPAUpdateManyMutationInput, TypeFMPAUncheckedUpdateManyInput>
    /**
     * Filter which TypeFMPAS to update
     */
    where?: TypeFMPAWhereInput
  }

  /**
   * TypeFMPA upsert
   */
  export type TypeFMPAUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeFMPA
     */
    select?: TypeFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeFMPAInclude<ExtArgs> | null
    /**
     * The filter to search for the TypeFMPA to update in case it exists.
     */
    where: TypeFMPAWhereUniqueInput
    /**
     * In case the TypeFMPA found by the `where` argument doesn't exist, create a new TypeFMPA with this data.
     */
    create: XOR<TypeFMPACreateInput, TypeFMPAUncheckedCreateInput>
    /**
     * In case the TypeFMPA was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TypeFMPAUpdateInput, TypeFMPAUncheckedUpdateInput>
  }

  /**
   * TypeFMPA delete
   */
  export type TypeFMPADeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeFMPA
     */
    select?: TypeFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeFMPAInclude<ExtArgs> | null
    /**
     * Filter which TypeFMPA to delete.
     */
    where: TypeFMPAWhereUniqueInput
  }

  /**
   * TypeFMPA deleteMany
   */
  export type TypeFMPADeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TypeFMPAS to delete
     */
    where?: TypeFMPAWhereInput
  }

  /**
   * TypeFMPA.sessions
   */
  export type TypeFMPA$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    where?: SessionFMPAWhereInput
    orderBy?: SessionFMPAOrderByWithRelationInput | SessionFMPAOrderByWithRelationInput[]
    cursor?: SessionFMPAWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionFMPAScalarFieldEnum | SessionFMPAScalarFieldEnum[]
  }

  /**
   * TypeFMPA without action
   */
  export type TypeFMPADefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeFMPA
     */
    select?: TypeFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TypeFMPAInclude<ExtArgs> | null
  }


  /**
   * Model SessionFMPA
   */

  export type AggregateSessionFMPA = {
    _count: SessionFMPACountAggregateOutputType | null
    _avg: SessionFMPAAvgAggregateOutputType | null
    _sum: SessionFMPASumAggregateOutputType | null
    _min: SessionFMPAMinAggregateOutputType | null
    _max: SessionFMPAMaxAggregateOutputType | null
  }

  export type SessionFMPAAvgAggregateOutputType = {
    id: number | null
    typeFMPAId: number | null
    placesMax: number | null
    placesOccupees: number | null
    formateurPrincipalId: number | null
    centreId: number | null
    tauxHoraire: number | null
  }

  export type SessionFMPASumAggregateOutputType = {
    id: number | null
    typeFMPAId: number | null
    placesMax: number | null
    placesOccupees: number | null
    formateurPrincipalId: number | null
    centreId: number | null
    tauxHoraire: number | null
  }

  export type SessionFMPAMinAggregateOutputType = {
    id: number | null
    typeFMPAId: number | null
    dateDebut: Date | null
    dateFin: Date | null
    lieu: string | null
    placesMax: number | null
    placesOccupees: number | null
    formateurPrincipalId: number | null
    centreId: number | null
    statut: $Enums.StatutSession | null
    codeTTA: string | null
    tauxHoraire: number | null
    observations: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionFMPAMaxAggregateOutputType = {
    id: number | null
    typeFMPAId: number | null
    dateDebut: Date | null
    dateFin: Date | null
    lieu: string | null
    placesMax: number | null
    placesOccupees: number | null
    formateurPrincipalId: number | null
    centreId: number | null
    statut: $Enums.StatutSession | null
    codeTTA: string | null
    tauxHoraire: number | null
    observations: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type SessionFMPACountAggregateOutputType = {
    id: number
    typeFMPAId: number
    dateDebut: number
    dateFin: number
    lieu: number
    placesMax: number
    placesOccupees: number
    formateurPrincipalId: number
    centreId: number
    statut: number
    codeTTA: number
    tauxHoraire: number
    observations: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type SessionFMPAAvgAggregateInputType = {
    id?: true
    typeFMPAId?: true
    placesMax?: true
    placesOccupees?: true
    formateurPrincipalId?: true
    centreId?: true
    tauxHoraire?: true
  }

  export type SessionFMPASumAggregateInputType = {
    id?: true
    typeFMPAId?: true
    placesMax?: true
    placesOccupees?: true
    formateurPrincipalId?: true
    centreId?: true
    tauxHoraire?: true
  }

  export type SessionFMPAMinAggregateInputType = {
    id?: true
    typeFMPAId?: true
    dateDebut?: true
    dateFin?: true
    lieu?: true
    placesMax?: true
    placesOccupees?: true
    formateurPrincipalId?: true
    centreId?: true
    statut?: true
    codeTTA?: true
    tauxHoraire?: true
    observations?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionFMPAMaxAggregateInputType = {
    id?: true
    typeFMPAId?: true
    dateDebut?: true
    dateFin?: true
    lieu?: true
    placesMax?: true
    placesOccupees?: true
    formateurPrincipalId?: true
    centreId?: true
    statut?: true
    codeTTA?: true
    tauxHoraire?: true
    observations?: true
    createdAt?: true
    updatedAt?: true
  }

  export type SessionFMPACountAggregateInputType = {
    id?: true
    typeFMPAId?: true
    dateDebut?: true
    dateFin?: true
    lieu?: true
    placesMax?: true
    placesOccupees?: true
    formateurPrincipalId?: true
    centreId?: true
    statut?: true
    codeTTA?: true
    tauxHoraire?: true
    observations?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type SessionFMPAAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionFMPA to aggregate.
     */
    where?: SessionFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionFMPAS to fetch.
     */
    orderBy?: SessionFMPAOrderByWithRelationInput | SessionFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionFMPAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SessionFMPAS
    **/
    _count?: true | SessionFMPACountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SessionFMPAAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SessionFMPASumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionFMPAMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionFMPAMaxAggregateInputType
  }

  export type GetSessionFMPAAggregateType<T extends SessionFMPAAggregateArgs> = {
        [P in keyof T & keyof AggregateSessionFMPA]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSessionFMPA[P]>
      : GetScalarType<T[P], AggregateSessionFMPA[P]>
  }




  export type SessionFMPAGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionFMPAWhereInput
    orderBy?: SessionFMPAOrderByWithAggregationInput | SessionFMPAOrderByWithAggregationInput[]
    by: SessionFMPAScalarFieldEnum[] | SessionFMPAScalarFieldEnum
    having?: SessionFMPAScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionFMPACountAggregateInputType | true
    _avg?: SessionFMPAAvgAggregateInputType
    _sum?: SessionFMPASumAggregateInputType
    _min?: SessionFMPAMinAggregateInputType
    _max?: SessionFMPAMaxAggregateInputType
  }

  export type SessionFMPAGroupByOutputType = {
    id: number
    typeFMPAId: number
    dateDebut: Date
    dateFin: Date
    lieu: string
    placesMax: number
    placesOccupees: number
    formateurPrincipalId: number
    centreId: number
    statut: $Enums.StatutSession
    codeTTA: string
    tauxHoraire: number
    observations: string | null
    createdAt: Date
    updatedAt: Date
    _count: SessionFMPACountAggregateOutputType | null
    _avg: SessionFMPAAvgAggregateOutputType | null
    _sum: SessionFMPASumAggregateOutputType | null
    _min: SessionFMPAMinAggregateOutputType | null
    _max: SessionFMPAMaxAggregateOutputType | null
  }

  type GetSessionFMPAGroupByPayload<T extends SessionFMPAGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionFMPAGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionFMPAGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionFMPAGroupByOutputType[P]>
            : GetScalarType<T[P], SessionFMPAGroupByOutputType[P]>
        }
      >
    >


  export type SessionFMPASelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    typeFMPAId?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    lieu?: boolean
    placesMax?: boolean
    placesOccupees?: boolean
    formateurPrincipalId?: boolean
    centreId?: boolean
    statut?: boolean
    codeTTA?: boolean
    tauxHoraire?: boolean
    observations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    typeFMPA?: boolean | TypeFMPADefaultArgs<ExtArgs>
    formateurPrincipal?: boolean | PersonnelDefaultArgs<ExtArgs>
    centre?: boolean | CentreDefaultArgs<ExtArgs>
    inscriptions?: boolean | SessionFMPA$inscriptionsArgs<ExtArgs>
    signatures?: boolean | SessionFMPA$signaturesArgs<ExtArgs>
    exportsTTA?: boolean | SessionFMPA$exportsTTAArgs<ExtArgs>
    _count?: boolean | SessionFMPACountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionFMPA"]>

  export type SessionFMPASelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    typeFMPAId?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    lieu?: boolean
    placesMax?: boolean
    placesOccupees?: boolean
    formateurPrincipalId?: boolean
    centreId?: boolean
    statut?: boolean
    codeTTA?: boolean
    tauxHoraire?: boolean
    observations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    typeFMPA?: boolean | TypeFMPADefaultArgs<ExtArgs>
    formateurPrincipal?: boolean | PersonnelDefaultArgs<ExtArgs>
    centre?: boolean | CentreDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["sessionFMPA"]>

  export type SessionFMPASelectScalar = {
    id?: boolean
    typeFMPAId?: boolean
    dateDebut?: boolean
    dateFin?: boolean
    lieu?: boolean
    placesMax?: boolean
    placesOccupees?: boolean
    formateurPrincipalId?: boolean
    centreId?: boolean
    statut?: boolean
    codeTTA?: boolean
    tauxHoraire?: boolean
    observations?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type SessionFMPAInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    typeFMPA?: boolean | TypeFMPADefaultArgs<ExtArgs>
    formateurPrincipal?: boolean | PersonnelDefaultArgs<ExtArgs>
    centre?: boolean | CentreDefaultArgs<ExtArgs>
    inscriptions?: boolean | SessionFMPA$inscriptionsArgs<ExtArgs>
    signatures?: boolean | SessionFMPA$signaturesArgs<ExtArgs>
    exportsTTA?: boolean | SessionFMPA$exportsTTAArgs<ExtArgs>
    _count?: boolean | SessionFMPACountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SessionFMPAIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    typeFMPA?: boolean | TypeFMPADefaultArgs<ExtArgs>
    formateurPrincipal?: boolean | PersonnelDefaultArgs<ExtArgs>
    centre?: boolean | CentreDefaultArgs<ExtArgs>
  }

  export type $SessionFMPAPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SessionFMPA"
    objects: {
      typeFMPA: Prisma.$TypeFMPAPayload<ExtArgs>
      formateurPrincipal: Prisma.$PersonnelPayload<ExtArgs>
      centre: Prisma.$CentrePayload<ExtArgs>
      inscriptions: Prisma.$InscriptionFMPAPayload<ExtArgs>[]
      signatures: Prisma.$SignatureFMPAPayload<ExtArgs>[]
      exportsTTA: Prisma.$ExportTTAPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      typeFMPAId: number
      dateDebut: Date
      dateFin: Date
      lieu: string
      placesMax: number
      placesOccupees: number
      formateurPrincipalId: number
      centreId: number
      statut: $Enums.StatutSession
      codeTTA: string
      tauxHoraire: number
      observations: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["sessionFMPA"]>
    composites: {}
  }

  type SessionFMPAGetPayload<S extends boolean | null | undefined | SessionFMPADefaultArgs> = $Result.GetResult<Prisma.$SessionFMPAPayload, S>

  type SessionFMPACountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFMPAFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionFMPACountAggregateInputType | true
    }

  export interface SessionFMPADelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SessionFMPA'], meta: { name: 'SessionFMPA' } }
    /**
     * Find zero or one SessionFMPA that matches the filter.
     * @param {SessionFMPAFindUniqueArgs} args - Arguments to find a SessionFMPA
     * @example
     * // Get one SessionFMPA
     * const sessionFMPA = await prisma.sessionFMPA.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFMPAFindUniqueArgs>(args: SelectSubset<T, SessionFMPAFindUniqueArgs<ExtArgs>>): Prisma__SessionFMPAClient<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SessionFMPA that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SessionFMPAFindUniqueOrThrowArgs} args - Arguments to find a SessionFMPA
     * @example
     * // Get one SessionFMPA
     * const sessionFMPA = await prisma.sessionFMPA.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFMPAFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFMPAFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionFMPAClient<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SessionFMPA that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFMPAFindFirstArgs} args - Arguments to find a SessionFMPA
     * @example
     * // Get one SessionFMPA
     * const sessionFMPA = await prisma.sessionFMPA.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFMPAFindFirstArgs>(args?: SelectSubset<T, SessionFMPAFindFirstArgs<ExtArgs>>): Prisma__SessionFMPAClient<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SessionFMPA that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFMPAFindFirstOrThrowArgs} args - Arguments to find a SessionFMPA
     * @example
     * // Get one SessionFMPA
     * const sessionFMPA = await prisma.sessionFMPA.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFMPAFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFMPAFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionFMPAClient<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SessionFMPAS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFMPAFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SessionFMPAS
     * const sessionFMPAS = await prisma.sessionFMPA.findMany()
     * 
     * // Get first 10 SessionFMPAS
     * const sessionFMPAS = await prisma.sessionFMPA.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionFMPAWithIdOnly = await prisma.sessionFMPA.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SessionFMPAFindManyArgs>(args?: SelectSubset<T, SessionFMPAFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SessionFMPA.
     * @param {SessionFMPACreateArgs} args - Arguments to create a SessionFMPA.
     * @example
     * // Create one SessionFMPA
     * const SessionFMPA = await prisma.sessionFMPA.create({
     *   data: {
     *     // ... data to create a SessionFMPA
     *   }
     * })
     * 
     */
    create<T extends SessionFMPACreateArgs>(args: SelectSubset<T, SessionFMPACreateArgs<ExtArgs>>): Prisma__SessionFMPAClient<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SessionFMPAS.
     * @param {SessionFMPACreateManyArgs} args - Arguments to create many SessionFMPAS.
     * @example
     * // Create many SessionFMPAS
     * const sessionFMPA = await prisma.sessionFMPA.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionFMPACreateManyArgs>(args?: SelectSubset<T, SessionFMPACreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SessionFMPAS and returns the data saved in the database.
     * @param {SessionFMPACreateManyAndReturnArgs} args - Arguments to create many SessionFMPAS.
     * @example
     * // Create many SessionFMPAS
     * const sessionFMPA = await prisma.sessionFMPA.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SessionFMPAS and only return the `id`
     * const sessionFMPAWithIdOnly = await prisma.sessionFMPA.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionFMPACreateManyAndReturnArgs>(args?: SelectSubset<T, SessionFMPACreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SessionFMPA.
     * @param {SessionFMPADeleteArgs} args - Arguments to delete one SessionFMPA.
     * @example
     * // Delete one SessionFMPA
     * const SessionFMPA = await prisma.sessionFMPA.delete({
     *   where: {
     *     // ... filter to delete one SessionFMPA
     *   }
     * })
     * 
     */
    delete<T extends SessionFMPADeleteArgs>(args: SelectSubset<T, SessionFMPADeleteArgs<ExtArgs>>): Prisma__SessionFMPAClient<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SessionFMPA.
     * @param {SessionFMPAUpdateArgs} args - Arguments to update one SessionFMPA.
     * @example
     * // Update one SessionFMPA
     * const sessionFMPA = await prisma.sessionFMPA.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionFMPAUpdateArgs>(args: SelectSubset<T, SessionFMPAUpdateArgs<ExtArgs>>): Prisma__SessionFMPAClient<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SessionFMPAS.
     * @param {SessionFMPADeleteManyArgs} args - Arguments to filter SessionFMPAS to delete.
     * @example
     * // Delete a few SessionFMPAS
     * const { count } = await prisma.sessionFMPA.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionFMPADeleteManyArgs>(args?: SelectSubset<T, SessionFMPADeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SessionFMPAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFMPAUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SessionFMPAS
     * const sessionFMPA = await prisma.sessionFMPA.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionFMPAUpdateManyArgs>(args: SelectSubset<T, SessionFMPAUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SessionFMPA.
     * @param {SessionFMPAUpsertArgs} args - Arguments to update or create a SessionFMPA.
     * @example
     * // Update or create a SessionFMPA
     * const sessionFMPA = await prisma.sessionFMPA.upsert({
     *   create: {
     *     // ... data to create a SessionFMPA
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SessionFMPA we want to update
     *   }
     * })
     */
    upsert<T extends SessionFMPAUpsertArgs>(args: SelectSubset<T, SessionFMPAUpsertArgs<ExtArgs>>): Prisma__SessionFMPAClient<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SessionFMPAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFMPACountArgs} args - Arguments to filter SessionFMPAS to count.
     * @example
     * // Count the number of SessionFMPAS
     * const count = await prisma.sessionFMPA.count({
     *   where: {
     *     // ... the filter for the SessionFMPAS we want to count
     *   }
     * })
    **/
    count<T extends SessionFMPACountArgs>(
      args?: Subset<T, SessionFMPACountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionFMPACountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SessionFMPA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFMPAAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionFMPAAggregateArgs>(args: Subset<T, SessionFMPAAggregateArgs>): Prisma.PrismaPromise<GetSessionFMPAAggregateType<T>>

    /**
     * Group by SessionFMPA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFMPAGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionFMPAGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionFMPAGroupByArgs['orderBy'] }
        : { orderBy?: SessionFMPAGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionFMPAGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionFMPAGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SessionFMPA model
   */
  readonly fields: SessionFMPAFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SessionFMPA.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionFMPAClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    typeFMPA<T extends TypeFMPADefaultArgs<ExtArgs> = {}>(args?: Subset<T, TypeFMPADefaultArgs<ExtArgs>>): Prisma__TypeFMPAClient<$Result.GetResult<Prisma.$TypeFMPAPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    formateurPrincipal<T extends PersonnelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonnelDefaultArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    centre<T extends CentreDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CentreDefaultArgs<ExtArgs>>): Prisma__CentreClient<$Result.GetResult<Prisma.$CentrePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    inscriptions<T extends SessionFMPA$inscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, SessionFMPA$inscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscriptionFMPAPayload<ExtArgs>, T, "findMany"> | Null>
    signatures<T extends SessionFMPA$signaturesArgs<ExtArgs> = {}>(args?: Subset<T, SessionFMPA$signaturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignatureFMPAPayload<ExtArgs>, T, "findMany"> | Null>
    exportsTTA<T extends SessionFMPA$exportsTTAArgs<ExtArgs> = {}>(args?: Subset<T, SessionFMPA$exportsTTAArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExportTTAPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SessionFMPA model
   */ 
  interface SessionFMPAFieldRefs {
    readonly id: FieldRef<"SessionFMPA", 'Int'>
    readonly typeFMPAId: FieldRef<"SessionFMPA", 'Int'>
    readonly dateDebut: FieldRef<"SessionFMPA", 'DateTime'>
    readonly dateFin: FieldRef<"SessionFMPA", 'DateTime'>
    readonly lieu: FieldRef<"SessionFMPA", 'String'>
    readonly placesMax: FieldRef<"SessionFMPA", 'Int'>
    readonly placesOccupees: FieldRef<"SessionFMPA", 'Int'>
    readonly formateurPrincipalId: FieldRef<"SessionFMPA", 'Int'>
    readonly centreId: FieldRef<"SessionFMPA", 'Int'>
    readonly statut: FieldRef<"SessionFMPA", 'StatutSession'>
    readonly codeTTA: FieldRef<"SessionFMPA", 'String'>
    readonly tauxHoraire: FieldRef<"SessionFMPA", 'Float'>
    readonly observations: FieldRef<"SessionFMPA", 'String'>
    readonly createdAt: FieldRef<"SessionFMPA", 'DateTime'>
    readonly updatedAt: FieldRef<"SessionFMPA", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SessionFMPA findUnique
   */
  export type SessionFMPAFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    /**
     * Filter, which SessionFMPA to fetch.
     */
    where: SessionFMPAWhereUniqueInput
  }

  /**
   * SessionFMPA findUniqueOrThrow
   */
  export type SessionFMPAFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    /**
     * Filter, which SessionFMPA to fetch.
     */
    where: SessionFMPAWhereUniqueInput
  }

  /**
   * SessionFMPA findFirst
   */
  export type SessionFMPAFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    /**
     * Filter, which SessionFMPA to fetch.
     */
    where?: SessionFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionFMPAS to fetch.
     */
    orderBy?: SessionFMPAOrderByWithRelationInput | SessionFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionFMPAS.
     */
    cursor?: SessionFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionFMPAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionFMPAS.
     */
    distinct?: SessionFMPAScalarFieldEnum | SessionFMPAScalarFieldEnum[]
  }

  /**
   * SessionFMPA findFirstOrThrow
   */
  export type SessionFMPAFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    /**
     * Filter, which SessionFMPA to fetch.
     */
    where?: SessionFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionFMPAS to fetch.
     */
    orderBy?: SessionFMPAOrderByWithRelationInput | SessionFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SessionFMPAS.
     */
    cursor?: SessionFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionFMPAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SessionFMPAS.
     */
    distinct?: SessionFMPAScalarFieldEnum | SessionFMPAScalarFieldEnum[]
  }

  /**
   * SessionFMPA findMany
   */
  export type SessionFMPAFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    /**
     * Filter, which SessionFMPAS to fetch.
     */
    where?: SessionFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SessionFMPAS to fetch.
     */
    orderBy?: SessionFMPAOrderByWithRelationInput | SessionFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SessionFMPAS.
     */
    cursor?: SessionFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SessionFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SessionFMPAS.
     */
    skip?: number
    distinct?: SessionFMPAScalarFieldEnum | SessionFMPAScalarFieldEnum[]
  }

  /**
   * SessionFMPA create
   */
  export type SessionFMPACreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    /**
     * The data needed to create a SessionFMPA.
     */
    data: XOR<SessionFMPACreateInput, SessionFMPAUncheckedCreateInput>
  }

  /**
   * SessionFMPA createMany
   */
  export type SessionFMPACreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SessionFMPAS.
     */
    data: SessionFMPACreateManyInput | SessionFMPACreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SessionFMPA createManyAndReturn
   */
  export type SessionFMPACreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SessionFMPAS.
     */
    data: SessionFMPACreateManyInput | SessionFMPACreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SessionFMPA update
   */
  export type SessionFMPAUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    /**
     * The data needed to update a SessionFMPA.
     */
    data: XOR<SessionFMPAUpdateInput, SessionFMPAUncheckedUpdateInput>
    /**
     * Choose, which SessionFMPA to update.
     */
    where: SessionFMPAWhereUniqueInput
  }

  /**
   * SessionFMPA updateMany
   */
  export type SessionFMPAUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SessionFMPAS.
     */
    data: XOR<SessionFMPAUpdateManyMutationInput, SessionFMPAUncheckedUpdateManyInput>
    /**
     * Filter which SessionFMPAS to update
     */
    where?: SessionFMPAWhereInput
  }

  /**
   * SessionFMPA upsert
   */
  export type SessionFMPAUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    /**
     * The filter to search for the SessionFMPA to update in case it exists.
     */
    where: SessionFMPAWhereUniqueInput
    /**
     * In case the SessionFMPA found by the `where` argument doesn't exist, create a new SessionFMPA with this data.
     */
    create: XOR<SessionFMPACreateInput, SessionFMPAUncheckedCreateInput>
    /**
     * In case the SessionFMPA was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionFMPAUpdateInput, SessionFMPAUncheckedUpdateInput>
  }

  /**
   * SessionFMPA delete
   */
  export type SessionFMPADeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    /**
     * Filter which SessionFMPA to delete.
     */
    where: SessionFMPAWhereUniqueInput
  }

  /**
   * SessionFMPA deleteMany
   */
  export type SessionFMPADeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SessionFMPAS to delete
     */
    where?: SessionFMPAWhereInput
  }

  /**
   * SessionFMPA.inscriptions
   */
  export type SessionFMPA$inscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAInclude<ExtArgs> | null
    where?: InscriptionFMPAWhereInput
    orderBy?: InscriptionFMPAOrderByWithRelationInput | InscriptionFMPAOrderByWithRelationInput[]
    cursor?: InscriptionFMPAWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InscriptionFMPAScalarFieldEnum | InscriptionFMPAScalarFieldEnum[]
  }

  /**
   * SessionFMPA.signatures
   */
  export type SessionFMPA$signaturesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAInclude<ExtArgs> | null
    where?: SignatureFMPAWhereInput
    orderBy?: SignatureFMPAOrderByWithRelationInput | SignatureFMPAOrderByWithRelationInput[]
    cursor?: SignatureFMPAWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SignatureFMPAScalarFieldEnum | SignatureFMPAScalarFieldEnum[]
  }

  /**
   * SessionFMPA.exportsTTA
   */
  export type SessionFMPA$exportsTTAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportTTA
     */
    select?: ExportTTASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportTTAInclude<ExtArgs> | null
    where?: ExportTTAWhereInput
    orderBy?: ExportTTAOrderByWithRelationInput | ExportTTAOrderByWithRelationInput[]
    cursor?: ExportTTAWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExportTTAScalarFieldEnum | ExportTTAScalarFieldEnum[]
  }

  /**
   * SessionFMPA without action
   */
  export type SessionFMPADefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
  }


  /**
   * Model InscriptionFMPA
   */

  export type AggregateInscriptionFMPA = {
    _count: InscriptionFMPACountAggregateOutputType | null
    _avg: InscriptionFMPAAvgAggregateOutputType | null
    _sum: InscriptionFMPASumAggregateOutputType | null
    _min: InscriptionFMPAMinAggregateOutputType | null
    _max: InscriptionFMPAMaxAggregateOutputType | null
  }

  export type InscriptionFMPAAvgAggregateOutputType = {
    id: number | null
    sessionId: number | null
    personnelId: number | null
    heuresValidees: number | null
    montantTTA: number | null
  }

  export type InscriptionFMPASumAggregateOutputType = {
    id: number | null
    sessionId: number | null
    personnelId: number | null
    heuresValidees: number | null
    montantTTA: number | null
  }

  export type InscriptionFMPAMinAggregateOutputType = {
    id: number | null
    sessionId: number | null
    personnelId: number | null
    statut: $Enums.StatutInscription | null
    present: boolean | null
    signatureElectronique: string | null
    dateSignature: Date | null
    heuresValidees: number | null
    montantTTA: number | null
    dateInscription: Date | null
    dateModification: Date | null
  }

  export type InscriptionFMPAMaxAggregateOutputType = {
    id: number | null
    sessionId: number | null
    personnelId: number | null
    statut: $Enums.StatutInscription | null
    present: boolean | null
    signatureElectronique: string | null
    dateSignature: Date | null
    heuresValidees: number | null
    montantTTA: number | null
    dateInscription: Date | null
    dateModification: Date | null
  }

  export type InscriptionFMPACountAggregateOutputType = {
    id: number
    sessionId: number
    personnelId: number
    statut: number
    present: number
    signatureElectronique: number
    dateSignature: number
    heuresValidees: number
    montantTTA: number
    dateInscription: number
    dateModification: number
    _all: number
  }


  export type InscriptionFMPAAvgAggregateInputType = {
    id?: true
    sessionId?: true
    personnelId?: true
    heuresValidees?: true
    montantTTA?: true
  }

  export type InscriptionFMPASumAggregateInputType = {
    id?: true
    sessionId?: true
    personnelId?: true
    heuresValidees?: true
    montantTTA?: true
  }

  export type InscriptionFMPAMinAggregateInputType = {
    id?: true
    sessionId?: true
    personnelId?: true
    statut?: true
    present?: true
    signatureElectronique?: true
    dateSignature?: true
    heuresValidees?: true
    montantTTA?: true
    dateInscription?: true
    dateModification?: true
  }

  export type InscriptionFMPAMaxAggregateInputType = {
    id?: true
    sessionId?: true
    personnelId?: true
    statut?: true
    present?: true
    signatureElectronique?: true
    dateSignature?: true
    heuresValidees?: true
    montantTTA?: true
    dateInscription?: true
    dateModification?: true
  }

  export type InscriptionFMPACountAggregateInputType = {
    id?: true
    sessionId?: true
    personnelId?: true
    statut?: true
    present?: true
    signatureElectronique?: true
    dateSignature?: true
    heuresValidees?: true
    montantTTA?: true
    dateInscription?: true
    dateModification?: true
    _all?: true
  }

  export type InscriptionFMPAAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InscriptionFMPA to aggregate.
     */
    where?: InscriptionFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InscriptionFMPAS to fetch.
     */
    orderBy?: InscriptionFMPAOrderByWithRelationInput | InscriptionFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InscriptionFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InscriptionFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InscriptionFMPAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InscriptionFMPAS
    **/
    _count?: true | InscriptionFMPACountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InscriptionFMPAAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InscriptionFMPASumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InscriptionFMPAMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InscriptionFMPAMaxAggregateInputType
  }

  export type GetInscriptionFMPAAggregateType<T extends InscriptionFMPAAggregateArgs> = {
        [P in keyof T & keyof AggregateInscriptionFMPA]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInscriptionFMPA[P]>
      : GetScalarType<T[P], AggregateInscriptionFMPA[P]>
  }




  export type InscriptionFMPAGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InscriptionFMPAWhereInput
    orderBy?: InscriptionFMPAOrderByWithAggregationInput | InscriptionFMPAOrderByWithAggregationInput[]
    by: InscriptionFMPAScalarFieldEnum[] | InscriptionFMPAScalarFieldEnum
    having?: InscriptionFMPAScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InscriptionFMPACountAggregateInputType | true
    _avg?: InscriptionFMPAAvgAggregateInputType
    _sum?: InscriptionFMPASumAggregateInputType
    _min?: InscriptionFMPAMinAggregateInputType
    _max?: InscriptionFMPAMaxAggregateInputType
  }

  export type InscriptionFMPAGroupByOutputType = {
    id: number
    sessionId: number
    personnelId: number
    statut: $Enums.StatutInscription
    present: boolean
    signatureElectronique: string | null
    dateSignature: Date | null
    heuresValidees: number | null
    montantTTA: number | null
    dateInscription: Date
    dateModification: Date
    _count: InscriptionFMPACountAggregateOutputType | null
    _avg: InscriptionFMPAAvgAggregateOutputType | null
    _sum: InscriptionFMPASumAggregateOutputType | null
    _min: InscriptionFMPAMinAggregateOutputType | null
    _max: InscriptionFMPAMaxAggregateOutputType | null
  }

  type GetInscriptionFMPAGroupByPayload<T extends InscriptionFMPAGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InscriptionFMPAGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InscriptionFMPAGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InscriptionFMPAGroupByOutputType[P]>
            : GetScalarType<T[P], InscriptionFMPAGroupByOutputType[P]>
        }
      >
    >


  export type InscriptionFMPASelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    personnelId?: boolean
    statut?: boolean
    present?: boolean
    signatureElectronique?: boolean
    dateSignature?: boolean
    heuresValidees?: boolean
    montantTTA?: boolean
    dateInscription?: boolean
    dateModification?: boolean
    session?: boolean | SessionFMPADefaultArgs<ExtArgs>
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inscriptionFMPA"]>

  export type InscriptionFMPASelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionId?: boolean
    personnelId?: boolean
    statut?: boolean
    present?: boolean
    signatureElectronique?: boolean
    dateSignature?: boolean
    heuresValidees?: boolean
    montantTTA?: boolean
    dateInscription?: boolean
    dateModification?: boolean
    session?: boolean | SessionFMPADefaultArgs<ExtArgs>
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["inscriptionFMPA"]>

  export type InscriptionFMPASelectScalar = {
    id?: boolean
    sessionId?: boolean
    personnelId?: boolean
    statut?: boolean
    present?: boolean
    signatureElectronique?: boolean
    dateSignature?: boolean
    heuresValidees?: boolean
    montantTTA?: boolean
    dateInscription?: boolean
    dateModification?: boolean
  }

  export type InscriptionFMPAInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionFMPADefaultArgs<ExtArgs>
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }
  export type InscriptionFMPAIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionFMPADefaultArgs<ExtArgs>
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }

  export type $InscriptionFMPAPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InscriptionFMPA"
    objects: {
      session: Prisma.$SessionFMPAPayload<ExtArgs>
      personnel: Prisma.$PersonnelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      sessionId: number
      personnelId: number
      statut: $Enums.StatutInscription
      present: boolean
      signatureElectronique: string | null
      dateSignature: Date | null
      heuresValidees: number | null
      montantTTA: number | null
      dateInscription: Date
      dateModification: Date
    }, ExtArgs["result"]["inscriptionFMPA"]>
    composites: {}
  }

  type InscriptionFMPAGetPayload<S extends boolean | null | undefined | InscriptionFMPADefaultArgs> = $Result.GetResult<Prisma.$InscriptionFMPAPayload, S>

  type InscriptionFMPACountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<InscriptionFMPAFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: InscriptionFMPACountAggregateInputType | true
    }

  export interface InscriptionFMPADelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InscriptionFMPA'], meta: { name: 'InscriptionFMPA' } }
    /**
     * Find zero or one InscriptionFMPA that matches the filter.
     * @param {InscriptionFMPAFindUniqueArgs} args - Arguments to find a InscriptionFMPA
     * @example
     * // Get one InscriptionFMPA
     * const inscriptionFMPA = await prisma.inscriptionFMPA.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InscriptionFMPAFindUniqueArgs>(args: SelectSubset<T, InscriptionFMPAFindUniqueArgs<ExtArgs>>): Prisma__InscriptionFMPAClient<$Result.GetResult<Prisma.$InscriptionFMPAPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one InscriptionFMPA that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {InscriptionFMPAFindUniqueOrThrowArgs} args - Arguments to find a InscriptionFMPA
     * @example
     * // Get one InscriptionFMPA
     * const inscriptionFMPA = await prisma.inscriptionFMPA.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InscriptionFMPAFindUniqueOrThrowArgs>(args: SelectSubset<T, InscriptionFMPAFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InscriptionFMPAClient<$Result.GetResult<Prisma.$InscriptionFMPAPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first InscriptionFMPA that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscriptionFMPAFindFirstArgs} args - Arguments to find a InscriptionFMPA
     * @example
     * // Get one InscriptionFMPA
     * const inscriptionFMPA = await prisma.inscriptionFMPA.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InscriptionFMPAFindFirstArgs>(args?: SelectSubset<T, InscriptionFMPAFindFirstArgs<ExtArgs>>): Prisma__InscriptionFMPAClient<$Result.GetResult<Prisma.$InscriptionFMPAPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first InscriptionFMPA that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscriptionFMPAFindFirstOrThrowArgs} args - Arguments to find a InscriptionFMPA
     * @example
     * // Get one InscriptionFMPA
     * const inscriptionFMPA = await prisma.inscriptionFMPA.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InscriptionFMPAFindFirstOrThrowArgs>(args?: SelectSubset<T, InscriptionFMPAFindFirstOrThrowArgs<ExtArgs>>): Prisma__InscriptionFMPAClient<$Result.GetResult<Prisma.$InscriptionFMPAPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more InscriptionFMPAS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscriptionFMPAFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InscriptionFMPAS
     * const inscriptionFMPAS = await prisma.inscriptionFMPA.findMany()
     * 
     * // Get first 10 InscriptionFMPAS
     * const inscriptionFMPAS = await prisma.inscriptionFMPA.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const inscriptionFMPAWithIdOnly = await prisma.inscriptionFMPA.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InscriptionFMPAFindManyArgs>(args?: SelectSubset<T, InscriptionFMPAFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscriptionFMPAPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a InscriptionFMPA.
     * @param {InscriptionFMPACreateArgs} args - Arguments to create a InscriptionFMPA.
     * @example
     * // Create one InscriptionFMPA
     * const InscriptionFMPA = await prisma.inscriptionFMPA.create({
     *   data: {
     *     // ... data to create a InscriptionFMPA
     *   }
     * })
     * 
     */
    create<T extends InscriptionFMPACreateArgs>(args: SelectSubset<T, InscriptionFMPACreateArgs<ExtArgs>>): Prisma__InscriptionFMPAClient<$Result.GetResult<Prisma.$InscriptionFMPAPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many InscriptionFMPAS.
     * @param {InscriptionFMPACreateManyArgs} args - Arguments to create many InscriptionFMPAS.
     * @example
     * // Create many InscriptionFMPAS
     * const inscriptionFMPA = await prisma.inscriptionFMPA.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InscriptionFMPACreateManyArgs>(args?: SelectSubset<T, InscriptionFMPACreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InscriptionFMPAS and returns the data saved in the database.
     * @param {InscriptionFMPACreateManyAndReturnArgs} args - Arguments to create many InscriptionFMPAS.
     * @example
     * // Create many InscriptionFMPAS
     * const inscriptionFMPA = await prisma.inscriptionFMPA.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InscriptionFMPAS and only return the `id`
     * const inscriptionFMPAWithIdOnly = await prisma.inscriptionFMPA.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InscriptionFMPACreateManyAndReturnArgs>(args?: SelectSubset<T, InscriptionFMPACreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InscriptionFMPAPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a InscriptionFMPA.
     * @param {InscriptionFMPADeleteArgs} args - Arguments to delete one InscriptionFMPA.
     * @example
     * // Delete one InscriptionFMPA
     * const InscriptionFMPA = await prisma.inscriptionFMPA.delete({
     *   where: {
     *     // ... filter to delete one InscriptionFMPA
     *   }
     * })
     * 
     */
    delete<T extends InscriptionFMPADeleteArgs>(args: SelectSubset<T, InscriptionFMPADeleteArgs<ExtArgs>>): Prisma__InscriptionFMPAClient<$Result.GetResult<Prisma.$InscriptionFMPAPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one InscriptionFMPA.
     * @param {InscriptionFMPAUpdateArgs} args - Arguments to update one InscriptionFMPA.
     * @example
     * // Update one InscriptionFMPA
     * const inscriptionFMPA = await prisma.inscriptionFMPA.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InscriptionFMPAUpdateArgs>(args: SelectSubset<T, InscriptionFMPAUpdateArgs<ExtArgs>>): Prisma__InscriptionFMPAClient<$Result.GetResult<Prisma.$InscriptionFMPAPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more InscriptionFMPAS.
     * @param {InscriptionFMPADeleteManyArgs} args - Arguments to filter InscriptionFMPAS to delete.
     * @example
     * // Delete a few InscriptionFMPAS
     * const { count } = await prisma.inscriptionFMPA.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InscriptionFMPADeleteManyArgs>(args?: SelectSubset<T, InscriptionFMPADeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InscriptionFMPAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscriptionFMPAUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InscriptionFMPAS
     * const inscriptionFMPA = await prisma.inscriptionFMPA.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InscriptionFMPAUpdateManyArgs>(args: SelectSubset<T, InscriptionFMPAUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one InscriptionFMPA.
     * @param {InscriptionFMPAUpsertArgs} args - Arguments to update or create a InscriptionFMPA.
     * @example
     * // Update or create a InscriptionFMPA
     * const inscriptionFMPA = await prisma.inscriptionFMPA.upsert({
     *   create: {
     *     // ... data to create a InscriptionFMPA
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InscriptionFMPA we want to update
     *   }
     * })
     */
    upsert<T extends InscriptionFMPAUpsertArgs>(args: SelectSubset<T, InscriptionFMPAUpsertArgs<ExtArgs>>): Prisma__InscriptionFMPAClient<$Result.GetResult<Prisma.$InscriptionFMPAPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of InscriptionFMPAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscriptionFMPACountArgs} args - Arguments to filter InscriptionFMPAS to count.
     * @example
     * // Count the number of InscriptionFMPAS
     * const count = await prisma.inscriptionFMPA.count({
     *   where: {
     *     // ... the filter for the InscriptionFMPAS we want to count
     *   }
     * })
    **/
    count<T extends InscriptionFMPACountArgs>(
      args?: Subset<T, InscriptionFMPACountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InscriptionFMPACountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InscriptionFMPA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscriptionFMPAAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InscriptionFMPAAggregateArgs>(args: Subset<T, InscriptionFMPAAggregateArgs>): Prisma.PrismaPromise<GetInscriptionFMPAAggregateType<T>>

    /**
     * Group by InscriptionFMPA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InscriptionFMPAGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InscriptionFMPAGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InscriptionFMPAGroupByArgs['orderBy'] }
        : { orderBy?: InscriptionFMPAGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InscriptionFMPAGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInscriptionFMPAGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InscriptionFMPA model
   */
  readonly fields: InscriptionFMPAFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InscriptionFMPA.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InscriptionFMPAClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends SessionFMPADefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionFMPADefaultArgs<ExtArgs>>): Prisma__SessionFMPAClient<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    personnel<T extends PersonnelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonnelDefaultArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InscriptionFMPA model
   */ 
  interface InscriptionFMPAFieldRefs {
    readonly id: FieldRef<"InscriptionFMPA", 'Int'>
    readonly sessionId: FieldRef<"InscriptionFMPA", 'Int'>
    readonly personnelId: FieldRef<"InscriptionFMPA", 'Int'>
    readonly statut: FieldRef<"InscriptionFMPA", 'StatutInscription'>
    readonly present: FieldRef<"InscriptionFMPA", 'Boolean'>
    readonly signatureElectronique: FieldRef<"InscriptionFMPA", 'String'>
    readonly dateSignature: FieldRef<"InscriptionFMPA", 'DateTime'>
    readonly heuresValidees: FieldRef<"InscriptionFMPA", 'Float'>
    readonly montantTTA: FieldRef<"InscriptionFMPA", 'Float'>
    readonly dateInscription: FieldRef<"InscriptionFMPA", 'DateTime'>
    readonly dateModification: FieldRef<"InscriptionFMPA", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * InscriptionFMPA findUnique
   */
  export type InscriptionFMPAFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAInclude<ExtArgs> | null
    /**
     * Filter, which InscriptionFMPA to fetch.
     */
    where: InscriptionFMPAWhereUniqueInput
  }

  /**
   * InscriptionFMPA findUniqueOrThrow
   */
  export type InscriptionFMPAFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAInclude<ExtArgs> | null
    /**
     * Filter, which InscriptionFMPA to fetch.
     */
    where: InscriptionFMPAWhereUniqueInput
  }

  /**
   * InscriptionFMPA findFirst
   */
  export type InscriptionFMPAFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAInclude<ExtArgs> | null
    /**
     * Filter, which InscriptionFMPA to fetch.
     */
    where?: InscriptionFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InscriptionFMPAS to fetch.
     */
    orderBy?: InscriptionFMPAOrderByWithRelationInput | InscriptionFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InscriptionFMPAS.
     */
    cursor?: InscriptionFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InscriptionFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InscriptionFMPAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InscriptionFMPAS.
     */
    distinct?: InscriptionFMPAScalarFieldEnum | InscriptionFMPAScalarFieldEnum[]
  }

  /**
   * InscriptionFMPA findFirstOrThrow
   */
  export type InscriptionFMPAFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAInclude<ExtArgs> | null
    /**
     * Filter, which InscriptionFMPA to fetch.
     */
    where?: InscriptionFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InscriptionFMPAS to fetch.
     */
    orderBy?: InscriptionFMPAOrderByWithRelationInput | InscriptionFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InscriptionFMPAS.
     */
    cursor?: InscriptionFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InscriptionFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InscriptionFMPAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InscriptionFMPAS.
     */
    distinct?: InscriptionFMPAScalarFieldEnum | InscriptionFMPAScalarFieldEnum[]
  }

  /**
   * InscriptionFMPA findMany
   */
  export type InscriptionFMPAFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAInclude<ExtArgs> | null
    /**
     * Filter, which InscriptionFMPAS to fetch.
     */
    where?: InscriptionFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InscriptionFMPAS to fetch.
     */
    orderBy?: InscriptionFMPAOrderByWithRelationInput | InscriptionFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InscriptionFMPAS.
     */
    cursor?: InscriptionFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InscriptionFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InscriptionFMPAS.
     */
    skip?: number
    distinct?: InscriptionFMPAScalarFieldEnum | InscriptionFMPAScalarFieldEnum[]
  }

  /**
   * InscriptionFMPA create
   */
  export type InscriptionFMPACreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAInclude<ExtArgs> | null
    /**
     * The data needed to create a InscriptionFMPA.
     */
    data: XOR<InscriptionFMPACreateInput, InscriptionFMPAUncheckedCreateInput>
  }

  /**
   * InscriptionFMPA createMany
   */
  export type InscriptionFMPACreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InscriptionFMPAS.
     */
    data: InscriptionFMPACreateManyInput | InscriptionFMPACreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InscriptionFMPA createManyAndReturn
   */
  export type InscriptionFMPACreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many InscriptionFMPAS.
     */
    data: InscriptionFMPACreateManyInput | InscriptionFMPACreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InscriptionFMPA update
   */
  export type InscriptionFMPAUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAInclude<ExtArgs> | null
    /**
     * The data needed to update a InscriptionFMPA.
     */
    data: XOR<InscriptionFMPAUpdateInput, InscriptionFMPAUncheckedUpdateInput>
    /**
     * Choose, which InscriptionFMPA to update.
     */
    where: InscriptionFMPAWhereUniqueInput
  }

  /**
   * InscriptionFMPA updateMany
   */
  export type InscriptionFMPAUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InscriptionFMPAS.
     */
    data: XOR<InscriptionFMPAUpdateManyMutationInput, InscriptionFMPAUncheckedUpdateManyInput>
    /**
     * Filter which InscriptionFMPAS to update
     */
    where?: InscriptionFMPAWhereInput
  }

  /**
   * InscriptionFMPA upsert
   */
  export type InscriptionFMPAUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAInclude<ExtArgs> | null
    /**
     * The filter to search for the InscriptionFMPA to update in case it exists.
     */
    where: InscriptionFMPAWhereUniqueInput
    /**
     * In case the InscriptionFMPA found by the `where` argument doesn't exist, create a new InscriptionFMPA with this data.
     */
    create: XOR<InscriptionFMPACreateInput, InscriptionFMPAUncheckedCreateInput>
    /**
     * In case the InscriptionFMPA was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InscriptionFMPAUpdateInput, InscriptionFMPAUncheckedUpdateInput>
  }

  /**
   * InscriptionFMPA delete
   */
  export type InscriptionFMPADeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAInclude<ExtArgs> | null
    /**
     * Filter which InscriptionFMPA to delete.
     */
    where: InscriptionFMPAWhereUniqueInput
  }

  /**
   * InscriptionFMPA deleteMany
   */
  export type InscriptionFMPADeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InscriptionFMPAS to delete
     */
    where?: InscriptionFMPAWhereInput
  }

  /**
   * InscriptionFMPA without action
   */
  export type InscriptionFMPADefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InscriptionFMPA
     */
    select?: InscriptionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InscriptionFMPAInclude<ExtArgs> | null
  }


  /**
   * Model SignatureFMPA
   */

  export type AggregateSignatureFMPA = {
    _count: SignatureFMPACountAggregateOutputType | null
    _avg: SignatureFMPAAvgAggregateOutputType | null
    _sum: SignatureFMPASumAggregateOutputType | null
    _min: SignatureFMPAMinAggregateOutputType | null
    _max: SignatureFMPAMaxAggregateOutputType | null
  }

  export type SignatureFMPAAvgAggregateOutputType = {
    sessionFMPAId: number | null
    personnelId: number | null
  }

  export type SignatureFMPASumAggregateOutputType = {
    sessionFMPAId: number | null
    personnelId: number | null
  }

  export type SignatureFMPAMinAggregateOutputType = {
    id: string | null
    sessionFMPAId: number | null
    personnelId: number | null
    type: string | null
    signature: string | null
    dateSignature: Date | null
  }

  export type SignatureFMPAMaxAggregateOutputType = {
    id: string | null
    sessionFMPAId: number | null
    personnelId: number | null
    type: string | null
    signature: string | null
    dateSignature: Date | null
  }

  export type SignatureFMPACountAggregateOutputType = {
    id: number
    sessionFMPAId: number
    personnelId: number
    type: number
    signature: number
    dateSignature: number
    _all: number
  }


  export type SignatureFMPAAvgAggregateInputType = {
    sessionFMPAId?: true
    personnelId?: true
  }

  export type SignatureFMPASumAggregateInputType = {
    sessionFMPAId?: true
    personnelId?: true
  }

  export type SignatureFMPAMinAggregateInputType = {
    id?: true
    sessionFMPAId?: true
    personnelId?: true
    type?: true
    signature?: true
    dateSignature?: true
  }

  export type SignatureFMPAMaxAggregateInputType = {
    id?: true
    sessionFMPAId?: true
    personnelId?: true
    type?: true
    signature?: true
    dateSignature?: true
  }

  export type SignatureFMPACountAggregateInputType = {
    id?: true
    sessionFMPAId?: true
    personnelId?: true
    type?: true
    signature?: true
    dateSignature?: true
    _all?: true
  }

  export type SignatureFMPAAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SignatureFMPA to aggregate.
     */
    where?: SignatureFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SignatureFMPAS to fetch.
     */
    orderBy?: SignatureFMPAOrderByWithRelationInput | SignatureFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SignatureFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SignatureFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SignatureFMPAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SignatureFMPAS
    **/
    _count?: true | SignatureFMPACountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SignatureFMPAAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SignatureFMPASumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SignatureFMPAMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SignatureFMPAMaxAggregateInputType
  }

  export type GetSignatureFMPAAggregateType<T extends SignatureFMPAAggregateArgs> = {
        [P in keyof T & keyof AggregateSignatureFMPA]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSignatureFMPA[P]>
      : GetScalarType<T[P], AggregateSignatureFMPA[P]>
  }




  export type SignatureFMPAGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SignatureFMPAWhereInput
    orderBy?: SignatureFMPAOrderByWithAggregationInput | SignatureFMPAOrderByWithAggregationInput[]
    by: SignatureFMPAScalarFieldEnum[] | SignatureFMPAScalarFieldEnum
    having?: SignatureFMPAScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SignatureFMPACountAggregateInputType | true
    _avg?: SignatureFMPAAvgAggregateInputType
    _sum?: SignatureFMPASumAggregateInputType
    _min?: SignatureFMPAMinAggregateInputType
    _max?: SignatureFMPAMaxAggregateInputType
  }

  export type SignatureFMPAGroupByOutputType = {
    id: string
    sessionFMPAId: number
    personnelId: number
    type: string
    signature: string
    dateSignature: Date
    _count: SignatureFMPACountAggregateOutputType | null
    _avg: SignatureFMPAAvgAggregateOutputType | null
    _sum: SignatureFMPASumAggregateOutputType | null
    _min: SignatureFMPAMinAggregateOutputType | null
    _max: SignatureFMPAMaxAggregateOutputType | null
  }

  type GetSignatureFMPAGroupByPayload<T extends SignatureFMPAGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SignatureFMPAGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SignatureFMPAGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SignatureFMPAGroupByOutputType[P]>
            : GetScalarType<T[P], SignatureFMPAGroupByOutputType[P]>
        }
      >
    >


  export type SignatureFMPASelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionFMPAId?: boolean
    personnelId?: boolean
    type?: boolean
    signature?: boolean
    dateSignature?: boolean
    session?: boolean | SessionFMPADefaultArgs<ExtArgs>
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["signatureFMPA"]>

  export type SignatureFMPASelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionFMPAId?: boolean
    personnelId?: boolean
    type?: boolean
    signature?: boolean
    dateSignature?: boolean
    session?: boolean | SessionFMPADefaultArgs<ExtArgs>
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["signatureFMPA"]>

  export type SignatureFMPASelectScalar = {
    id?: boolean
    sessionFMPAId?: boolean
    personnelId?: boolean
    type?: boolean
    signature?: boolean
    dateSignature?: boolean
  }

  export type SignatureFMPAInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionFMPADefaultArgs<ExtArgs>
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }
  export type SignatureFMPAIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | SessionFMPADefaultArgs<ExtArgs>
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }

  export type $SignatureFMPAPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SignatureFMPA"
    objects: {
      session: Prisma.$SessionFMPAPayload<ExtArgs>
      personnel: Prisma.$PersonnelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionFMPAId: number
      personnelId: number
      type: string
      signature: string
      dateSignature: Date
    }, ExtArgs["result"]["signatureFMPA"]>
    composites: {}
  }

  type SignatureFMPAGetPayload<S extends boolean | null | undefined | SignatureFMPADefaultArgs> = $Result.GetResult<Prisma.$SignatureFMPAPayload, S>

  type SignatureFMPACountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SignatureFMPAFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SignatureFMPACountAggregateInputType | true
    }

  export interface SignatureFMPADelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SignatureFMPA'], meta: { name: 'SignatureFMPA' } }
    /**
     * Find zero or one SignatureFMPA that matches the filter.
     * @param {SignatureFMPAFindUniqueArgs} args - Arguments to find a SignatureFMPA
     * @example
     * // Get one SignatureFMPA
     * const signatureFMPA = await prisma.signatureFMPA.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SignatureFMPAFindUniqueArgs>(args: SelectSubset<T, SignatureFMPAFindUniqueArgs<ExtArgs>>): Prisma__SignatureFMPAClient<$Result.GetResult<Prisma.$SignatureFMPAPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one SignatureFMPA that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {SignatureFMPAFindUniqueOrThrowArgs} args - Arguments to find a SignatureFMPA
     * @example
     * // Get one SignatureFMPA
     * const signatureFMPA = await prisma.signatureFMPA.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SignatureFMPAFindUniqueOrThrowArgs>(args: SelectSubset<T, SignatureFMPAFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SignatureFMPAClient<$Result.GetResult<Prisma.$SignatureFMPAPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first SignatureFMPA that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignatureFMPAFindFirstArgs} args - Arguments to find a SignatureFMPA
     * @example
     * // Get one SignatureFMPA
     * const signatureFMPA = await prisma.signatureFMPA.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SignatureFMPAFindFirstArgs>(args?: SelectSubset<T, SignatureFMPAFindFirstArgs<ExtArgs>>): Prisma__SignatureFMPAClient<$Result.GetResult<Prisma.$SignatureFMPAPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first SignatureFMPA that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignatureFMPAFindFirstOrThrowArgs} args - Arguments to find a SignatureFMPA
     * @example
     * // Get one SignatureFMPA
     * const signatureFMPA = await prisma.signatureFMPA.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SignatureFMPAFindFirstOrThrowArgs>(args?: SelectSubset<T, SignatureFMPAFindFirstOrThrowArgs<ExtArgs>>): Prisma__SignatureFMPAClient<$Result.GetResult<Prisma.$SignatureFMPAPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more SignatureFMPAS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignatureFMPAFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SignatureFMPAS
     * const signatureFMPAS = await prisma.signatureFMPA.findMany()
     * 
     * // Get first 10 SignatureFMPAS
     * const signatureFMPAS = await prisma.signatureFMPA.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const signatureFMPAWithIdOnly = await prisma.signatureFMPA.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SignatureFMPAFindManyArgs>(args?: SelectSubset<T, SignatureFMPAFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignatureFMPAPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a SignatureFMPA.
     * @param {SignatureFMPACreateArgs} args - Arguments to create a SignatureFMPA.
     * @example
     * // Create one SignatureFMPA
     * const SignatureFMPA = await prisma.signatureFMPA.create({
     *   data: {
     *     // ... data to create a SignatureFMPA
     *   }
     * })
     * 
     */
    create<T extends SignatureFMPACreateArgs>(args: SelectSubset<T, SignatureFMPACreateArgs<ExtArgs>>): Prisma__SignatureFMPAClient<$Result.GetResult<Prisma.$SignatureFMPAPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many SignatureFMPAS.
     * @param {SignatureFMPACreateManyArgs} args - Arguments to create many SignatureFMPAS.
     * @example
     * // Create many SignatureFMPAS
     * const signatureFMPA = await prisma.signatureFMPA.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SignatureFMPACreateManyArgs>(args?: SelectSubset<T, SignatureFMPACreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SignatureFMPAS and returns the data saved in the database.
     * @param {SignatureFMPACreateManyAndReturnArgs} args - Arguments to create many SignatureFMPAS.
     * @example
     * // Create many SignatureFMPAS
     * const signatureFMPA = await prisma.signatureFMPA.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SignatureFMPAS and only return the `id`
     * const signatureFMPAWithIdOnly = await prisma.signatureFMPA.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SignatureFMPACreateManyAndReturnArgs>(args?: SelectSubset<T, SignatureFMPACreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SignatureFMPAPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a SignatureFMPA.
     * @param {SignatureFMPADeleteArgs} args - Arguments to delete one SignatureFMPA.
     * @example
     * // Delete one SignatureFMPA
     * const SignatureFMPA = await prisma.signatureFMPA.delete({
     *   where: {
     *     // ... filter to delete one SignatureFMPA
     *   }
     * })
     * 
     */
    delete<T extends SignatureFMPADeleteArgs>(args: SelectSubset<T, SignatureFMPADeleteArgs<ExtArgs>>): Prisma__SignatureFMPAClient<$Result.GetResult<Prisma.$SignatureFMPAPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one SignatureFMPA.
     * @param {SignatureFMPAUpdateArgs} args - Arguments to update one SignatureFMPA.
     * @example
     * // Update one SignatureFMPA
     * const signatureFMPA = await prisma.signatureFMPA.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SignatureFMPAUpdateArgs>(args: SelectSubset<T, SignatureFMPAUpdateArgs<ExtArgs>>): Prisma__SignatureFMPAClient<$Result.GetResult<Prisma.$SignatureFMPAPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more SignatureFMPAS.
     * @param {SignatureFMPADeleteManyArgs} args - Arguments to filter SignatureFMPAS to delete.
     * @example
     * // Delete a few SignatureFMPAS
     * const { count } = await prisma.signatureFMPA.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SignatureFMPADeleteManyArgs>(args?: SelectSubset<T, SignatureFMPADeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SignatureFMPAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignatureFMPAUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SignatureFMPAS
     * const signatureFMPA = await prisma.signatureFMPA.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SignatureFMPAUpdateManyArgs>(args: SelectSubset<T, SignatureFMPAUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one SignatureFMPA.
     * @param {SignatureFMPAUpsertArgs} args - Arguments to update or create a SignatureFMPA.
     * @example
     * // Update or create a SignatureFMPA
     * const signatureFMPA = await prisma.signatureFMPA.upsert({
     *   create: {
     *     // ... data to create a SignatureFMPA
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SignatureFMPA we want to update
     *   }
     * })
     */
    upsert<T extends SignatureFMPAUpsertArgs>(args: SelectSubset<T, SignatureFMPAUpsertArgs<ExtArgs>>): Prisma__SignatureFMPAClient<$Result.GetResult<Prisma.$SignatureFMPAPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of SignatureFMPAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignatureFMPACountArgs} args - Arguments to filter SignatureFMPAS to count.
     * @example
     * // Count the number of SignatureFMPAS
     * const count = await prisma.signatureFMPA.count({
     *   where: {
     *     // ... the filter for the SignatureFMPAS we want to count
     *   }
     * })
    **/
    count<T extends SignatureFMPACountArgs>(
      args?: Subset<T, SignatureFMPACountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SignatureFMPACountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SignatureFMPA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignatureFMPAAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SignatureFMPAAggregateArgs>(args: Subset<T, SignatureFMPAAggregateArgs>): Prisma.PrismaPromise<GetSignatureFMPAAggregateType<T>>

    /**
     * Group by SignatureFMPA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SignatureFMPAGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SignatureFMPAGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SignatureFMPAGroupByArgs['orderBy'] }
        : { orderBy?: SignatureFMPAGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SignatureFMPAGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSignatureFMPAGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SignatureFMPA model
   */
  readonly fields: SignatureFMPAFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SignatureFMPA.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SignatureFMPAClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends SessionFMPADefaultArgs<ExtArgs> = {}>(args?: Subset<T, SessionFMPADefaultArgs<ExtArgs>>): Prisma__SessionFMPAClient<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    personnel<T extends PersonnelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonnelDefaultArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SignatureFMPA model
   */ 
  interface SignatureFMPAFieldRefs {
    readonly id: FieldRef<"SignatureFMPA", 'String'>
    readonly sessionFMPAId: FieldRef<"SignatureFMPA", 'Int'>
    readonly personnelId: FieldRef<"SignatureFMPA", 'Int'>
    readonly type: FieldRef<"SignatureFMPA", 'String'>
    readonly signature: FieldRef<"SignatureFMPA", 'String'>
    readonly dateSignature: FieldRef<"SignatureFMPA", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * SignatureFMPA findUnique
   */
  export type SignatureFMPAFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAInclude<ExtArgs> | null
    /**
     * Filter, which SignatureFMPA to fetch.
     */
    where: SignatureFMPAWhereUniqueInput
  }

  /**
   * SignatureFMPA findUniqueOrThrow
   */
  export type SignatureFMPAFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAInclude<ExtArgs> | null
    /**
     * Filter, which SignatureFMPA to fetch.
     */
    where: SignatureFMPAWhereUniqueInput
  }

  /**
   * SignatureFMPA findFirst
   */
  export type SignatureFMPAFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAInclude<ExtArgs> | null
    /**
     * Filter, which SignatureFMPA to fetch.
     */
    where?: SignatureFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SignatureFMPAS to fetch.
     */
    orderBy?: SignatureFMPAOrderByWithRelationInput | SignatureFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SignatureFMPAS.
     */
    cursor?: SignatureFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SignatureFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SignatureFMPAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SignatureFMPAS.
     */
    distinct?: SignatureFMPAScalarFieldEnum | SignatureFMPAScalarFieldEnum[]
  }

  /**
   * SignatureFMPA findFirstOrThrow
   */
  export type SignatureFMPAFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAInclude<ExtArgs> | null
    /**
     * Filter, which SignatureFMPA to fetch.
     */
    where?: SignatureFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SignatureFMPAS to fetch.
     */
    orderBy?: SignatureFMPAOrderByWithRelationInput | SignatureFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SignatureFMPAS.
     */
    cursor?: SignatureFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SignatureFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SignatureFMPAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SignatureFMPAS.
     */
    distinct?: SignatureFMPAScalarFieldEnum | SignatureFMPAScalarFieldEnum[]
  }

  /**
   * SignatureFMPA findMany
   */
  export type SignatureFMPAFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAInclude<ExtArgs> | null
    /**
     * Filter, which SignatureFMPAS to fetch.
     */
    where?: SignatureFMPAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SignatureFMPAS to fetch.
     */
    orderBy?: SignatureFMPAOrderByWithRelationInput | SignatureFMPAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SignatureFMPAS.
     */
    cursor?: SignatureFMPAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SignatureFMPAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SignatureFMPAS.
     */
    skip?: number
    distinct?: SignatureFMPAScalarFieldEnum | SignatureFMPAScalarFieldEnum[]
  }

  /**
   * SignatureFMPA create
   */
  export type SignatureFMPACreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAInclude<ExtArgs> | null
    /**
     * The data needed to create a SignatureFMPA.
     */
    data: XOR<SignatureFMPACreateInput, SignatureFMPAUncheckedCreateInput>
  }

  /**
   * SignatureFMPA createMany
   */
  export type SignatureFMPACreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SignatureFMPAS.
     */
    data: SignatureFMPACreateManyInput | SignatureFMPACreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SignatureFMPA createManyAndReturn
   */
  export type SignatureFMPACreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many SignatureFMPAS.
     */
    data: SignatureFMPACreateManyInput | SignatureFMPACreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SignatureFMPA update
   */
  export type SignatureFMPAUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAInclude<ExtArgs> | null
    /**
     * The data needed to update a SignatureFMPA.
     */
    data: XOR<SignatureFMPAUpdateInput, SignatureFMPAUncheckedUpdateInput>
    /**
     * Choose, which SignatureFMPA to update.
     */
    where: SignatureFMPAWhereUniqueInput
  }

  /**
   * SignatureFMPA updateMany
   */
  export type SignatureFMPAUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SignatureFMPAS.
     */
    data: XOR<SignatureFMPAUpdateManyMutationInput, SignatureFMPAUncheckedUpdateManyInput>
    /**
     * Filter which SignatureFMPAS to update
     */
    where?: SignatureFMPAWhereInput
  }

  /**
   * SignatureFMPA upsert
   */
  export type SignatureFMPAUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAInclude<ExtArgs> | null
    /**
     * The filter to search for the SignatureFMPA to update in case it exists.
     */
    where: SignatureFMPAWhereUniqueInput
    /**
     * In case the SignatureFMPA found by the `where` argument doesn't exist, create a new SignatureFMPA with this data.
     */
    create: XOR<SignatureFMPACreateInput, SignatureFMPAUncheckedCreateInput>
    /**
     * In case the SignatureFMPA was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SignatureFMPAUpdateInput, SignatureFMPAUncheckedUpdateInput>
  }

  /**
   * SignatureFMPA delete
   */
  export type SignatureFMPADeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAInclude<ExtArgs> | null
    /**
     * Filter which SignatureFMPA to delete.
     */
    where: SignatureFMPAWhereUniqueInput
  }

  /**
   * SignatureFMPA deleteMany
   */
  export type SignatureFMPADeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SignatureFMPAS to delete
     */
    where?: SignatureFMPAWhereInput
  }

  /**
   * SignatureFMPA without action
   */
  export type SignatureFMPADefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SignatureFMPA
     */
    select?: SignatureFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SignatureFMPAInclude<ExtArgs> | null
  }


  /**
   * Model AptitudeMedicale
   */

  export type AggregateAptitudeMedicale = {
    _count: AptitudeMedicaleCountAggregateOutputType | null
    _avg: AptitudeMedicaleAvgAggregateOutputType | null
    _sum: AptitudeMedicaleSumAggregateOutputType | null
    _min: AptitudeMedicaleMinAggregateOutputType | null
    _max: AptitudeMedicaleMaxAggregateOutputType | null
  }

  export type AptitudeMedicaleAvgAggregateOutputType = {
    id: number | null
    personnelId: number | null
  }

  export type AptitudeMedicaleSumAggregateOutputType = {
    id: number | null
    personnelId: number | null
  }

  export type AptitudeMedicaleMinAggregateOutputType = {
    id: number | null
    personnelId: number | null
    statut: $Enums.StatutAptitude | null
    dateVisite: Date | null
    dateProchainExamen: Date | null
    restrictions: string | null
    medecin: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AptitudeMedicaleMaxAggregateOutputType = {
    id: number | null
    personnelId: number | null
    statut: $Enums.StatutAptitude | null
    dateVisite: Date | null
    dateProchainExamen: Date | null
    restrictions: string | null
    medecin: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AptitudeMedicaleCountAggregateOutputType = {
    id: number
    personnelId: number
    statut: number
    dateVisite: number
    dateProchainExamen: number
    restrictions: number
    medecin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AptitudeMedicaleAvgAggregateInputType = {
    id?: true
    personnelId?: true
  }

  export type AptitudeMedicaleSumAggregateInputType = {
    id?: true
    personnelId?: true
  }

  export type AptitudeMedicaleMinAggregateInputType = {
    id?: true
    personnelId?: true
    statut?: true
    dateVisite?: true
    dateProchainExamen?: true
    restrictions?: true
    medecin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AptitudeMedicaleMaxAggregateInputType = {
    id?: true
    personnelId?: true
    statut?: true
    dateVisite?: true
    dateProchainExamen?: true
    restrictions?: true
    medecin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AptitudeMedicaleCountAggregateInputType = {
    id?: true
    personnelId?: true
    statut?: true
    dateVisite?: true
    dateProchainExamen?: true
    restrictions?: true
    medecin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AptitudeMedicaleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AptitudeMedicale to aggregate.
     */
    where?: AptitudeMedicaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AptitudeMedicales to fetch.
     */
    orderBy?: AptitudeMedicaleOrderByWithRelationInput | AptitudeMedicaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AptitudeMedicaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AptitudeMedicales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AptitudeMedicales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AptitudeMedicales
    **/
    _count?: true | AptitudeMedicaleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AptitudeMedicaleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AptitudeMedicaleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AptitudeMedicaleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AptitudeMedicaleMaxAggregateInputType
  }

  export type GetAptitudeMedicaleAggregateType<T extends AptitudeMedicaleAggregateArgs> = {
        [P in keyof T & keyof AggregateAptitudeMedicale]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAptitudeMedicale[P]>
      : GetScalarType<T[P], AggregateAptitudeMedicale[P]>
  }




  export type AptitudeMedicaleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AptitudeMedicaleWhereInput
    orderBy?: AptitudeMedicaleOrderByWithAggregationInput | AptitudeMedicaleOrderByWithAggregationInput[]
    by: AptitudeMedicaleScalarFieldEnum[] | AptitudeMedicaleScalarFieldEnum
    having?: AptitudeMedicaleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AptitudeMedicaleCountAggregateInputType | true
    _avg?: AptitudeMedicaleAvgAggregateInputType
    _sum?: AptitudeMedicaleSumAggregateInputType
    _min?: AptitudeMedicaleMinAggregateInputType
    _max?: AptitudeMedicaleMaxAggregateInputType
  }

  export type AptitudeMedicaleGroupByOutputType = {
    id: number
    personnelId: number
    statut: $Enums.StatutAptitude
    dateVisite: Date
    dateProchainExamen: Date
    restrictions: string | null
    medecin: string | null
    createdAt: Date
    updatedAt: Date
    _count: AptitudeMedicaleCountAggregateOutputType | null
    _avg: AptitudeMedicaleAvgAggregateOutputType | null
    _sum: AptitudeMedicaleSumAggregateOutputType | null
    _min: AptitudeMedicaleMinAggregateOutputType | null
    _max: AptitudeMedicaleMaxAggregateOutputType | null
  }

  type GetAptitudeMedicaleGroupByPayload<T extends AptitudeMedicaleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AptitudeMedicaleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AptitudeMedicaleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AptitudeMedicaleGroupByOutputType[P]>
            : GetScalarType<T[P], AptitudeMedicaleGroupByOutputType[P]>
        }
      >
    >


  export type AptitudeMedicaleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personnelId?: boolean
    statut?: boolean
    dateVisite?: boolean
    dateProchainExamen?: boolean
    restrictions?: boolean
    medecin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aptitudeMedicale"]>

  export type AptitudeMedicaleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personnelId?: boolean
    statut?: boolean
    dateVisite?: boolean
    dateProchainExamen?: boolean
    restrictions?: boolean
    medecin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["aptitudeMedicale"]>

  export type AptitudeMedicaleSelectScalar = {
    id?: boolean
    personnelId?: boolean
    statut?: boolean
    dateVisite?: boolean
    dateProchainExamen?: boolean
    restrictions?: boolean
    medecin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AptitudeMedicaleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }
  export type AptitudeMedicaleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }

  export type $AptitudeMedicalePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AptitudeMedicale"
    objects: {
      personnel: Prisma.$PersonnelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      personnelId: number
      statut: $Enums.StatutAptitude
      dateVisite: Date
      dateProchainExamen: Date
      restrictions: string | null
      medecin: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["aptitudeMedicale"]>
    composites: {}
  }

  type AptitudeMedicaleGetPayload<S extends boolean | null | undefined | AptitudeMedicaleDefaultArgs> = $Result.GetResult<Prisma.$AptitudeMedicalePayload, S>

  type AptitudeMedicaleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AptitudeMedicaleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AptitudeMedicaleCountAggregateInputType | true
    }

  export interface AptitudeMedicaleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AptitudeMedicale'], meta: { name: 'AptitudeMedicale' } }
    /**
     * Find zero or one AptitudeMedicale that matches the filter.
     * @param {AptitudeMedicaleFindUniqueArgs} args - Arguments to find a AptitudeMedicale
     * @example
     * // Get one AptitudeMedicale
     * const aptitudeMedicale = await prisma.aptitudeMedicale.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AptitudeMedicaleFindUniqueArgs>(args: SelectSubset<T, AptitudeMedicaleFindUniqueArgs<ExtArgs>>): Prisma__AptitudeMedicaleClient<$Result.GetResult<Prisma.$AptitudeMedicalePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AptitudeMedicale that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AptitudeMedicaleFindUniqueOrThrowArgs} args - Arguments to find a AptitudeMedicale
     * @example
     * // Get one AptitudeMedicale
     * const aptitudeMedicale = await prisma.aptitudeMedicale.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AptitudeMedicaleFindUniqueOrThrowArgs>(args: SelectSubset<T, AptitudeMedicaleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AptitudeMedicaleClient<$Result.GetResult<Prisma.$AptitudeMedicalePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AptitudeMedicale that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AptitudeMedicaleFindFirstArgs} args - Arguments to find a AptitudeMedicale
     * @example
     * // Get one AptitudeMedicale
     * const aptitudeMedicale = await prisma.aptitudeMedicale.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AptitudeMedicaleFindFirstArgs>(args?: SelectSubset<T, AptitudeMedicaleFindFirstArgs<ExtArgs>>): Prisma__AptitudeMedicaleClient<$Result.GetResult<Prisma.$AptitudeMedicalePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AptitudeMedicale that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AptitudeMedicaleFindFirstOrThrowArgs} args - Arguments to find a AptitudeMedicale
     * @example
     * // Get one AptitudeMedicale
     * const aptitudeMedicale = await prisma.aptitudeMedicale.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AptitudeMedicaleFindFirstOrThrowArgs>(args?: SelectSubset<T, AptitudeMedicaleFindFirstOrThrowArgs<ExtArgs>>): Prisma__AptitudeMedicaleClient<$Result.GetResult<Prisma.$AptitudeMedicalePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AptitudeMedicales that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AptitudeMedicaleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AptitudeMedicales
     * const aptitudeMedicales = await prisma.aptitudeMedicale.findMany()
     * 
     * // Get first 10 AptitudeMedicales
     * const aptitudeMedicales = await prisma.aptitudeMedicale.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const aptitudeMedicaleWithIdOnly = await prisma.aptitudeMedicale.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AptitudeMedicaleFindManyArgs>(args?: SelectSubset<T, AptitudeMedicaleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AptitudeMedicalePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AptitudeMedicale.
     * @param {AptitudeMedicaleCreateArgs} args - Arguments to create a AptitudeMedicale.
     * @example
     * // Create one AptitudeMedicale
     * const AptitudeMedicale = await prisma.aptitudeMedicale.create({
     *   data: {
     *     // ... data to create a AptitudeMedicale
     *   }
     * })
     * 
     */
    create<T extends AptitudeMedicaleCreateArgs>(args: SelectSubset<T, AptitudeMedicaleCreateArgs<ExtArgs>>): Prisma__AptitudeMedicaleClient<$Result.GetResult<Prisma.$AptitudeMedicalePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AptitudeMedicales.
     * @param {AptitudeMedicaleCreateManyArgs} args - Arguments to create many AptitudeMedicales.
     * @example
     * // Create many AptitudeMedicales
     * const aptitudeMedicale = await prisma.aptitudeMedicale.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AptitudeMedicaleCreateManyArgs>(args?: SelectSubset<T, AptitudeMedicaleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AptitudeMedicales and returns the data saved in the database.
     * @param {AptitudeMedicaleCreateManyAndReturnArgs} args - Arguments to create many AptitudeMedicales.
     * @example
     * // Create many AptitudeMedicales
     * const aptitudeMedicale = await prisma.aptitudeMedicale.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AptitudeMedicales and only return the `id`
     * const aptitudeMedicaleWithIdOnly = await prisma.aptitudeMedicale.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AptitudeMedicaleCreateManyAndReturnArgs>(args?: SelectSubset<T, AptitudeMedicaleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AptitudeMedicalePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AptitudeMedicale.
     * @param {AptitudeMedicaleDeleteArgs} args - Arguments to delete one AptitudeMedicale.
     * @example
     * // Delete one AptitudeMedicale
     * const AptitudeMedicale = await prisma.aptitudeMedicale.delete({
     *   where: {
     *     // ... filter to delete one AptitudeMedicale
     *   }
     * })
     * 
     */
    delete<T extends AptitudeMedicaleDeleteArgs>(args: SelectSubset<T, AptitudeMedicaleDeleteArgs<ExtArgs>>): Prisma__AptitudeMedicaleClient<$Result.GetResult<Prisma.$AptitudeMedicalePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AptitudeMedicale.
     * @param {AptitudeMedicaleUpdateArgs} args - Arguments to update one AptitudeMedicale.
     * @example
     * // Update one AptitudeMedicale
     * const aptitudeMedicale = await prisma.aptitudeMedicale.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AptitudeMedicaleUpdateArgs>(args: SelectSubset<T, AptitudeMedicaleUpdateArgs<ExtArgs>>): Prisma__AptitudeMedicaleClient<$Result.GetResult<Prisma.$AptitudeMedicalePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AptitudeMedicales.
     * @param {AptitudeMedicaleDeleteManyArgs} args - Arguments to filter AptitudeMedicales to delete.
     * @example
     * // Delete a few AptitudeMedicales
     * const { count } = await prisma.aptitudeMedicale.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AptitudeMedicaleDeleteManyArgs>(args?: SelectSubset<T, AptitudeMedicaleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AptitudeMedicales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AptitudeMedicaleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AptitudeMedicales
     * const aptitudeMedicale = await prisma.aptitudeMedicale.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AptitudeMedicaleUpdateManyArgs>(args: SelectSubset<T, AptitudeMedicaleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AptitudeMedicale.
     * @param {AptitudeMedicaleUpsertArgs} args - Arguments to update or create a AptitudeMedicale.
     * @example
     * // Update or create a AptitudeMedicale
     * const aptitudeMedicale = await prisma.aptitudeMedicale.upsert({
     *   create: {
     *     // ... data to create a AptitudeMedicale
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AptitudeMedicale we want to update
     *   }
     * })
     */
    upsert<T extends AptitudeMedicaleUpsertArgs>(args: SelectSubset<T, AptitudeMedicaleUpsertArgs<ExtArgs>>): Prisma__AptitudeMedicaleClient<$Result.GetResult<Prisma.$AptitudeMedicalePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AptitudeMedicales.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AptitudeMedicaleCountArgs} args - Arguments to filter AptitudeMedicales to count.
     * @example
     * // Count the number of AptitudeMedicales
     * const count = await prisma.aptitudeMedicale.count({
     *   where: {
     *     // ... the filter for the AptitudeMedicales we want to count
     *   }
     * })
    **/
    count<T extends AptitudeMedicaleCountArgs>(
      args?: Subset<T, AptitudeMedicaleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AptitudeMedicaleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AptitudeMedicale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AptitudeMedicaleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AptitudeMedicaleAggregateArgs>(args: Subset<T, AptitudeMedicaleAggregateArgs>): Prisma.PrismaPromise<GetAptitudeMedicaleAggregateType<T>>

    /**
     * Group by AptitudeMedicale.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AptitudeMedicaleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AptitudeMedicaleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AptitudeMedicaleGroupByArgs['orderBy'] }
        : { orderBy?: AptitudeMedicaleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AptitudeMedicaleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAptitudeMedicaleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AptitudeMedicale model
   */
  readonly fields: AptitudeMedicaleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AptitudeMedicale.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AptitudeMedicaleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    personnel<T extends PersonnelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonnelDefaultArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AptitudeMedicale model
   */ 
  interface AptitudeMedicaleFieldRefs {
    readonly id: FieldRef<"AptitudeMedicale", 'Int'>
    readonly personnelId: FieldRef<"AptitudeMedicale", 'Int'>
    readonly statut: FieldRef<"AptitudeMedicale", 'StatutAptitude'>
    readonly dateVisite: FieldRef<"AptitudeMedicale", 'DateTime'>
    readonly dateProchainExamen: FieldRef<"AptitudeMedicale", 'DateTime'>
    readonly restrictions: FieldRef<"AptitudeMedicale", 'String'>
    readonly medecin: FieldRef<"AptitudeMedicale", 'String'>
    readonly createdAt: FieldRef<"AptitudeMedicale", 'DateTime'>
    readonly updatedAt: FieldRef<"AptitudeMedicale", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AptitudeMedicale findUnique
   */
  export type AptitudeMedicaleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AptitudeMedicale
     */
    select?: AptitudeMedicaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AptitudeMedicaleInclude<ExtArgs> | null
    /**
     * Filter, which AptitudeMedicale to fetch.
     */
    where: AptitudeMedicaleWhereUniqueInput
  }

  /**
   * AptitudeMedicale findUniqueOrThrow
   */
  export type AptitudeMedicaleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AptitudeMedicale
     */
    select?: AptitudeMedicaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AptitudeMedicaleInclude<ExtArgs> | null
    /**
     * Filter, which AptitudeMedicale to fetch.
     */
    where: AptitudeMedicaleWhereUniqueInput
  }

  /**
   * AptitudeMedicale findFirst
   */
  export type AptitudeMedicaleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AptitudeMedicale
     */
    select?: AptitudeMedicaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AptitudeMedicaleInclude<ExtArgs> | null
    /**
     * Filter, which AptitudeMedicale to fetch.
     */
    where?: AptitudeMedicaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AptitudeMedicales to fetch.
     */
    orderBy?: AptitudeMedicaleOrderByWithRelationInput | AptitudeMedicaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AptitudeMedicales.
     */
    cursor?: AptitudeMedicaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AptitudeMedicales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AptitudeMedicales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AptitudeMedicales.
     */
    distinct?: AptitudeMedicaleScalarFieldEnum | AptitudeMedicaleScalarFieldEnum[]
  }

  /**
   * AptitudeMedicale findFirstOrThrow
   */
  export type AptitudeMedicaleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AptitudeMedicale
     */
    select?: AptitudeMedicaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AptitudeMedicaleInclude<ExtArgs> | null
    /**
     * Filter, which AptitudeMedicale to fetch.
     */
    where?: AptitudeMedicaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AptitudeMedicales to fetch.
     */
    orderBy?: AptitudeMedicaleOrderByWithRelationInput | AptitudeMedicaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AptitudeMedicales.
     */
    cursor?: AptitudeMedicaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AptitudeMedicales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AptitudeMedicales.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AptitudeMedicales.
     */
    distinct?: AptitudeMedicaleScalarFieldEnum | AptitudeMedicaleScalarFieldEnum[]
  }

  /**
   * AptitudeMedicale findMany
   */
  export type AptitudeMedicaleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AptitudeMedicale
     */
    select?: AptitudeMedicaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AptitudeMedicaleInclude<ExtArgs> | null
    /**
     * Filter, which AptitudeMedicales to fetch.
     */
    where?: AptitudeMedicaleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AptitudeMedicales to fetch.
     */
    orderBy?: AptitudeMedicaleOrderByWithRelationInput | AptitudeMedicaleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AptitudeMedicales.
     */
    cursor?: AptitudeMedicaleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AptitudeMedicales from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AptitudeMedicales.
     */
    skip?: number
    distinct?: AptitudeMedicaleScalarFieldEnum | AptitudeMedicaleScalarFieldEnum[]
  }

  /**
   * AptitudeMedicale create
   */
  export type AptitudeMedicaleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AptitudeMedicale
     */
    select?: AptitudeMedicaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AptitudeMedicaleInclude<ExtArgs> | null
    /**
     * The data needed to create a AptitudeMedicale.
     */
    data: XOR<AptitudeMedicaleCreateInput, AptitudeMedicaleUncheckedCreateInput>
  }

  /**
   * AptitudeMedicale createMany
   */
  export type AptitudeMedicaleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AptitudeMedicales.
     */
    data: AptitudeMedicaleCreateManyInput | AptitudeMedicaleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AptitudeMedicale createManyAndReturn
   */
  export type AptitudeMedicaleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AptitudeMedicale
     */
    select?: AptitudeMedicaleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AptitudeMedicales.
     */
    data: AptitudeMedicaleCreateManyInput | AptitudeMedicaleCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AptitudeMedicaleIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AptitudeMedicale update
   */
  export type AptitudeMedicaleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AptitudeMedicale
     */
    select?: AptitudeMedicaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AptitudeMedicaleInclude<ExtArgs> | null
    /**
     * The data needed to update a AptitudeMedicale.
     */
    data: XOR<AptitudeMedicaleUpdateInput, AptitudeMedicaleUncheckedUpdateInput>
    /**
     * Choose, which AptitudeMedicale to update.
     */
    where: AptitudeMedicaleWhereUniqueInput
  }

  /**
   * AptitudeMedicale updateMany
   */
  export type AptitudeMedicaleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AptitudeMedicales.
     */
    data: XOR<AptitudeMedicaleUpdateManyMutationInput, AptitudeMedicaleUncheckedUpdateManyInput>
    /**
     * Filter which AptitudeMedicales to update
     */
    where?: AptitudeMedicaleWhereInput
  }

  /**
   * AptitudeMedicale upsert
   */
  export type AptitudeMedicaleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AptitudeMedicale
     */
    select?: AptitudeMedicaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AptitudeMedicaleInclude<ExtArgs> | null
    /**
     * The filter to search for the AptitudeMedicale to update in case it exists.
     */
    where: AptitudeMedicaleWhereUniqueInput
    /**
     * In case the AptitudeMedicale found by the `where` argument doesn't exist, create a new AptitudeMedicale with this data.
     */
    create: XOR<AptitudeMedicaleCreateInput, AptitudeMedicaleUncheckedCreateInput>
    /**
     * In case the AptitudeMedicale was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AptitudeMedicaleUpdateInput, AptitudeMedicaleUncheckedUpdateInput>
  }

  /**
   * AptitudeMedicale delete
   */
  export type AptitudeMedicaleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AptitudeMedicale
     */
    select?: AptitudeMedicaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AptitudeMedicaleInclude<ExtArgs> | null
    /**
     * Filter which AptitudeMedicale to delete.
     */
    where: AptitudeMedicaleWhereUniqueInput
  }

  /**
   * AptitudeMedicale deleteMany
   */
  export type AptitudeMedicaleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AptitudeMedicales to delete
     */
    where?: AptitudeMedicaleWhereInput
  }

  /**
   * AptitudeMedicale without action
   */
  export type AptitudeMedicaleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AptitudeMedicale
     */
    select?: AptitudeMedicaleSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AptitudeMedicaleInclude<ExtArgs> | null
  }


  /**
   * Model Competence
   */

  export type AggregateCompetence = {
    _count: CompetenceCountAggregateOutputType | null
    _avg: CompetenceAvgAggregateOutputType | null
    _sum: CompetenceSumAggregateOutputType | null
    _min: CompetenceMinAggregateOutputType | null
    _max: CompetenceMaxAggregateOutputType | null
  }

  export type CompetenceAvgAggregateOutputType = {
    id: number | null
    personnelId: number | null
  }

  export type CompetenceSumAggregateOutputType = {
    id: number | null
    personnelId: number | null
  }

  export type CompetenceMinAggregateOutputType = {
    id: number | null
    personnelId: number | null
    code: string | null
    libelle: string | null
    dateObtention: Date | null
    dateExpiration: Date | null
    niveau: string | null
    organisme: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompetenceMaxAggregateOutputType = {
    id: number | null
    personnelId: number | null
    code: string | null
    libelle: string | null
    dateObtention: Date | null
    dateExpiration: Date | null
    niveau: string | null
    organisme: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CompetenceCountAggregateOutputType = {
    id: number
    personnelId: number
    code: number
    libelle: number
    dateObtention: number
    dateExpiration: number
    niveau: number
    organisme: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CompetenceAvgAggregateInputType = {
    id?: true
    personnelId?: true
  }

  export type CompetenceSumAggregateInputType = {
    id?: true
    personnelId?: true
  }

  export type CompetenceMinAggregateInputType = {
    id?: true
    personnelId?: true
    code?: true
    libelle?: true
    dateObtention?: true
    dateExpiration?: true
    niveau?: true
    organisme?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompetenceMaxAggregateInputType = {
    id?: true
    personnelId?: true
    code?: true
    libelle?: true
    dateObtention?: true
    dateExpiration?: true
    niveau?: true
    organisme?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CompetenceCountAggregateInputType = {
    id?: true
    personnelId?: true
    code?: true
    libelle?: true
    dateObtention?: true
    dateExpiration?: true
    niveau?: true
    organisme?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CompetenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competence to aggregate.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Competences
    **/
    _count?: true | CompetenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompetenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompetenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompetenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompetenceMaxAggregateInputType
  }

  export type GetCompetenceAggregateType<T extends CompetenceAggregateArgs> = {
        [P in keyof T & keyof AggregateCompetence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompetence[P]>
      : GetScalarType<T[P], AggregateCompetence[P]>
  }




  export type CompetenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CompetenceWhereInput
    orderBy?: CompetenceOrderByWithAggregationInput | CompetenceOrderByWithAggregationInput[]
    by: CompetenceScalarFieldEnum[] | CompetenceScalarFieldEnum
    having?: CompetenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompetenceCountAggregateInputType | true
    _avg?: CompetenceAvgAggregateInputType
    _sum?: CompetenceSumAggregateInputType
    _min?: CompetenceMinAggregateInputType
    _max?: CompetenceMaxAggregateInputType
  }

  export type CompetenceGroupByOutputType = {
    id: number
    personnelId: number
    code: string
    libelle: string
    dateObtention: Date
    dateExpiration: Date | null
    niveau: string | null
    organisme: string | null
    createdAt: Date
    updatedAt: Date
    _count: CompetenceCountAggregateOutputType | null
    _avg: CompetenceAvgAggregateOutputType | null
    _sum: CompetenceSumAggregateOutputType | null
    _min: CompetenceMinAggregateOutputType | null
    _max: CompetenceMaxAggregateOutputType | null
  }

  type GetCompetenceGroupByPayload<T extends CompetenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompetenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompetenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompetenceGroupByOutputType[P]>
            : GetScalarType<T[P], CompetenceGroupByOutputType[P]>
        }
      >
    >


  export type CompetenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personnelId?: boolean
    code?: boolean
    libelle?: boolean
    dateObtention?: boolean
    dateExpiration?: boolean
    niveau?: boolean
    organisme?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competence"]>

  export type CompetenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personnelId?: boolean
    code?: boolean
    libelle?: boolean
    dateObtention?: boolean
    dateExpiration?: boolean
    niveau?: boolean
    organisme?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["competence"]>

  export type CompetenceSelectScalar = {
    id?: boolean
    personnelId?: boolean
    code?: boolean
    libelle?: boolean
    dateObtention?: boolean
    dateExpiration?: boolean
    niveau?: boolean
    organisme?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CompetenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }
  export type CompetenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }

  export type $CompetencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Competence"
    objects: {
      personnel: Prisma.$PersonnelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      personnelId: number
      code: string
      libelle: string
      dateObtention: Date
      dateExpiration: Date | null
      niveau: string | null
      organisme: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["competence"]>
    composites: {}
  }

  type CompetenceGetPayload<S extends boolean | null | undefined | CompetenceDefaultArgs> = $Result.GetResult<Prisma.$CompetencePayload, S>

  type CompetenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CompetenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompetenceCountAggregateInputType | true
    }

  export interface CompetenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Competence'], meta: { name: 'Competence' } }
    /**
     * Find zero or one Competence that matches the filter.
     * @param {CompetenceFindUniqueArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CompetenceFindUniqueArgs>(args: SelectSubset<T, CompetenceFindUniqueArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Competence that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CompetenceFindUniqueOrThrowArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CompetenceFindUniqueOrThrowArgs>(args: SelectSubset<T, CompetenceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Competence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindFirstArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CompetenceFindFirstArgs>(args?: SelectSubset<T, CompetenceFindFirstArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Competence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindFirstOrThrowArgs} args - Arguments to find a Competence
     * @example
     * // Get one Competence
     * const competence = await prisma.competence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CompetenceFindFirstOrThrowArgs>(args?: SelectSubset<T, CompetenceFindFirstOrThrowArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Competences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Competences
     * const competences = await prisma.competence.findMany()
     * 
     * // Get first 10 Competences
     * const competences = await prisma.competence.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const competenceWithIdOnly = await prisma.competence.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CompetenceFindManyArgs>(args?: SelectSubset<T, CompetenceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Competence.
     * @param {CompetenceCreateArgs} args - Arguments to create a Competence.
     * @example
     * // Create one Competence
     * const Competence = await prisma.competence.create({
     *   data: {
     *     // ... data to create a Competence
     *   }
     * })
     * 
     */
    create<T extends CompetenceCreateArgs>(args: SelectSubset<T, CompetenceCreateArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Competences.
     * @param {CompetenceCreateManyArgs} args - Arguments to create many Competences.
     * @example
     * // Create many Competences
     * const competence = await prisma.competence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CompetenceCreateManyArgs>(args?: SelectSubset<T, CompetenceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Competences and returns the data saved in the database.
     * @param {CompetenceCreateManyAndReturnArgs} args - Arguments to create many Competences.
     * @example
     * // Create many Competences
     * const competence = await prisma.competence.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Competences and only return the `id`
     * const competenceWithIdOnly = await prisma.competence.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CompetenceCreateManyAndReturnArgs>(args?: SelectSubset<T, CompetenceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Competence.
     * @param {CompetenceDeleteArgs} args - Arguments to delete one Competence.
     * @example
     * // Delete one Competence
     * const Competence = await prisma.competence.delete({
     *   where: {
     *     // ... filter to delete one Competence
     *   }
     * })
     * 
     */
    delete<T extends CompetenceDeleteArgs>(args: SelectSubset<T, CompetenceDeleteArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Competence.
     * @param {CompetenceUpdateArgs} args - Arguments to update one Competence.
     * @example
     * // Update one Competence
     * const competence = await prisma.competence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CompetenceUpdateArgs>(args: SelectSubset<T, CompetenceUpdateArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Competences.
     * @param {CompetenceDeleteManyArgs} args - Arguments to filter Competences to delete.
     * @example
     * // Delete a few Competences
     * const { count } = await prisma.competence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CompetenceDeleteManyArgs>(args?: SelectSubset<T, CompetenceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Competences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Competences
     * const competence = await prisma.competence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CompetenceUpdateManyArgs>(args: SelectSubset<T, CompetenceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Competence.
     * @param {CompetenceUpsertArgs} args - Arguments to update or create a Competence.
     * @example
     * // Update or create a Competence
     * const competence = await prisma.competence.upsert({
     *   create: {
     *     // ... data to create a Competence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Competence we want to update
     *   }
     * })
     */
    upsert<T extends CompetenceUpsertArgs>(args: SelectSubset<T, CompetenceUpsertArgs<ExtArgs>>): Prisma__CompetenceClient<$Result.GetResult<Prisma.$CompetencePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Competences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceCountArgs} args - Arguments to filter Competences to count.
     * @example
     * // Count the number of Competences
     * const count = await prisma.competence.count({
     *   where: {
     *     // ... the filter for the Competences we want to count
     *   }
     * })
    **/
    count<T extends CompetenceCountArgs>(
      args?: Subset<T, CompetenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompetenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Competence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompetenceAggregateArgs>(args: Subset<T, CompetenceAggregateArgs>): Prisma.PrismaPromise<GetCompetenceAggregateType<T>>

    /**
     * Group by Competence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompetenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CompetenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CompetenceGroupByArgs['orderBy'] }
        : { orderBy?: CompetenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CompetenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompetenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Competence model
   */
  readonly fields: CompetenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Competence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CompetenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    personnel<T extends PersonnelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonnelDefaultArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Competence model
   */ 
  interface CompetenceFieldRefs {
    readonly id: FieldRef<"Competence", 'Int'>
    readonly personnelId: FieldRef<"Competence", 'Int'>
    readonly code: FieldRef<"Competence", 'String'>
    readonly libelle: FieldRef<"Competence", 'String'>
    readonly dateObtention: FieldRef<"Competence", 'DateTime'>
    readonly dateExpiration: FieldRef<"Competence", 'DateTime'>
    readonly niveau: FieldRef<"Competence", 'String'>
    readonly organisme: FieldRef<"Competence", 'String'>
    readonly createdAt: FieldRef<"Competence", 'DateTime'>
    readonly updatedAt: FieldRef<"Competence", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Competence findUnique
   */
  export type CompetenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competence to fetch.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence findUniqueOrThrow
   */
  export type CompetenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competence to fetch.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence findFirst
   */
  export type CompetenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competence to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competences.
     */
    distinct?: CompetenceScalarFieldEnum | CompetenceScalarFieldEnum[]
  }

  /**
   * Competence findFirstOrThrow
   */
  export type CompetenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competence to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Competences.
     */
    distinct?: CompetenceScalarFieldEnum | CompetenceScalarFieldEnum[]
  }

  /**
   * Competence findMany
   */
  export type CompetenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter, which Competences to fetch.
     */
    where?: CompetenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Competences to fetch.
     */
    orderBy?: CompetenceOrderByWithRelationInput | CompetenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Competences.
     */
    cursor?: CompetenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Competences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Competences.
     */
    skip?: number
    distinct?: CompetenceScalarFieldEnum | CompetenceScalarFieldEnum[]
  }

  /**
   * Competence create
   */
  export type CompetenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Competence.
     */
    data: XOR<CompetenceCreateInput, CompetenceUncheckedCreateInput>
  }

  /**
   * Competence createMany
   */
  export type CompetenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Competences.
     */
    data: CompetenceCreateManyInput | CompetenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Competence createManyAndReturn
   */
  export type CompetenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Competences.
     */
    data: CompetenceCreateManyInput | CompetenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Competence update
   */
  export type CompetenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Competence.
     */
    data: XOR<CompetenceUpdateInput, CompetenceUncheckedUpdateInput>
    /**
     * Choose, which Competence to update.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence updateMany
   */
  export type CompetenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Competences.
     */
    data: XOR<CompetenceUpdateManyMutationInput, CompetenceUncheckedUpdateManyInput>
    /**
     * Filter which Competences to update
     */
    where?: CompetenceWhereInput
  }

  /**
   * Competence upsert
   */
  export type CompetenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Competence to update in case it exists.
     */
    where: CompetenceWhereUniqueInput
    /**
     * In case the Competence found by the `where` argument doesn't exist, create a new Competence with this data.
     */
    create: XOR<CompetenceCreateInput, CompetenceUncheckedCreateInput>
    /**
     * In case the Competence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CompetenceUpdateInput, CompetenceUncheckedUpdateInput>
  }

  /**
   * Competence delete
   */
  export type CompetenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
    /**
     * Filter which Competence to delete.
     */
    where: CompetenceWhereUniqueInput
  }

  /**
   * Competence deleteMany
   */
  export type CompetenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Competences to delete
     */
    where?: CompetenceWhereInput
  }

  /**
   * Competence without action
   */
  export type CompetenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Competence
     */
    select?: CompetenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CompetenceInclude<ExtArgs> | null
  }


  /**
   * Model ExportTTA
   */

  export type AggregateExportTTA = {
    _count: ExportTTACountAggregateOutputType | null
    _avg: ExportTTAAvgAggregateOutputType | null
    _sum: ExportTTASumAggregateOutputType | null
    _min: ExportTTAMinAggregateOutputType | null
    _max: ExportTTAMaxAggregateOutputType | null
  }

  export type ExportTTAAvgAggregateOutputType = {
    id: number | null
    centreId: number | null
    sessionId: number | null
    nombreLignes: number | null
    montantTotal: number | null
    validePar: number | null
  }

  export type ExportTTASumAggregateOutputType = {
    id: number | null
    centreId: number | null
    sessionId: number | null
    nombreLignes: number | null
    montantTotal: number | null
    validePar: number | null
  }

  export type ExportTTAMinAggregateOutputType = {
    id: number | null
    mois: Date | null
    centreId: number | null
    sessionId: number | null
    nombreLignes: number | null
    montantTotal: number | null
    fichierCsv: string | null
    statut: string | null
    validePar: number | null
    dateValidation: Date | null
    createdAt: Date | null
  }

  export type ExportTTAMaxAggregateOutputType = {
    id: number | null
    mois: Date | null
    centreId: number | null
    sessionId: number | null
    nombreLignes: number | null
    montantTotal: number | null
    fichierCsv: string | null
    statut: string | null
    validePar: number | null
    dateValidation: Date | null
    createdAt: Date | null
  }

  export type ExportTTACountAggregateOutputType = {
    id: number
    mois: number
    centreId: number
    sessionId: number
    nombreLignes: number
    montantTotal: number
    fichierCsv: number
    statut: number
    validePar: number
    dateValidation: number
    createdAt: number
    _all: number
  }


  export type ExportTTAAvgAggregateInputType = {
    id?: true
    centreId?: true
    sessionId?: true
    nombreLignes?: true
    montantTotal?: true
    validePar?: true
  }

  export type ExportTTASumAggregateInputType = {
    id?: true
    centreId?: true
    sessionId?: true
    nombreLignes?: true
    montantTotal?: true
    validePar?: true
  }

  export type ExportTTAMinAggregateInputType = {
    id?: true
    mois?: true
    centreId?: true
    sessionId?: true
    nombreLignes?: true
    montantTotal?: true
    fichierCsv?: true
    statut?: true
    validePar?: true
    dateValidation?: true
    createdAt?: true
  }

  export type ExportTTAMaxAggregateInputType = {
    id?: true
    mois?: true
    centreId?: true
    sessionId?: true
    nombreLignes?: true
    montantTotal?: true
    fichierCsv?: true
    statut?: true
    validePar?: true
    dateValidation?: true
    createdAt?: true
  }

  export type ExportTTACountAggregateInputType = {
    id?: true
    mois?: true
    centreId?: true
    sessionId?: true
    nombreLignes?: true
    montantTotal?: true
    fichierCsv?: true
    statut?: true
    validePar?: true
    dateValidation?: true
    createdAt?: true
    _all?: true
  }

  export type ExportTTAAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExportTTA to aggregate.
     */
    where?: ExportTTAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExportTTAS to fetch.
     */
    orderBy?: ExportTTAOrderByWithRelationInput | ExportTTAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExportTTAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExportTTAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExportTTAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExportTTAS
    **/
    _count?: true | ExportTTACountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExportTTAAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExportTTASumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExportTTAMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExportTTAMaxAggregateInputType
  }

  export type GetExportTTAAggregateType<T extends ExportTTAAggregateArgs> = {
        [P in keyof T & keyof AggregateExportTTA]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExportTTA[P]>
      : GetScalarType<T[P], AggregateExportTTA[P]>
  }




  export type ExportTTAGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExportTTAWhereInput
    orderBy?: ExportTTAOrderByWithAggregationInput | ExportTTAOrderByWithAggregationInput[]
    by: ExportTTAScalarFieldEnum[] | ExportTTAScalarFieldEnum
    having?: ExportTTAScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExportTTACountAggregateInputType | true
    _avg?: ExportTTAAvgAggregateInputType
    _sum?: ExportTTASumAggregateInputType
    _min?: ExportTTAMinAggregateInputType
    _max?: ExportTTAMaxAggregateInputType
  }

  export type ExportTTAGroupByOutputType = {
    id: number
    mois: Date
    centreId: number
    sessionId: number | null
    nombreLignes: number
    montantTotal: number
    fichierCsv: string
    statut: string
    validePar: number | null
    dateValidation: Date | null
    createdAt: Date
    _count: ExportTTACountAggregateOutputType | null
    _avg: ExportTTAAvgAggregateOutputType | null
    _sum: ExportTTASumAggregateOutputType | null
    _min: ExportTTAMinAggregateOutputType | null
    _max: ExportTTAMaxAggregateOutputType | null
  }

  type GetExportTTAGroupByPayload<T extends ExportTTAGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExportTTAGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExportTTAGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExportTTAGroupByOutputType[P]>
            : GetScalarType<T[P], ExportTTAGroupByOutputType[P]>
        }
      >
    >


  export type ExportTTASelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mois?: boolean
    centreId?: boolean
    sessionId?: boolean
    nombreLignes?: boolean
    montantTotal?: boolean
    fichierCsv?: boolean
    statut?: boolean
    validePar?: boolean
    dateValidation?: boolean
    createdAt?: boolean
    session?: boolean | ExportTTA$sessionArgs<ExtArgs>
  }, ExtArgs["result"]["exportTTA"]>

  export type ExportTTASelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    mois?: boolean
    centreId?: boolean
    sessionId?: boolean
    nombreLignes?: boolean
    montantTotal?: boolean
    fichierCsv?: boolean
    statut?: boolean
    validePar?: boolean
    dateValidation?: boolean
    createdAt?: boolean
    session?: boolean | ExportTTA$sessionArgs<ExtArgs>
  }, ExtArgs["result"]["exportTTA"]>

  export type ExportTTASelectScalar = {
    id?: boolean
    mois?: boolean
    centreId?: boolean
    sessionId?: boolean
    nombreLignes?: boolean
    montantTotal?: boolean
    fichierCsv?: boolean
    statut?: boolean
    validePar?: boolean
    dateValidation?: boolean
    createdAt?: boolean
  }

  export type ExportTTAInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ExportTTA$sessionArgs<ExtArgs>
  }
  export type ExportTTAIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    session?: boolean | ExportTTA$sessionArgs<ExtArgs>
  }

  export type $ExportTTAPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExportTTA"
    objects: {
      session: Prisma.$SessionFMPAPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      mois: Date
      centreId: number
      sessionId: number | null
      nombreLignes: number
      montantTotal: number
      fichierCsv: string
      statut: string
      validePar: number | null
      dateValidation: Date | null
      createdAt: Date
    }, ExtArgs["result"]["exportTTA"]>
    composites: {}
  }

  type ExportTTAGetPayload<S extends boolean | null | undefined | ExportTTADefaultArgs> = $Result.GetResult<Prisma.$ExportTTAPayload, S>

  type ExportTTACountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExportTTAFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExportTTACountAggregateInputType | true
    }

  export interface ExportTTADelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExportTTA'], meta: { name: 'ExportTTA' } }
    /**
     * Find zero or one ExportTTA that matches the filter.
     * @param {ExportTTAFindUniqueArgs} args - Arguments to find a ExportTTA
     * @example
     * // Get one ExportTTA
     * const exportTTA = await prisma.exportTTA.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExportTTAFindUniqueArgs>(args: SelectSubset<T, ExportTTAFindUniqueArgs<ExtArgs>>): Prisma__ExportTTAClient<$Result.GetResult<Prisma.$ExportTTAPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ExportTTA that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExportTTAFindUniqueOrThrowArgs} args - Arguments to find a ExportTTA
     * @example
     * // Get one ExportTTA
     * const exportTTA = await prisma.exportTTA.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExportTTAFindUniqueOrThrowArgs>(args: SelectSubset<T, ExportTTAFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExportTTAClient<$Result.GetResult<Prisma.$ExportTTAPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ExportTTA that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportTTAFindFirstArgs} args - Arguments to find a ExportTTA
     * @example
     * // Get one ExportTTA
     * const exportTTA = await prisma.exportTTA.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExportTTAFindFirstArgs>(args?: SelectSubset<T, ExportTTAFindFirstArgs<ExtArgs>>): Prisma__ExportTTAClient<$Result.GetResult<Prisma.$ExportTTAPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ExportTTA that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportTTAFindFirstOrThrowArgs} args - Arguments to find a ExportTTA
     * @example
     * // Get one ExportTTA
     * const exportTTA = await prisma.exportTTA.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExportTTAFindFirstOrThrowArgs>(args?: SelectSubset<T, ExportTTAFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExportTTAClient<$Result.GetResult<Prisma.$ExportTTAPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ExportTTAS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportTTAFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExportTTAS
     * const exportTTAS = await prisma.exportTTA.findMany()
     * 
     * // Get first 10 ExportTTAS
     * const exportTTAS = await prisma.exportTTA.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exportTTAWithIdOnly = await prisma.exportTTA.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExportTTAFindManyArgs>(args?: SelectSubset<T, ExportTTAFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExportTTAPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ExportTTA.
     * @param {ExportTTACreateArgs} args - Arguments to create a ExportTTA.
     * @example
     * // Create one ExportTTA
     * const ExportTTA = await prisma.exportTTA.create({
     *   data: {
     *     // ... data to create a ExportTTA
     *   }
     * })
     * 
     */
    create<T extends ExportTTACreateArgs>(args: SelectSubset<T, ExportTTACreateArgs<ExtArgs>>): Prisma__ExportTTAClient<$Result.GetResult<Prisma.$ExportTTAPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ExportTTAS.
     * @param {ExportTTACreateManyArgs} args - Arguments to create many ExportTTAS.
     * @example
     * // Create many ExportTTAS
     * const exportTTA = await prisma.exportTTA.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExportTTACreateManyArgs>(args?: SelectSubset<T, ExportTTACreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExportTTAS and returns the data saved in the database.
     * @param {ExportTTACreateManyAndReturnArgs} args - Arguments to create many ExportTTAS.
     * @example
     * // Create many ExportTTAS
     * const exportTTA = await prisma.exportTTA.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExportTTAS and only return the `id`
     * const exportTTAWithIdOnly = await prisma.exportTTA.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExportTTACreateManyAndReturnArgs>(args?: SelectSubset<T, ExportTTACreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExportTTAPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ExportTTA.
     * @param {ExportTTADeleteArgs} args - Arguments to delete one ExportTTA.
     * @example
     * // Delete one ExportTTA
     * const ExportTTA = await prisma.exportTTA.delete({
     *   where: {
     *     // ... filter to delete one ExportTTA
     *   }
     * })
     * 
     */
    delete<T extends ExportTTADeleteArgs>(args: SelectSubset<T, ExportTTADeleteArgs<ExtArgs>>): Prisma__ExportTTAClient<$Result.GetResult<Prisma.$ExportTTAPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ExportTTA.
     * @param {ExportTTAUpdateArgs} args - Arguments to update one ExportTTA.
     * @example
     * // Update one ExportTTA
     * const exportTTA = await prisma.exportTTA.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExportTTAUpdateArgs>(args: SelectSubset<T, ExportTTAUpdateArgs<ExtArgs>>): Prisma__ExportTTAClient<$Result.GetResult<Prisma.$ExportTTAPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ExportTTAS.
     * @param {ExportTTADeleteManyArgs} args - Arguments to filter ExportTTAS to delete.
     * @example
     * // Delete a few ExportTTAS
     * const { count } = await prisma.exportTTA.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExportTTADeleteManyArgs>(args?: SelectSubset<T, ExportTTADeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExportTTAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportTTAUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExportTTAS
     * const exportTTA = await prisma.exportTTA.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExportTTAUpdateManyArgs>(args: SelectSubset<T, ExportTTAUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExportTTA.
     * @param {ExportTTAUpsertArgs} args - Arguments to update or create a ExportTTA.
     * @example
     * // Update or create a ExportTTA
     * const exportTTA = await prisma.exportTTA.upsert({
     *   create: {
     *     // ... data to create a ExportTTA
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExportTTA we want to update
     *   }
     * })
     */
    upsert<T extends ExportTTAUpsertArgs>(args: SelectSubset<T, ExportTTAUpsertArgs<ExtArgs>>): Prisma__ExportTTAClient<$Result.GetResult<Prisma.$ExportTTAPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ExportTTAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportTTACountArgs} args - Arguments to filter ExportTTAS to count.
     * @example
     * // Count the number of ExportTTAS
     * const count = await prisma.exportTTA.count({
     *   where: {
     *     // ... the filter for the ExportTTAS we want to count
     *   }
     * })
    **/
    count<T extends ExportTTACountArgs>(
      args?: Subset<T, ExportTTACountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExportTTACountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExportTTA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportTTAAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExportTTAAggregateArgs>(args: Subset<T, ExportTTAAggregateArgs>): Prisma.PrismaPromise<GetExportTTAAggregateType<T>>

    /**
     * Group by ExportTTA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportTTAGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExportTTAGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExportTTAGroupByArgs['orderBy'] }
        : { orderBy?: ExportTTAGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExportTTAGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExportTTAGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExportTTA model
   */
  readonly fields: ExportTTAFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExportTTA.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExportTTAClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    session<T extends ExportTTA$sessionArgs<ExtArgs> = {}>(args?: Subset<T, ExportTTA$sessionArgs<ExtArgs>>): Prisma__SessionFMPAClient<$Result.GetResult<Prisma.$SessionFMPAPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExportTTA model
   */ 
  interface ExportTTAFieldRefs {
    readonly id: FieldRef<"ExportTTA", 'Int'>
    readonly mois: FieldRef<"ExportTTA", 'DateTime'>
    readonly centreId: FieldRef<"ExportTTA", 'Int'>
    readonly sessionId: FieldRef<"ExportTTA", 'Int'>
    readonly nombreLignes: FieldRef<"ExportTTA", 'Int'>
    readonly montantTotal: FieldRef<"ExportTTA", 'Float'>
    readonly fichierCsv: FieldRef<"ExportTTA", 'String'>
    readonly statut: FieldRef<"ExportTTA", 'String'>
    readonly validePar: FieldRef<"ExportTTA", 'Int'>
    readonly dateValidation: FieldRef<"ExportTTA", 'DateTime'>
    readonly createdAt: FieldRef<"ExportTTA", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExportTTA findUnique
   */
  export type ExportTTAFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportTTA
     */
    select?: ExportTTASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportTTAInclude<ExtArgs> | null
    /**
     * Filter, which ExportTTA to fetch.
     */
    where: ExportTTAWhereUniqueInput
  }

  /**
   * ExportTTA findUniqueOrThrow
   */
  export type ExportTTAFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportTTA
     */
    select?: ExportTTASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportTTAInclude<ExtArgs> | null
    /**
     * Filter, which ExportTTA to fetch.
     */
    where: ExportTTAWhereUniqueInput
  }

  /**
   * ExportTTA findFirst
   */
  export type ExportTTAFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportTTA
     */
    select?: ExportTTASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportTTAInclude<ExtArgs> | null
    /**
     * Filter, which ExportTTA to fetch.
     */
    where?: ExportTTAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExportTTAS to fetch.
     */
    orderBy?: ExportTTAOrderByWithRelationInput | ExportTTAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExportTTAS.
     */
    cursor?: ExportTTAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExportTTAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExportTTAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExportTTAS.
     */
    distinct?: ExportTTAScalarFieldEnum | ExportTTAScalarFieldEnum[]
  }

  /**
   * ExportTTA findFirstOrThrow
   */
  export type ExportTTAFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportTTA
     */
    select?: ExportTTASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportTTAInclude<ExtArgs> | null
    /**
     * Filter, which ExportTTA to fetch.
     */
    where?: ExportTTAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExportTTAS to fetch.
     */
    orderBy?: ExportTTAOrderByWithRelationInput | ExportTTAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExportTTAS.
     */
    cursor?: ExportTTAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExportTTAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExportTTAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExportTTAS.
     */
    distinct?: ExportTTAScalarFieldEnum | ExportTTAScalarFieldEnum[]
  }

  /**
   * ExportTTA findMany
   */
  export type ExportTTAFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportTTA
     */
    select?: ExportTTASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportTTAInclude<ExtArgs> | null
    /**
     * Filter, which ExportTTAS to fetch.
     */
    where?: ExportTTAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExportTTAS to fetch.
     */
    orderBy?: ExportTTAOrderByWithRelationInput | ExportTTAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExportTTAS.
     */
    cursor?: ExportTTAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExportTTAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExportTTAS.
     */
    skip?: number
    distinct?: ExportTTAScalarFieldEnum | ExportTTAScalarFieldEnum[]
  }

  /**
   * ExportTTA create
   */
  export type ExportTTACreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportTTA
     */
    select?: ExportTTASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportTTAInclude<ExtArgs> | null
    /**
     * The data needed to create a ExportTTA.
     */
    data: XOR<ExportTTACreateInput, ExportTTAUncheckedCreateInput>
  }

  /**
   * ExportTTA createMany
   */
  export type ExportTTACreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExportTTAS.
     */
    data: ExportTTACreateManyInput | ExportTTACreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExportTTA createManyAndReturn
   */
  export type ExportTTACreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportTTA
     */
    select?: ExportTTASelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ExportTTAS.
     */
    data: ExportTTACreateManyInput | ExportTTACreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportTTAIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExportTTA update
   */
  export type ExportTTAUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportTTA
     */
    select?: ExportTTASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportTTAInclude<ExtArgs> | null
    /**
     * The data needed to update a ExportTTA.
     */
    data: XOR<ExportTTAUpdateInput, ExportTTAUncheckedUpdateInput>
    /**
     * Choose, which ExportTTA to update.
     */
    where: ExportTTAWhereUniqueInput
  }

  /**
   * ExportTTA updateMany
   */
  export type ExportTTAUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExportTTAS.
     */
    data: XOR<ExportTTAUpdateManyMutationInput, ExportTTAUncheckedUpdateManyInput>
    /**
     * Filter which ExportTTAS to update
     */
    where?: ExportTTAWhereInput
  }

  /**
   * ExportTTA upsert
   */
  export type ExportTTAUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportTTA
     */
    select?: ExportTTASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportTTAInclude<ExtArgs> | null
    /**
     * The filter to search for the ExportTTA to update in case it exists.
     */
    where: ExportTTAWhereUniqueInput
    /**
     * In case the ExportTTA found by the `where` argument doesn't exist, create a new ExportTTA with this data.
     */
    create: XOR<ExportTTACreateInput, ExportTTAUncheckedCreateInput>
    /**
     * In case the ExportTTA was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExportTTAUpdateInput, ExportTTAUncheckedUpdateInput>
  }

  /**
   * ExportTTA delete
   */
  export type ExportTTADeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportTTA
     */
    select?: ExportTTASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportTTAInclude<ExtArgs> | null
    /**
     * Filter which ExportTTA to delete.
     */
    where: ExportTTAWhereUniqueInput
  }

  /**
   * ExportTTA deleteMany
   */
  export type ExportTTADeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExportTTAS to delete
     */
    where?: ExportTTAWhereInput
  }

  /**
   * ExportTTA.session
   */
  export type ExportTTA$sessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SessionFMPA
     */
    select?: SessionFMPASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionFMPAInclude<ExtArgs> | null
    where?: SessionFMPAWhereInput
  }

  /**
   * ExportTTA without action
   */
  export type ExportTTADefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportTTA
     */
    select?: ExportTTASelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportTTAInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    personnelId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    personnelId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    personnelId: number | null
    type: string | null
    sujet: string | null
    message: string | null
    lu: boolean | null
    dateLecture: Date | null
    createdAt: Date | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    personnelId: number | null
    type: string | null
    sujet: string | null
    message: string | null
    lu: boolean | null
    dateLecture: Date | null
    createdAt: Date | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    personnelId: number
    type: number
    sujet: number
    message: number
    lu: number
    dateLecture: number
    createdAt: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    personnelId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    personnelId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    personnelId?: true
    type?: true
    sujet?: true
    message?: true
    lu?: true
    dateLecture?: true
    createdAt?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    personnelId?: true
    type?: true
    sujet?: true
    message?: true
    lu?: true
    dateLecture?: true
    createdAt?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    personnelId?: true
    type?: true
    sujet?: true
    message?: true
    lu?: true
    dateLecture?: true
    createdAt?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    personnelId: number
    type: string
    sujet: string
    message: string
    lu: boolean
    dateLecture: Date | null
    createdAt: Date
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personnelId?: boolean
    type?: boolean
    sujet?: boolean
    message?: boolean
    lu?: boolean
    dateLecture?: boolean
    createdAt?: boolean
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    personnelId?: boolean
    type?: boolean
    sujet?: boolean
    message?: boolean
    lu?: boolean
    dateLecture?: boolean
    createdAt?: boolean
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    personnelId?: boolean
    type?: boolean
    sujet?: boolean
    message?: boolean
    lu?: boolean
    dateLecture?: boolean
    createdAt?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }
  export type NotificationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    personnel?: boolean | PersonnelDefaultArgs<ExtArgs>
  }

  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      personnel: Prisma.$PersonnelPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      personnelId: number
      type: string
      sujet: string
      message: string
      lu: boolean
      dateLecture: Date | null
      createdAt: Date
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }

  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NotificationFindUniqueArgs>(args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs>(args: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NotificationFindFirstArgs>(args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs>(args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NotificationFindManyArgs>(args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
     */
    create<T extends NotificationCreateArgs>(args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Notifications.
     * @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NotificationCreateManyArgs>(args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notifications and returns the data saved in the database.
     * @param {NotificationCreateManyAndReturnArgs} args - Arguments to create many Notifications.
     * @example
     * // Create many Notifications
     * const notification = await prisma.notification.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notifications and only return the `id`
     * const notificationWithIdOnly = await prisma.notification.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NotificationCreateManyAndReturnArgs>(args?: SelectSubset<T, NotificationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
     */
    delete<T extends NotificationDeleteArgs>(args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NotificationUpdateArgs>(args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NotificationDeleteManyArgs>(args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NotificationUpdateManyArgs>(args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
     */
    upsert<T extends NotificationUpsertArgs>(args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    personnel<T extends PersonnelDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PersonnelDefaultArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly personnelId: FieldRef<"Notification", 'Int'>
    readonly type: FieldRef<"Notification", 'String'>
    readonly sujet: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly lu: FieldRef<"Notification", 'Boolean'>
    readonly dateLecture: FieldRef<"Notification", 'DateTime'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification createManyAndReturn
   */
  export type NotificationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model AuditLog
   */

  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogAvgAggregateOutputType = {
    userId: number | null
  }

  export type AuditLogSumAggregateOutputType = {
    userId: number | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    userId: number | null
    action: string | null
    entity: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    userId: number | null
    action: string | null
    entity: string | null
    entityId: string | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    userId: number
    action: number
    entity: number
    entityId: number
    oldValues: number
    newValues: number
    ipAddress: number
    userAgent: number
    createdAt: number
    _all: number
  }


  export type AuditLogAvgAggregateInputType = {
    userId?: true
  }

  export type AuditLogSumAggregateInputType = {
    userId?: true
  }

  export type AuditLogMinAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    userId?: true
    action?: true
    entity?: true
    entityId?: true
    oldValues?: true
    newValues?: true
    ipAddress?: true
    userAgent?: true
    createdAt?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AuditLogAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AuditLogSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: AuditLogOrderByWithAggregationInput | AuditLogOrderByWithAggregationInput[]
    by: AuditLogScalarFieldEnum[] | AuditLogScalarFieldEnum
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _avg?: AuditLogAvgAggregateInputType
    _sum?: AuditLogSumAggregateInputType
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }

  export type AuditLogGroupByOutputType = {
    id: string
    userId: number | null
    action: string
    entity: string
    entityId: string | null
    oldValues: JsonValue | null
    newValues: JsonValue | null
    ipAddress: string | null
    userAgent: string | null
    createdAt: Date
    _count: AuditLogCountAggregateOutputType | null
    _avg: AuditLogAvgAggregateOutputType | null
    _sum: AuditLogSumAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    userId?: boolean
    action?: boolean
    entity?: boolean
    entityId?: boolean
    oldValues?: boolean
    newValues?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    createdAt?: boolean
  }

  export type AuditLogInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }
  export type AuditLogIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AuditLog$userArgs<ExtArgs>
  }

  export type $AuditLogPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AuditLog"
    objects: {
      user: Prisma.$PersonnelPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: number | null
      action: string
      entity: string
      entityId: string | null
      oldValues: Prisma.JsonValue | null
      newValues: Prisma.JsonValue | null
      ipAddress: string | null
      userAgent: string | null
      createdAt: Date
    }, ExtArgs["result"]["auditLog"]>
    composites: {}
  }

  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogDefaultArgs> = $Result.GetResult<Prisma.$AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AuditLogFindUniqueArgs>(args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs>(args: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AuditLogFindFirstArgs>(args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs>(args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AuditLogFindManyArgs>(args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
     */
    create<T extends AuditLogCreateArgs>(args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AuditLogs.
     * @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AuditLogCreateManyArgs>(args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AuditLogs and returns the data saved in the database.
     * @param {AuditLogCreateManyAndReturnArgs} args - Arguments to create many AuditLogs.
     * @example
     * // Create many AuditLogs
     * const auditLog = await prisma.auditLog.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AuditLogs and only return the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AuditLogCreateManyAndReturnArgs>(args?: SelectSubset<T, AuditLogCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
     */
    delete<T extends AuditLogDeleteArgs>(args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AuditLogUpdateArgs>(args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AuditLogDeleteManyArgs>(args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AuditLogUpdateManyArgs>(args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
     */
    upsert<T extends AuditLogUpsertArgs>(args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>): Prisma__AuditLogClient<$Result.GetResult<Prisma.$AuditLogPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AuditLog model
   */
  readonly fields: AuditLogFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AuditLog$userArgs<ExtArgs> = {}>(args?: Subset<T, AuditLog$userArgs<ExtArgs>>): Prisma__PersonnelClient<$Result.GetResult<Prisma.$PersonnelPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AuditLog model
   */ 
  interface AuditLogFieldRefs {
    readonly id: FieldRef<"AuditLog", 'String'>
    readonly userId: FieldRef<"AuditLog", 'Int'>
    readonly action: FieldRef<"AuditLog", 'String'>
    readonly entity: FieldRef<"AuditLog", 'String'>
    readonly entityId: FieldRef<"AuditLog", 'String'>
    readonly oldValues: FieldRef<"AuditLog", 'Json'>
    readonly newValues: FieldRef<"AuditLog", 'Json'>
    readonly ipAddress: FieldRef<"AuditLog", 'String'>
    readonly userAgent: FieldRef<"AuditLog", 'String'>
    readonly createdAt: FieldRef<"AuditLog", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AuditLog findUnique
   */
  export type AuditLogFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findFirst
   */
  export type AuditLogFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: AuditLogOrderByWithRelationInput | AuditLogOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: AuditLogScalarFieldEnum | AuditLogScalarFieldEnum[]
  }

  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }

  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AuditLog createManyAndReturn
   */
  export type AuditLogCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AuditLogs.
     */
    data: AuditLogCreateManyInput | AuditLogCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }

  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }

  /**
   * AuditLog.user
   */
  export type AuditLog$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Personnel
     */
    select?: PersonnelSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PersonnelInclude<ExtArgs> | null
    where?: PersonnelWhereInput
  }

  /**
   * AuditLog without action
   */
  export type AuditLogDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AuditLogInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PersonnelScalarFieldEnum: {
    id: 'id',
    matricule: 'matricule',
    nom: 'nom',
    prenom: 'prenom',
    email: 'email',
    telephone: 'telephone',
    password: 'password',
    grade: 'grade',
    centreId: 'centreId',
    categorie: 'categorie',
    statut: 'statut',
    roles: 'roles',
    refreshToken: 'refreshToken',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PersonnelScalarFieldEnum = (typeof PersonnelScalarFieldEnum)[keyof typeof PersonnelScalarFieldEnum]


  export const CentreScalarFieldEnum: {
    id: 'id',
    code: 'code',
    nom: 'nom',
    type: 'type',
    adresse: 'adresse',
    telephone: 'telephone',
    email: 'email',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CentreScalarFieldEnum = (typeof CentreScalarFieldEnum)[keyof typeof CentreScalarFieldEnum]


  export const TypeFMPAScalarFieldEnum: {
    id: 'id',
    code: 'code',
    libelle: 'libelle',
    dureeHeures: 'dureeHeures',
    tauxHoraire: 'tauxHoraire',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TypeFMPAScalarFieldEnum = (typeof TypeFMPAScalarFieldEnum)[keyof typeof TypeFMPAScalarFieldEnum]


  export const SessionFMPAScalarFieldEnum: {
    id: 'id',
    typeFMPAId: 'typeFMPAId',
    dateDebut: 'dateDebut',
    dateFin: 'dateFin',
    lieu: 'lieu',
    placesMax: 'placesMax',
    placesOccupees: 'placesOccupees',
    formateurPrincipalId: 'formateurPrincipalId',
    centreId: 'centreId',
    statut: 'statut',
    codeTTA: 'codeTTA',
    tauxHoraire: 'tauxHoraire',
    observations: 'observations',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type SessionFMPAScalarFieldEnum = (typeof SessionFMPAScalarFieldEnum)[keyof typeof SessionFMPAScalarFieldEnum]


  export const InscriptionFMPAScalarFieldEnum: {
    id: 'id',
    sessionId: 'sessionId',
    personnelId: 'personnelId',
    statut: 'statut',
    present: 'present',
    signatureElectronique: 'signatureElectronique',
    dateSignature: 'dateSignature',
    heuresValidees: 'heuresValidees',
    montantTTA: 'montantTTA',
    dateInscription: 'dateInscription',
    dateModification: 'dateModification'
  };

  export type InscriptionFMPAScalarFieldEnum = (typeof InscriptionFMPAScalarFieldEnum)[keyof typeof InscriptionFMPAScalarFieldEnum]


  export const SignatureFMPAScalarFieldEnum: {
    id: 'id',
    sessionFMPAId: 'sessionFMPAId',
    personnelId: 'personnelId',
    type: 'type',
    signature: 'signature',
    dateSignature: 'dateSignature'
  };

  export type SignatureFMPAScalarFieldEnum = (typeof SignatureFMPAScalarFieldEnum)[keyof typeof SignatureFMPAScalarFieldEnum]


  export const AptitudeMedicaleScalarFieldEnum: {
    id: 'id',
    personnelId: 'personnelId',
    statut: 'statut',
    dateVisite: 'dateVisite',
    dateProchainExamen: 'dateProchainExamen',
    restrictions: 'restrictions',
    medecin: 'medecin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AptitudeMedicaleScalarFieldEnum = (typeof AptitudeMedicaleScalarFieldEnum)[keyof typeof AptitudeMedicaleScalarFieldEnum]


  export const CompetenceScalarFieldEnum: {
    id: 'id',
    personnelId: 'personnelId',
    code: 'code',
    libelle: 'libelle',
    dateObtention: 'dateObtention',
    dateExpiration: 'dateExpiration',
    niveau: 'niveau',
    organisme: 'organisme',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CompetenceScalarFieldEnum = (typeof CompetenceScalarFieldEnum)[keyof typeof CompetenceScalarFieldEnum]


  export const ExportTTAScalarFieldEnum: {
    id: 'id',
    mois: 'mois',
    centreId: 'centreId',
    sessionId: 'sessionId',
    nombreLignes: 'nombreLignes',
    montantTotal: 'montantTotal',
    fichierCsv: 'fichierCsv',
    statut: 'statut',
    validePar: 'validePar',
    dateValidation: 'dateValidation',
    createdAt: 'createdAt'
  };

  export type ExportTTAScalarFieldEnum = (typeof ExportTTAScalarFieldEnum)[keyof typeof ExportTTAScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    personnelId: 'personnelId',
    type: 'type',
    sujet: 'sujet',
    message: 'message',
    lu: 'lu',
    dateLecture: 'dateLecture',
    createdAt: 'createdAt'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    action: 'action',
    entity: 'entity',
    entityId: 'entityId',
    oldValues: 'oldValues',
    newValues: 'newValues',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    createdAt: 'createdAt'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Categorie'
   */
  export type EnumCategorieFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Categorie'>
    


  /**
   * Reference to a field of type 'Categorie[]'
   */
  export type ListEnumCategorieFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Categorie[]'>
    


  /**
   * Reference to a field of type 'StatutPersonnel'
   */
  export type EnumStatutPersonnelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutPersonnel'>
    


  /**
   * Reference to a field of type 'StatutPersonnel[]'
   */
  export type ListEnumStatutPersonnelFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutPersonnel[]'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'StatutSession'
   */
  export type EnumStatutSessionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutSession'>
    


  /**
   * Reference to a field of type 'StatutSession[]'
   */
  export type ListEnumStatutSessionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutSession[]'>
    


  /**
   * Reference to a field of type 'StatutInscription'
   */
  export type EnumStatutInscriptionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutInscription'>
    


  /**
   * Reference to a field of type 'StatutInscription[]'
   */
  export type ListEnumStatutInscriptionFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutInscription[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'StatutAptitude'
   */
  export type EnumStatutAptitudeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutAptitude'>
    


  /**
   * Reference to a field of type 'StatutAptitude[]'
   */
  export type ListEnumStatutAptitudeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'StatutAptitude[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    
  /**
   * Deep Input Types
   */


  export type PersonnelWhereInput = {
    AND?: PersonnelWhereInput | PersonnelWhereInput[]
    OR?: PersonnelWhereInput[]
    NOT?: PersonnelWhereInput | PersonnelWhereInput[]
    id?: IntFilter<"Personnel"> | number
    matricule?: StringFilter<"Personnel"> | string
    nom?: StringFilter<"Personnel"> | string
    prenom?: StringFilter<"Personnel"> | string
    email?: StringFilter<"Personnel"> | string
    telephone?: StringNullableFilter<"Personnel"> | string | null
    password?: StringFilter<"Personnel"> | string
    grade?: StringFilter<"Personnel"> | string
    centreId?: IntFilter<"Personnel"> | number
    categorie?: EnumCategorieFilter<"Personnel"> | $Enums.Categorie
    statut?: EnumStatutPersonnelFilter<"Personnel"> | $Enums.StatutPersonnel
    roles?: EnumRoleNullableListFilter<"Personnel">
    refreshToken?: StringNullableFilter<"Personnel"> | string | null
    createdAt?: DateTimeFilter<"Personnel"> | Date | string
    updatedAt?: DateTimeFilter<"Personnel"> | Date | string
    centre?: XOR<CentreRelationFilter, CentreWhereInput>
    aptitudeMedicale?: XOR<AptitudeMedicaleNullableRelationFilter, AptitudeMedicaleWhereInput> | null
    competences?: CompetenceListRelationFilter
    inscriptions?: InscriptionFMPAListRelationFilter
    sessionsFormateur?: SessionFMPAListRelationFilter
    signatures?: SignatureFMPAListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }

  export type PersonnelOrderByWithRelationInput = {
    id?: SortOrder
    matricule?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    telephone?: SortOrderInput | SortOrder
    password?: SortOrder
    grade?: SortOrder
    centreId?: SortOrder
    categorie?: SortOrder
    statut?: SortOrder
    roles?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    centre?: CentreOrderByWithRelationInput
    aptitudeMedicale?: AptitudeMedicaleOrderByWithRelationInput
    competences?: CompetenceOrderByRelationAggregateInput
    inscriptions?: InscriptionFMPAOrderByRelationAggregateInput
    sessionsFormateur?: SessionFMPAOrderByRelationAggregateInput
    signatures?: SignatureFMPAOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    auditLogs?: AuditLogOrderByRelationAggregateInput
  }

  export type PersonnelWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    matricule?: string
    email?: string
    AND?: PersonnelWhereInput | PersonnelWhereInput[]
    OR?: PersonnelWhereInput[]
    NOT?: PersonnelWhereInput | PersonnelWhereInput[]
    nom?: StringFilter<"Personnel"> | string
    prenom?: StringFilter<"Personnel"> | string
    telephone?: StringNullableFilter<"Personnel"> | string | null
    password?: StringFilter<"Personnel"> | string
    grade?: StringFilter<"Personnel"> | string
    centreId?: IntFilter<"Personnel"> | number
    categorie?: EnumCategorieFilter<"Personnel"> | $Enums.Categorie
    statut?: EnumStatutPersonnelFilter<"Personnel"> | $Enums.StatutPersonnel
    roles?: EnumRoleNullableListFilter<"Personnel">
    refreshToken?: StringNullableFilter<"Personnel"> | string | null
    createdAt?: DateTimeFilter<"Personnel"> | Date | string
    updatedAt?: DateTimeFilter<"Personnel"> | Date | string
    centre?: XOR<CentreRelationFilter, CentreWhereInput>
    aptitudeMedicale?: XOR<AptitudeMedicaleNullableRelationFilter, AptitudeMedicaleWhereInput> | null
    competences?: CompetenceListRelationFilter
    inscriptions?: InscriptionFMPAListRelationFilter
    sessionsFormateur?: SessionFMPAListRelationFilter
    signatures?: SignatureFMPAListRelationFilter
    notifications?: NotificationListRelationFilter
    auditLogs?: AuditLogListRelationFilter
  }, "id" | "matricule" | "email">

  export type PersonnelOrderByWithAggregationInput = {
    id?: SortOrder
    matricule?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    telephone?: SortOrderInput | SortOrder
    password?: SortOrder
    grade?: SortOrder
    centreId?: SortOrder
    categorie?: SortOrder
    statut?: SortOrder
    roles?: SortOrder
    refreshToken?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PersonnelCountOrderByAggregateInput
    _avg?: PersonnelAvgOrderByAggregateInput
    _max?: PersonnelMaxOrderByAggregateInput
    _min?: PersonnelMinOrderByAggregateInput
    _sum?: PersonnelSumOrderByAggregateInput
  }

  export type PersonnelScalarWhereWithAggregatesInput = {
    AND?: PersonnelScalarWhereWithAggregatesInput | PersonnelScalarWhereWithAggregatesInput[]
    OR?: PersonnelScalarWhereWithAggregatesInput[]
    NOT?: PersonnelScalarWhereWithAggregatesInput | PersonnelScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Personnel"> | number
    matricule?: StringWithAggregatesFilter<"Personnel"> | string
    nom?: StringWithAggregatesFilter<"Personnel"> | string
    prenom?: StringWithAggregatesFilter<"Personnel"> | string
    email?: StringWithAggregatesFilter<"Personnel"> | string
    telephone?: StringNullableWithAggregatesFilter<"Personnel"> | string | null
    password?: StringWithAggregatesFilter<"Personnel"> | string
    grade?: StringWithAggregatesFilter<"Personnel"> | string
    centreId?: IntWithAggregatesFilter<"Personnel"> | number
    categorie?: EnumCategorieWithAggregatesFilter<"Personnel"> | $Enums.Categorie
    statut?: EnumStatutPersonnelWithAggregatesFilter<"Personnel"> | $Enums.StatutPersonnel
    roles?: EnumRoleNullableListFilter<"Personnel">
    refreshToken?: StringNullableWithAggregatesFilter<"Personnel"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Personnel"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Personnel"> | Date | string
  }

  export type CentreWhereInput = {
    AND?: CentreWhereInput | CentreWhereInput[]
    OR?: CentreWhereInput[]
    NOT?: CentreWhereInput | CentreWhereInput[]
    id?: IntFilter<"Centre"> | number
    code?: StringFilter<"Centre"> | string
    nom?: StringFilter<"Centre"> | string
    type?: StringFilter<"Centre"> | string
    adresse?: StringNullableFilter<"Centre"> | string | null
    telephone?: StringNullableFilter<"Centre"> | string | null
    email?: StringNullableFilter<"Centre"> | string | null
    createdAt?: DateTimeFilter<"Centre"> | Date | string
    updatedAt?: DateTimeFilter<"Centre"> | Date | string
    personnels?: PersonnelListRelationFilter
    sessions?: SessionFMPAListRelationFilter
  }

  export type CentreOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    nom?: SortOrder
    type?: SortOrder
    adresse?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    personnels?: PersonnelOrderByRelationAggregateInput
    sessions?: SessionFMPAOrderByRelationAggregateInput
  }

  export type CentreWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: CentreWhereInput | CentreWhereInput[]
    OR?: CentreWhereInput[]
    NOT?: CentreWhereInput | CentreWhereInput[]
    nom?: StringFilter<"Centre"> | string
    type?: StringFilter<"Centre"> | string
    adresse?: StringNullableFilter<"Centre"> | string | null
    telephone?: StringNullableFilter<"Centre"> | string | null
    email?: StringNullableFilter<"Centre"> | string | null
    createdAt?: DateTimeFilter<"Centre"> | Date | string
    updatedAt?: DateTimeFilter<"Centre"> | Date | string
    personnels?: PersonnelListRelationFilter
    sessions?: SessionFMPAListRelationFilter
  }, "id" | "code">

  export type CentreOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    nom?: SortOrder
    type?: SortOrder
    adresse?: SortOrderInput | SortOrder
    telephone?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CentreCountOrderByAggregateInput
    _avg?: CentreAvgOrderByAggregateInput
    _max?: CentreMaxOrderByAggregateInput
    _min?: CentreMinOrderByAggregateInput
    _sum?: CentreSumOrderByAggregateInput
  }

  export type CentreScalarWhereWithAggregatesInput = {
    AND?: CentreScalarWhereWithAggregatesInput | CentreScalarWhereWithAggregatesInput[]
    OR?: CentreScalarWhereWithAggregatesInput[]
    NOT?: CentreScalarWhereWithAggregatesInput | CentreScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Centre"> | number
    code?: StringWithAggregatesFilter<"Centre"> | string
    nom?: StringWithAggregatesFilter<"Centre"> | string
    type?: StringWithAggregatesFilter<"Centre"> | string
    adresse?: StringNullableWithAggregatesFilter<"Centre"> | string | null
    telephone?: StringNullableWithAggregatesFilter<"Centre"> | string | null
    email?: StringNullableWithAggregatesFilter<"Centre"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Centre"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Centre"> | Date | string
  }

  export type TypeFMPAWhereInput = {
    AND?: TypeFMPAWhereInput | TypeFMPAWhereInput[]
    OR?: TypeFMPAWhereInput[]
    NOT?: TypeFMPAWhereInput | TypeFMPAWhereInput[]
    id?: IntFilter<"TypeFMPA"> | number
    code?: StringFilter<"TypeFMPA"> | string
    libelle?: StringFilter<"TypeFMPA"> | string
    dureeHeures?: FloatFilter<"TypeFMPA"> | number
    tauxHoraire?: FloatFilter<"TypeFMPA"> | number
    description?: StringNullableFilter<"TypeFMPA"> | string | null
    createdAt?: DateTimeFilter<"TypeFMPA"> | Date | string
    updatedAt?: DateTimeFilter<"TypeFMPA"> | Date | string
    sessions?: SessionFMPAListRelationFilter
  }

  export type TypeFMPAOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    libelle?: SortOrder
    dureeHeures?: SortOrder
    tauxHoraire?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    sessions?: SessionFMPAOrderByRelationAggregateInput
  }

  export type TypeFMPAWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: TypeFMPAWhereInput | TypeFMPAWhereInput[]
    OR?: TypeFMPAWhereInput[]
    NOT?: TypeFMPAWhereInput | TypeFMPAWhereInput[]
    libelle?: StringFilter<"TypeFMPA"> | string
    dureeHeures?: FloatFilter<"TypeFMPA"> | number
    tauxHoraire?: FloatFilter<"TypeFMPA"> | number
    description?: StringNullableFilter<"TypeFMPA"> | string | null
    createdAt?: DateTimeFilter<"TypeFMPA"> | Date | string
    updatedAt?: DateTimeFilter<"TypeFMPA"> | Date | string
    sessions?: SessionFMPAListRelationFilter
  }, "id" | "code">

  export type TypeFMPAOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    libelle?: SortOrder
    dureeHeures?: SortOrder
    tauxHoraire?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TypeFMPACountOrderByAggregateInput
    _avg?: TypeFMPAAvgOrderByAggregateInput
    _max?: TypeFMPAMaxOrderByAggregateInput
    _min?: TypeFMPAMinOrderByAggregateInput
    _sum?: TypeFMPASumOrderByAggregateInput
  }

  export type TypeFMPAScalarWhereWithAggregatesInput = {
    AND?: TypeFMPAScalarWhereWithAggregatesInput | TypeFMPAScalarWhereWithAggregatesInput[]
    OR?: TypeFMPAScalarWhereWithAggregatesInput[]
    NOT?: TypeFMPAScalarWhereWithAggregatesInput | TypeFMPAScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TypeFMPA"> | number
    code?: StringWithAggregatesFilter<"TypeFMPA"> | string
    libelle?: StringWithAggregatesFilter<"TypeFMPA"> | string
    dureeHeures?: FloatWithAggregatesFilter<"TypeFMPA"> | number
    tauxHoraire?: FloatWithAggregatesFilter<"TypeFMPA"> | number
    description?: StringNullableWithAggregatesFilter<"TypeFMPA"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TypeFMPA"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"TypeFMPA"> | Date | string
  }

  export type SessionFMPAWhereInput = {
    AND?: SessionFMPAWhereInput | SessionFMPAWhereInput[]
    OR?: SessionFMPAWhereInput[]
    NOT?: SessionFMPAWhereInput | SessionFMPAWhereInput[]
    id?: IntFilter<"SessionFMPA"> | number
    typeFMPAId?: IntFilter<"SessionFMPA"> | number
    dateDebut?: DateTimeFilter<"SessionFMPA"> | Date | string
    dateFin?: DateTimeFilter<"SessionFMPA"> | Date | string
    lieu?: StringFilter<"SessionFMPA"> | string
    placesMax?: IntFilter<"SessionFMPA"> | number
    placesOccupees?: IntFilter<"SessionFMPA"> | number
    formateurPrincipalId?: IntFilter<"SessionFMPA"> | number
    centreId?: IntFilter<"SessionFMPA"> | number
    statut?: EnumStatutSessionFilter<"SessionFMPA"> | $Enums.StatutSession
    codeTTA?: StringFilter<"SessionFMPA"> | string
    tauxHoraire?: FloatFilter<"SessionFMPA"> | number
    observations?: StringNullableFilter<"SessionFMPA"> | string | null
    createdAt?: DateTimeFilter<"SessionFMPA"> | Date | string
    updatedAt?: DateTimeFilter<"SessionFMPA"> | Date | string
    typeFMPA?: XOR<TypeFMPARelationFilter, TypeFMPAWhereInput>
    formateurPrincipal?: XOR<PersonnelRelationFilter, PersonnelWhereInput>
    centre?: XOR<CentreRelationFilter, CentreWhereInput>
    inscriptions?: InscriptionFMPAListRelationFilter
    signatures?: SignatureFMPAListRelationFilter
    exportsTTA?: ExportTTAListRelationFilter
  }

  export type SessionFMPAOrderByWithRelationInput = {
    id?: SortOrder
    typeFMPAId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    lieu?: SortOrder
    placesMax?: SortOrder
    placesOccupees?: SortOrder
    formateurPrincipalId?: SortOrder
    centreId?: SortOrder
    statut?: SortOrder
    codeTTA?: SortOrder
    tauxHoraire?: SortOrder
    observations?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    typeFMPA?: TypeFMPAOrderByWithRelationInput
    formateurPrincipal?: PersonnelOrderByWithRelationInput
    centre?: CentreOrderByWithRelationInput
    inscriptions?: InscriptionFMPAOrderByRelationAggregateInput
    signatures?: SignatureFMPAOrderByRelationAggregateInput
    exportsTTA?: ExportTTAOrderByRelationAggregateInput
  }

  export type SessionFMPAWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: SessionFMPAWhereInput | SessionFMPAWhereInput[]
    OR?: SessionFMPAWhereInput[]
    NOT?: SessionFMPAWhereInput | SessionFMPAWhereInput[]
    typeFMPAId?: IntFilter<"SessionFMPA"> | number
    dateDebut?: DateTimeFilter<"SessionFMPA"> | Date | string
    dateFin?: DateTimeFilter<"SessionFMPA"> | Date | string
    lieu?: StringFilter<"SessionFMPA"> | string
    placesMax?: IntFilter<"SessionFMPA"> | number
    placesOccupees?: IntFilter<"SessionFMPA"> | number
    formateurPrincipalId?: IntFilter<"SessionFMPA"> | number
    centreId?: IntFilter<"SessionFMPA"> | number
    statut?: EnumStatutSessionFilter<"SessionFMPA"> | $Enums.StatutSession
    codeTTA?: StringFilter<"SessionFMPA"> | string
    tauxHoraire?: FloatFilter<"SessionFMPA"> | number
    observations?: StringNullableFilter<"SessionFMPA"> | string | null
    createdAt?: DateTimeFilter<"SessionFMPA"> | Date | string
    updatedAt?: DateTimeFilter<"SessionFMPA"> | Date | string
    typeFMPA?: XOR<TypeFMPARelationFilter, TypeFMPAWhereInput>
    formateurPrincipal?: XOR<PersonnelRelationFilter, PersonnelWhereInput>
    centre?: XOR<CentreRelationFilter, CentreWhereInput>
    inscriptions?: InscriptionFMPAListRelationFilter
    signatures?: SignatureFMPAListRelationFilter
    exportsTTA?: ExportTTAListRelationFilter
  }, "id">

  export type SessionFMPAOrderByWithAggregationInput = {
    id?: SortOrder
    typeFMPAId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    lieu?: SortOrder
    placesMax?: SortOrder
    placesOccupees?: SortOrder
    formateurPrincipalId?: SortOrder
    centreId?: SortOrder
    statut?: SortOrder
    codeTTA?: SortOrder
    tauxHoraire?: SortOrder
    observations?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: SessionFMPACountOrderByAggregateInput
    _avg?: SessionFMPAAvgOrderByAggregateInput
    _max?: SessionFMPAMaxOrderByAggregateInput
    _min?: SessionFMPAMinOrderByAggregateInput
    _sum?: SessionFMPASumOrderByAggregateInput
  }

  export type SessionFMPAScalarWhereWithAggregatesInput = {
    AND?: SessionFMPAScalarWhereWithAggregatesInput | SessionFMPAScalarWhereWithAggregatesInput[]
    OR?: SessionFMPAScalarWhereWithAggregatesInput[]
    NOT?: SessionFMPAScalarWhereWithAggregatesInput | SessionFMPAScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"SessionFMPA"> | number
    typeFMPAId?: IntWithAggregatesFilter<"SessionFMPA"> | number
    dateDebut?: DateTimeWithAggregatesFilter<"SessionFMPA"> | Date | string
    dateFin?: DateTimeWithAggregatesFilter<"SessionFMPA"> | Date | string
    lieu?: StringWithAggregatesFilter<"SessionFMPA"> | string
    placesMax?: IntWithAggregatesFilter<"SessionFMPA"> | number
    placesOccupees?: IntWithAggregatesFilter<"SessionFMPA"> | number
    formateurPrincipalId?: IntWithAggregatesFilter<"SessionFMPA"> | number
    centreId?: IntWithAggregatesFilter<"SessionFMPA"> | number
    statut?: EnumStatutSessionWithAggregatesFilter<"SessionFMPA"> | $Enums.StatutSession
    codeTTA?: StringWithAggregatesFilter<"SessionFMPA"> | string
    tauxHoraire?: FloatWithAggregatesFilter<"SessionFMPA"> | number
    observations?: StringNullableWithAggregatesFilter<"SessionFMPA"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"SessionFMPA"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SessionFMPA"> | Date | string
  }

  export type InscriptionFMPAWhereInput = {
    AND?: InscriptionFMPAWhereInput | InscriptionFMPAWhereInput[]
    OR?: InscriptionFMPAWhereInput[]
    NOT?: InscriptionFMPAWhereInput | InscriptionFMPAWhereInput[]
    id?: IntFilter<"InscriptionFMPA"> | number
    sessionId?: IntFilter<"InscriptionFMPA"> | number
    personnelId?: IntFilter<"InscriptionFMPA"> | number
    statut?: EnumStatutInscriptionFilter<"InscriptionFMPA"> | $Enums.StatutInscription
    present?: BoolFilter<"InscriptionFMPA"> | boolean
    signatureElectronique?: StringNullableFilter<"InscriptionFMPA"> | string | null
    dateSignature?: DateTimeNullableFilter<"InscriptionFMPA"> | Date | string | null
    heuresValidees?: FloatNullableFilter<"InscriptionFMPA"> | number | null
    montantTTA?: FloatNullableFilter<"InscriptionFMPA"> | number | null
    dateInscription?: DateTimeFilter<"InscriptionFMPA"> | Date | string
    dateModification?: DateTimeFilter<"InscriptionFMPA"> | Date | string
    session?: XOR<SessionFMPARelationFilter, SessionFMPAWhereInput>
    personnel?: XOR<PersonnelRelationFilter, PersonnelWhereInput>
  }

  export type InscriptionFMPAOrderByWithRelationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    personnelId?: SortOrder
    statut?: SortOrder
    present?: SortOrder
    signatureElectronique?: SortOrderInput | SortOrder
    dateSignature?: SortOrderInput | SortOrder
    heuresValidees?: SortOrderInput | SortOrder
    montantTTA?: SortOrderInput | SortOrder
    dateInscription?: SortOrder
    dateModification?: SortOrder
    session?: SessionFMPAOrderByWithRelationInput
    personnel?: PersonnelOrderByWithRelationInput
  }

  export type InscriptionFMPAWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    sessionId_personnelId?: InscriptionFMPASessionIdPersonnelIdCompoundUniqueInput
    AND?: InscriptionFMPAWhereInput | InscriptionFMPAWhereInput[]
    OR?: InscriptionFMPAWhereInput[]
    NOT?: InscriptionFMPAWhereInput | InscriptionFMPAWhereInput[]
    sessionId?: IntFilter<"InscriptionFMPA"> | number
    personnelId?: IntFilter<"InscriptionFMPA"> | number
    statut?: EnumStatutInscriptionFilter<"InscriptionFMPA"> | $Enums.StatutInscription
    present?: BoolFilter<"InscriptionFMPA"> | boolean
    signatureElectronique?: StringNullableFilter<"InscriptionFMPA"> | string | null
    dateSignature?: DateTimeNullableFilter<"InscriptionFMPA"> | Date | string | null
    heuresValidees?: FloatNullableFilter<"InscriptionFMPA"> | number | null
    montantTTA?: FloatNullableFilter<"InscriptionFMPA"> | number | null
    dateInscription?: DateTimeFilter<"InscriptionFMPA"> | Date | string
    dateModification?: DateTimeFilter<"InscriptionFMPA"> | Date | string
    session?: XOR<SessionFMPARelationFilter, SessionFMPAWhereInput>
    personnel?: XOR<PersonnelRelationFilter, PersonnelWhereInput>
  }, "id" | "sessionId_personnelId">

  export type InscriptionFMPAOrderByWithAggregationInput = {
    id?: SortOrder
    sessionId?: SortOrder
    personnelId?: SortOrder
    statut?: SortOrder
    present?: SortOrder
    signatureElectronique?: SortOrderInput | SortOrder
    dateSignature?: SortOrderInput | SortOrder
    heuresValidees?: SortOrderInput | SortOrder
    montantTTA?: SortOrderInput | SortOrder
    dateInscription?: SortOrder
    dateModification?: SortOrder
    _count?: InscriptionFMPACountOrderByAggregateInput
    _avg?: InscriptionFMPAAvgOrderByAggregateInput
    _max?: InscriptionFMPAMaxOrderByAggregateInput
    _min?: InscriptionFMPAMinOrderByAggregateInput
    _sum?: InscriptionFMPASumOrderByAggregateInput
  }

  export type InscriptionFMPAScalarWhereWithAggregatesInput = {
    AND?: InscriptionFMPAScalarWhereWithAggregatesInput | InscriptionFMPAScalarWhereWithAggregatesInput[]
    OR?: InscriptionFMPAScalarWhereWithAggregatesInput[]
    NOT?: InscriptionFMPAScalarWhereWithAggregatesInput | InscriptionFMPAScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InscriptionFMPA"> | number
    sessionId?: IntWithAggregatesFilter<"InscriptionFMPA"> | number
    personnelId?: IntWithAggregatesFilter<"InscriptionFMPA"> | number
    statut?: EnumStatutInscriptionWithAggregatesFilter<"InscriptionFMPA"> | $Enums.StatutInscription
    present?: BoolWithAggregatesFilter<"InscriptionFMPA"> | boolean
    signatureElectronique?: StringNullableWithAggregatesFilter<"InscriptionFMPA"> | string | null
    dateSignature?: DateTimeNullableWithAggregatesFilter<"InscriptionFMPA"> | Date | string | null
    heuresValidees?: FloatNullableWithAggregatesFilter<"InscriptionFMPA"> | number | null
    montantTTA?: FloatNullableWithAggregatesFilter<"InscriptionFMPA"> | number | null
    dateInscription?: DateTimeWithAggregatesFilter<"InscriptionFMPA"> | Date | string
    dateModification?: DateTimeWithAggregatesFilter<"InscriptionFMPA"> | Date | string
  }

  export type SignatureFMPAWhereInput = {
    AND?: SignatureFMPAWhereInput | SignatureFMPAWhereInput[]
    OR?: SignatureFMPAWhereInput[]
    NOT?: SignatureFMPAWhereInput | SignatureFMPAWhereInput[]
    id?: StringFilter<"SignatureFMPA"> | string
    sessionFMPAId?: IntFilter<"SignatureFMPA"> | number
    personnelId?: IntFilter<"SignatureFMPA"> | number
    type?: StringFilter<"SignatureFMPA"> | string
    signature?: StringFilter<"SignatureFMPA"> | string
    dateSignature?: DateTimeFilter<"SignatureFMPA"> | Date | string
    session?: XOR<SessionFMPARelationFilter, SessionFMPAWhereInput>
    personnel?: XOR<PersonnelRelationFilter, PersonnelWhereInput>
  }

  export type SignatureFMPAOrderByWithRelationInput = {
    id?: SortOrder
    sessionFMPAId?: SortOrder
    personnelId?: SortOrder
    type?: SortOrder
    signature?: SortOrder
    dateSignature?: SortOrder
    session?: SessionFMPAOrderByWithRelationInput
    personnel?: PersonnelOrderByWithRelationInput
  }

  export type SignatureFMPAWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SignatureFMPAWhereInput | SignatureFMPAWhereInput[]
    OR?: SignatureFMPAWhereInput[]
    NOT?: SignatureFMPAWhereInput | SignatureFMPAWhereInput[]
    sessionFMPAId?: IntFilter<"SignatureFMPA"> | number
    personnelId?: IntFilter<"SignatureFMPA"> | number
    type?: StringFilter<"SignatureFMPA"> | string
    signature?: StringFilter<"SignatureFMPA"> | string
    dateSignature?: DateTimeFilter<"SignatureFMPA"> | Date | string
    session?: XOR<SessionFMPARelationFilter, SessionFMPAWhereInput>
    personnel?: XOR<PersonnelRelationFilter, PersonnelWhereInput>
  }, "id">

  export type SignatureFMPAOrderByWithAggregationInput = {
    id?: SortOrder
    sessionFMPAId?: SortOrder
    personnelId?: SortOrder
    type?: SortOrder
    signature?: SortOrder
    dateSignature?: SortOrder
    _count?: SignatureFMPACountOrderByAggregateInput
    _avg?: SignatureFMPAAvgOrderByAggregateInput
    _max?: SignatureFMPAMaxOrderByAggregateInput
    _min?: SignatureFMPAMinOrderByAggregateInput
    _sum?: SignatureFMPASumOrderByAggregateInput
  }

  export type SignatureFMPAScalarWhereWithAggregatesInput = {
    AND?: SignatureFMPAScalarWhereWithAggregatesInput | SignatureFMPAScalarWhereWithAggregatesInput[]
    OR?: SignatureFMPAScalarWhereWithAggregatesInput[]
    NOT?: SignatureFMPAScalarWhereWithAggregatesInput | SignatureFMPAScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SignatureFMPA"> | string
    sessionFMPAId?: IntWithAggregatesFilter<"SignatureFMPA"> | number
    personnelId?: IntWithAggregatesFilter<"SignatureFMPA"> | number
    type?: StringWithAggregatesFilter<"SignatureFMPA"> | string
    signature?: StringWithAggregatesFilter<"SignatureFMPA"> | string
    dateSignature?: DateTimeWithAggregatesFilter<"SignatureFMPA"> | Date | string
  }

  export type AptitudeMedicaleWhereInput = {
    AND?: AptitudeMedicaleWhereInput | AptitudeMedicaleWhereInput[]
    OR?: AptitudeMedicaleWhereInput[]
    NOT?: AptitudeMedicaleWhereInput | AptitudeMedicaleWhereInput[]
    id?: IntFilter<"AptitudeMedicale"> | number
    personnelId?: IntFilter<"AptitudeMedicale"> | number
    statut?: EnumStatutAptitudeFilter<"AptitudeMedicale"> | $Enums.StatutAptitude
    dateVisite?: DateTimeFilter<"AptitudeMedicale"> | Date | string
    dateProchainExamen?: DateTimeFilter<"AptitudeMedicale"> | Date | string
    restrictions?: StringNullableFilter<"AptitudeMedicale"> | string | null
    medecin?: StringNullableFilter<"AptitudeMedicale"> | string | null
    createdAt?: DateTimeFilter<"AptitudeMedicale"> | Date | string
    updatedAt?: DateTimeFilter<"AptitudeMedicale"> | Date | string
    personnel?: XOR<PersonnelRelationFilter, PersonnelWhereInput>
  }

  export type AptitudeMedicaleOrderByWithRelationInput = {
    id?: SortOrder
    personnelId?: SortOrder
    statut?: SortOrder
    dateVisite?: SortOrder
    dateProchainExamen?: SortOrder
    restrictions?: SortOrderInput | SortOrder
    medecin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    personnel?: PersonnelOrderByWithRelationInput
  }

  export type AptitudeMedicaleWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    personnelId?: number
    AND?: AptitudeMedicaleWhereInput | AptitudeMedicaleWhereInput[]
    OR?: AptitudeMedicaleWhereInput[]
    NOT?: AptitudeMedicaleWhereInput | AptitudeMedicaleWhereInput[]
    statut?: EnumStatutAptitudeFilter<"AptitudeMedicale"> | $Enums.StatutAptitude
    dateVisite?: DateTimeFilter<"AptitudeMedicale"> | Date | string
    dateProchainExamen?: DateTimeFilter<"AptitudeMedicale"> | Date | string
    restrictions?: StringNullableFilter<"AptitudeMedicale"> | string | null
    medecin?: StringNullableFilter<"AptitudeMedicale"> | string | null
    createdAt?: DateTimeFilter<"AptitudeMedicale"> | Date | string
    updatedAt?: DateTimeFilter<"AptitudeMedicale"> | Date | string
    personnel?: XOR<PersonnelRelationFilter, PersonnelWhereInput>
  }, "id" | "personnelId">

  export type AptitudeMedicaleOrderByWithAggregationInput = {
    id?: SortOrder
    personnelId?: SortOrder
    statut?: SortOrder
    dateVisite?: SortOrder
    dateProchainExamen?: SortOrder
    restrictions?: SortOrderInput | SortOrder
    medecin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AptitudeMedicaleCountOrderByAggregateInput
    _avg?: AptitudeMedicaleAvgOrderByAggregateInput
    _max?: AptitudeMedicaleMaxOrderByAggregateInput
    _min?: AptitudeMedicaleMinOrderByAggregateInput
    _sum?: AptitudeMedicaleSumOrderByAggregateInput
  }

  export type AptitudeMedicaleScalarWhereWithAggregatesInput = {
    AND?: AptitudeMedicaleScalarWhereWithAggregatesInput | AptitudeMedicaleScalarWhereWithAggregatesInput[]
    OR?: AptitudeMedicaleScalarWhereWithAggregatesInput[]
    NOT?: AptitudeMedicaleScalarWhereWithAggregatesInput | AptitudeMedicaleScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AptitudeMedicale"> | number
    personnelId?: IntWithAggregatesFilter<"AptitudeMedicale"> | number
    statut?: EnumStatutAptitudeWithAggregatesFilter<"AptitudeMedicale"> | $Enums.StatutAptitude
    dateVisite?: DateTimeWithAggregatesFilter<"AptitudeMedicale"> | Date | string
    dateProchainExamen?: DateTimeWithAggregatesFilter<"AptitudeMedicale"> | Date | string
    restrictions?: StringNullableWithAggregatesFilter<"AptitudeMedicale"> | string | null
    medecin?: StringNullableWithAggregatesFilter<"AptitudeMedicale"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AptitudeMedicale"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AptitudeMedicale"> | Date | string
  }

  export type CompetenceWhereInput = {
    AND?: CompetenceWhereInput | CompetenceWhereInput[]
    OR?: CompetenceWhereInput[]
    NOT?: CompetenceWhereInput | CompetenceWhereInput[]
    id?: IntFilter<"Competence"> | number
    personnelId?: IntFilter<"Competence"> | number
    code?: StringFilter<"Competence"> | string
    libelle?: StringFilter<"Competence"> | string
    dateObtention?: DateTimeFilter<"Competence"> | Date | string
    dateExpiration?: DateTimeNullableFilter<"Competence"> | Date | string | null
    niveau?: StringNullableFilter<"Competence"> | string | null
    organisme?: StringNullableFilter<"Competence"> | string | null
    createdAt?: DateTimeFilter<"Competence"> | Date | string
    updatedAt?: DateTimeFilter<"Competence"> | Date | string
    personnel?: XOR<PersonnelRelationFilter, PersonnelWhereInput>
  }

  export type CompetenceOrderByWithRelationInput = {
    id?: SortOrder
    personnelId?: SortOrder
    code?: SortOrder
    libelle?: SortOrder
    dateObtention?: SortOrder
    dateExpiration?: SortOrderInput | SortOrder
    niveau?: SortOrderInput | SortOrder
    organisme?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    personnel?: PersonnelOrderByWithRelationInput
  }

  export type CompetenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CompetenceWhereInput | CompetenceWhereInput[]
    OR?: CompetenceWhereInput[]
    NOT?: CompetenceWhereInput | CompetenceWhereInput[]
    personnelId?: IntFilter<"Competence"> | number
    code?: StringFilter<"Competence"> | string
    libelle?: StringFilter<"Competence"> | string
    dateObtention?: DateTimeFilter<"Competence"> | Date | string
    dateExpiration?: DateTimeNullableFilter<"Competence"> | Date | string | null
    niveau?: StringNullableFilter<"Competence"> | string | null
    organisme?: StringNullableFilter<"Competence"> | string | null
    createdAt?: DateTimeFilter<"Competence"> | Date | string
    updatedAt?: DateTimeFilter<"Competence"> | Date | string
    personnel?: XOR<PersonnelRelationFilter, PersonnelWhereInput>
  }, "id">

  export type CompetenceOrderByWithAggregationInput = {
    id?: SortOrder
    personnelId?: SortOrder
    code?: SortOrder
    libelle?: SortOrder
    dateObtention?: SortOrder
    dateExpiration?: SortOrderInput | SortOrder
    niveau?: SortOrderInput | SortOrder
    organisme?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CompetenceCountOrderByAggregateInput
    _avg?: CompetenceAvgOrderByAggregateInput
    _max?: CompetenceMaxOrderByAggregateInput
    _min?: CompetenceMinOrderByAggregateInput
    _sum?: CompetenceSumOrderByAggregateInput
  }

  export type CompetenceScalarWhereWithAggregatesInput = {
    AND?: CompetenceScalarWhereWithAggregatesInput | CompetenceScalarWhereWithAggregatesInput[]
    OR?: CompetenceScalarWhereWithAggregatesInput[]
    NOT?: CompetenceScalarWhereWithAggregatesInput | CompetenceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Competence"> | number
    personnelId?: IntWithAggregatesFilter<"Competence"> | number
    code?: StringWithAggregatesFilter<"Competence"> | string
    libelle?: StringWithAggregatesFilter<"Competence"> | string
    dateObtention?: DateTimeWithAggregatesFilter<"Competence"> | Date | string
    dateExpiration?: DateTimeNullableWithAggregatesFilter<"Competence"> | Date | string | null
    niveau?: StringNullableWithAggregatesFilter<"Competence"> | string | null
    organisme?: StringNullableWithAggregatesFilter<"Competence"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Competence"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Competence"> | Date | string
  }

  export type ExportTTAWhereInput = {
    AND?: ExportTTAWhereInput | ExportTTAWhereInput[]
    OR?: ExportTTAWhereInput[]
    NOT?: ExportTTAWhereInput | ExportTTAWhereInput[]
    id?: IntFilter<"ExportTTA"> | number
    mois?: DateTimeFilter<"ExportTTA"> | Date | string
    centreId?: IntFilter<"ExportTTA"> | number
    sessionId?: IntNullableFilter<"ExportTTA"> | number | null
    nombreLignes?: IntFilter<"ExportTTA"> | number
    montantTotal?: FloatFilter<"ExportTTA"> | number
    fichierCsv?: StringFilter<"ExportTTA"> | string
    statut?: StringFilter<"ExportTTA"> | string
    validePar?: IntNullableFilter<"ExportTTA"> | number | null
    dateValidation?: DateTimeNullableFilter<"ExportTTA"> | Date | string | null
    createdAt?: DateTimeFilter<"ExportTTA"> | Date | string
    session?: XOR<SessionFMPANullableRelationFilter, SessionFMPAWhereInput> | null
  }

  export type ExportTTAOrderByWithRelationInput = {
    id?: SortOrder
    mois?: SortOrder
    centreId?: SortOrder
    sessionId?: SortOrderInput | SortOrder
    nombreLignes?: SortOrder
    montantTotal?: SortOrder
    fichierCsv?: SortOrder
    statut?: SortOrder
    validePar?: SortOrderInput | SortOrder
    dateValidation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    session?: SessionFMPAOrderByWithRelationInput
  }

  export type ExportTTAWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExportTTAWhereInput | ExportTTAWhereInput[]
    OR?: ExportTTAWhereInput[]
    NOT?: ExportTTAWhereInput | ExportTTAWhereInput[]
    mois?: DateTimeFilter<"ExportTTA"> | Date | string
    centreId?: IntFilter<"ExportTTA"> | number
    sessionId?: IntNullableFilter<"ExportTTA"> | number | null
    nombreLignes?: IntFilter<"ExportTTA"> | number
    montantTotal?: FloatFilter<"ExportTTA"> | number
    fichierCsv?: StringFilter<"ExportTTA"> | string
    statut?: StringFilter<"ExportTTA"> | string
    validePar?: IntNullableFilter<"ExportTTA"> | number | null
    dateValidation?: DateTimeNullableFilter<"ExportTTA"> | Date | string | null
    createdAt?: DateTimeFilter<"ExportTTA"> | Date | string
    session?: XOR<SessionFMPANullableRelationFilter, SessionFMPAWhereInput> | null
  }, "id">

  export type ExportTTAOrderByWithAggregationInput = {
    id?: SortOrder
    mois?: SortOrder
    centreId?: SortOrder
    sessionId?: SortOrderInput | SortOrder
    nombreLignes?: SortOrder
    montantTotal?: SortOrder
    fichierCsv?: SortOrder
    statut?: SortOrder
    validePar?: SortOrderInput | SortOrder
    dateValidation?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ExportTTACountOrderByAggregateInput
    _avg?: ExportTTAAvgOrderByAggregateInput
    _max?: ExportTTAMaxOrderByAggregateInput
    _min?: ExportTTAMinOrderByAggregateInput
    _sum?: ExportTTASumOrderByAggregateInput
  }

  export type ExportTTAScalarWhereWithAggregatesInput = {
    AND?: ExportTTAScalarWhereWithAggregatesInput | ExportTTAScalarWhereWithAggregatesInput[]
    OR?: ExportTTAScalarWhereWithAggregatesInput[]
    NOT?: ExportTTAScalarWhereWithAggregatesInput | ExportTTAScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ExportTTA"> | number
    mois?: DateTimeWithAggregatesFilter<"ExportTTA"> | Date | string
    centreId?: IntWithAggregatesFilter<"ExportTTA"> | number
    sessionId?: IntNullableWithAggregatesFilter<"ExportTTA"> | number | null
    nombreLignes?: IntWithAggregatesFilter<"ExportTTA"> | number
    montantTotal?: FloatWithAggregatesFilter<"ExportTTA"> | number
    fichierCsv?: StringWithAggregatesFilter<"ExportTTA"> | string
    statut?: StringWithAggregatesFilter<"ExportTTA"> | string
    validePar?: IntNullableWithAggregatesFilter<"ExportTTA"> | number | null
    dateValidation?: DateTimeNullableWithAggregatesFilter<"ExportTTA"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ExportTTA"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    personnelId?: IntFilter<"Notification"> | number
    type?: StringFilter<"Notification"> | string
    sujet?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    lu?: BoolFilter<"Notification"> | boolean
    dateLecture?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    personnel?: XOR<PersonnelRelationFilter, PersonnelWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    personnelId?: SortOrder
    type?: SortOrder
    sujet?: SortOrder
    message?: SortOrder
    lu?: SortOrder
    dateLecture?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    personnel?: PersonnelOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    personnelId?: IntFilter<"Notification"> | number
    type?: StringFilter<"Notification"> | string
    sujet?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    lu?: BoolFilter<"Notification"> | boolean
    dateLecture?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    personnel?: XOR<PersonnelRelationFilter, PersonnelWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    personnelId?: SortOrder
    type?: SortOrder
    sujet?: SortOrder
    message?: SortOrder
    lu?: SortOrder
    dateLecture?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    personnelId?: IntWithAggregatesFilter<"Notification"> | number
    type?: StringWithAggregatesFilter<"Notification"> | string
    sujet?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    lu?: BoolWithAggregatesFilter<"Notification"> | boolean
    dateLecture?: DateTimeNullableWithAggregatesFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
  }

  export type AuditLogWhereInput = {
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<PersonnelNullableRelationFilter, PersonnelWhereInput> | null
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    user?: PersonnelOrderByWithRelationInput
  }

  export type AuditLogWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AuditLogWhereInput | AuditLogWhereInput[]
    OR?: AuditLogWhereInput[]
    NOT?: AuditLogWhereInput | AuditLogWhereInput[]
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
    user?: XOR<PersonnelNullableRelationFilter, PersonnelWhereInput> | null
  }, "id">

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrderInput | SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrderInput | SortOrder
    oldValues?: SortOrderInput | SortOrder
    newValues?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _avg?: AuditLogAvgOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
    _sum?: AuditLogSumOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    OR?: AuditLogScalarWhereWithAggregatesInput[]
    NOT?: AuditLogScalarWhereWithAggregatesInput | AuditLogScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AuditLog"> | string
    userId?: IntNullableWithAggregatesFilter<"AuditLog"> | number | null
    action?: StringWithAggregatesFilter<"AuditLog"> | string
    entity?: StringWithAggregatesFilter<"AuditLog"> | string
    entityId?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    newValues?: JsonNullableWithAggregatesFilter<"AuditLog">
    ipAddress?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AuditLog"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"AuditLog"> | Date | string
  }

  export type PersonnelCreateInput = {
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    centre: CentreCreateNestedOneWithoutPersonnelsInput
    aptitudeMedicale?: AptitudeMedicaleCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPACreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPACreateNestedManyWithoutPersonnelInput
    notifications?: NotificationCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type PersonnelUncheckedCreateInput = {
    id?: number
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    centreId: number
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceUncheckedCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPAUncheckedCreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type PersonnelUpdateInput = {
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    centre?: CentreUpdateOneRequiredWithoutPersonnelsNestedInput
    aptitudeMedicale?: AptitudeMedicaleUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type PersonnelUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    centreId?: IntFieldUpdateOperationsInput | number
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUncheckedUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUncheckedUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PersonnelCreateManyInput = {
    id?: number
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    centreId: number
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PersonnelUpdateManyMutationInput = {
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonnelUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    centreId?: IntFieldUpdateOperationsInput | number
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CentreCreateInput = {
    code: string
    nom: string
    type: string
    adresse?: string | null
    telephone?: string | null
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    personnels?: PersonnelCreateNestedManyWithoutCentreInput
    sessions?: SessionFMPACreateNestedManyWithoutCentreInput
  }

  export type CentreUncheckedCreateInput = {
    id?: number
    code: string
    nom: string
    type: string
    adresse?: string | null
    telephone?: string | null
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    personnels?: PersonnelUncheckedCreateNestedManyWithoutCentreInput
    sessions?: SessionFMPAUncheckedCreateNestedManyWithoutCentreInput
  }

  export type CentreUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    personnels?: PersonnelUpdateManyWithoutCentreNestedInput
    sessions?: SessionFMPAUpdateManyWithoutCentreNestedInput
  }

  export type CentreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    personnels?: PersonnelUncheckedUpdateManyWithoutCentreNestedInput
    sessions?: SessionFMPAUncheckedUpdateManyWithoutCentreNestedInput
  }

  export type CentreCreateManyInput = {
    id?: number
    code: string
    nom: string
    type: string
    adresse?: string | null
    telephone?: string | null
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CentreUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CentreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TypeFMPACreateInput = {
    code: string
    libelle: string
    dureeHeures: number
    tauxHoraire?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionFMPACreateNestedManyWithoutTypeFMPAInput
  }

  export type TypeFMPAUncheckedCreateInput = {
    id?: number
    code: string
    libelle: string
    dureeHeures: number
    tauxHoraire?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionFMPAUncheckedCreateNestedManyWithoutTypeFMPAInput
  }

  export type TypeFMPAUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dureeHeures?: FloatFieldUpdateOperationsInput | number
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionFMPAUpdateManyWithoutTypeFMPANestedInput
  }

  export type TypeFMPAUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dureeHeures?: FloatFieldUpdateOperationsInput | number
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionFMPAUncheckedUpdateManyWithoutTypeFMPANestedInput
  }

  export type TypeFMPACreateManyInput = {
    id?: number
    code: string
    libelle: string
    dureeHeures: number
    tauxHoraire?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TypeFMPAUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dureeHeures?: FloatFieldUpdateOperationsInput | number
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TypeFMPAUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dureeHeures?: FloatFieldUpdateOperationsInput | number
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionFMPACreateInput = {
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    typeFMPA: TypeFMPACreateNestedOneWithoutSessionsInput
    formateurPrincipal: PersonnelCreateNestedOneWithoutSessionsFormateurInput
    centre: CentreCreateNestedOneWithoutSessionsInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutSessionInput
    signatures?: SignatureFMPACreateNestedManyWithoutSessionInput
    exportsTTA?: ExportTTACreateNestedManyWithoutSessionInput
  }

  export type SessionFMPAUncheckedCreateInput = {
    id?: number
    typeFMPAId: number
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    formateurPrincipalId: number
    centreId: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutSessionInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutSessionInput
    exportsTTA?: ExportTTAUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionFMPAUpdateInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeFMPA?: TypeFMPAUpdateOneRequiredWithoutSessionsNestedInput
    formateurPrincipal?: PersonnelUpdateOneRequiredWithoutSessionsFormateurNestedInput
    centre?: CentreUpdateOneRequiredWithoutSessionsNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutSessionNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutSessionNestedInput
    exportsTTA?: ExportTTAUpdateManyWithoutSessionNestedInput
  }

  export type SessionFMPAUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeFMPAId?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    formateurPrincipalId?: IntFieldUpdateOperationsInput | number
    centreId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutSessionNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutSessionNestedInput
    exportsTTA?: ExportTTAUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionFMPACreateManyInput = {
    id?: number
    typeFMPAId: number
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    formateurPrincipalId: number
    centreId: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionFMPAUpdateManyMutationInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionFMPAUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeFMPAId?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    formateurPrincipalId?: IntFieldUpdateOperationsInput | number
    centreId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscriptionFMPACreateInput = {
    statut?: $Enums.StatutInscription
    present?: boolean
    signatureElectronique?: string | null
    dateSignature?: Date | string | null
    heuresValidees?: number | null
    montantTTA?: number | null
    dateInscription?: Date | string
    dateModification?: Date | string
    session: SessionFMPACreateNestedOneWithoutInscriptionsInput
    personnel: PersonnelCreateNestedOneWithoutInscriptionsInput
  }

  export type InscriptionFMPAUncheckedCreateInput = {
    id?: number
    sessionId: number
    personnelId: number
    statut?: $Enums.StatutInscription
    present?: boolean
    signatureElectronique?: string | null
    dateSignature?: Date | string | null
    heuresValidees?: number | null
    montantTTA?: number | null
    dateInscription?: Date | string
    dateModification?: Date | string
  }

  export type InscriptionFMPAUpdateInput = {
    statut?: EnumStatutInscriptionFieldUpdateOperationsInput | $Enums.StatutInscription
    present?: BoolFieldUpdateOperationsInput | boolean
    signatureElectronique?: NullableStringFieldUpdateOperationsInput | string | null
    dateSignature?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heuresValidees?: NullableFloatFieldUpdateOperationsInput | number | null
    montantTTA?: NullableFloatFieldUpdateOperationsInput | number | null
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionFMPAUpdateOneRequiredWithoutInscriptionsNestedInput
    personnel?: PersonnelUpdateOneRequiredWithoutInscriptionsNestedInput
  }

  export type InscriptionFMPAUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    personnelId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutInscriptionFieldUpdateOperationsInput | $Enums.StatutInscription
    present?: BoolFieldUpdateOperationsInput | boolean
    signatureElectronique?: NullableStringFieldUpdateOperationsInput | string | null
    dateSignature?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heuresValidees?: NullableFloatFieldUpdateOperationsInput | number | null
    montantTTA?: NullableFloatFieldUpdateOperationsInput | number | null
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscriptionFMPACreateManyInput = {
    id?: number
    sessionId: number
    personnelId: number
    statut?: $Enums.StatutInscription
    present?: boolean
    signatureElectronique?: string | null
    dateSignature?: Date | string | null
    heuresValidees?: number | null
    montantTTA?: number | null
    dateInscription?: Date | string
    dateModification?: Date | string
  }

  export type InscriptionFMPAUpdateManyMutationInput = {
    statut?: EnumStatutInscriptionFieldUpdateOperationsInput | $Enums.StatutInscription
    present?: BoolFieldUpdateOperationsInput | boolean
    signatureElectronique?: NullableStringFieldUpdateOperationsInput | string | null
    dateSignature?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heuresValidees?: NullableFloatFieldUpdateOperationsInput | number | null
    montantTTA?: NullableFloatFieldUpdateOperationsInput | number | null
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscriptionFMPAUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    personnelId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutInscriptionFieldUpdateOperationsInput | $Enums.StatutInscription
    present?: BoolFieldUpdateOperationsInput | boolean
    signatureElectronique?: NullableStringFieldUpdateOperationsInput | string | null
    dateSignature?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heuresValidees?: NullableFloatFieldUpdateOperationsInput | number | null
    montantTTA?: NullableFloatFieldUpdateOperationsInput | number | null
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignatureFMPACreateInput = {
    id?: string
    type: string
    signature: string
    dateSignature?: Date | string
    session: SessionFMPACreateNestedOneWithoutSignaturesInput
    personnel: PersonnelCreateNestedOneWithoutSignaturesInput
  }

  export type SignatureFMPAUncheckedCreateInput = {
    id?: string
    sessionFMPAId: number
    personnelId: number
    type: string
    signature: string
    dateSignature?: Date | string
  }

  export type SignatureFMPAUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    dateSignature?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionFMPAUpdateOneRequiredWithoutSignaturesNestedInput
    personnel?: PersonnelUpdateOneRequiredWithoutSignaturesNestedInput
  }

  export type SignatureFMPAUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionFMPAId?: IntFieldUpdateOperationsInput | number
    personnelId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    dateSignature?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignatureFMPACreateManyInput = {
    id?: string
    sessionFMPAId: number
    personnelId: number
    type: string
    signature: string
    dateSignature?: Date | string
  }

  export type SignatureFMPAUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    dateSignature?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignatureFMPAUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionFMPAId?: IntFieldUpdateOperationsInput | number
    personnelId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    dateSignature?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AptitudeMedicaleCreateInput = {
    statut?: $Enums.StatutAptitude
    dateVisite: Date | string
    dateProchainExamen: Date | string
    restrictions?: string | null
    medecin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    personnel: PersonnelCreateNestedOneWithoutAptitudeMedicaleInput
  }

  export type AptitudeMedicaleUncheckedCreateInput = {
    id?: number
    personnelId: number
    statut?: $Enums.StatutAptitude
    dateVisite: Date | string
    dateProchainExamen: Date | string
    restrictions?: string | null
    medecin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AptitudeMedicaleUpdateInput = {
    statut?: EnumStatutAptitudeFieldUpdateOperationsInput | $Enums.StatutAptitude
    dateVisite?: DateTimeFieldUpdateOperationsInput | Date | string
    dateProchainExamen?: DateTimeFieldUpdateOperationsInput | Date | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    medecin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    personnel?: PersonnelUpdateOneRequiredWithoutAptitudeMedicaleNestedInput
  }

  export type AptitudeMedicaleUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    personnelId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutAptitudeFieldUpdateOperationsInput | $Enums.StatutAptitude
    dateVisite?: DateTimeFieldUpdateOperationsInput | Date | string
    dateProchainExamen?: DateTimeFieldUpdateOperationsInput | Date | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    medecin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AptitudeMedicaleCreateManyInput = {
    id?: number
    personnelId: number
    statut?: $Enums.StatutAptitude
    dateVisite: Date | string
    dateProchainExamen: Date | string
    restrictions?: string | null
    medecin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AptitudeMedicaleUpdateManyMutationInput = {
    statut?: EnumStatutAptitudeFieldUpdateOperationsInput | $Enums.StatutAptitude
    dateVisite?: DateTimeFieldUpdateOperationsInput | Date | string
    dateProchainExamen?: DateTimeFieldUpdateOperationsInput | Date | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    medecin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AptitudeMedicaleUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    personnelId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutAptitudeFieldUpdateOperationsInput | $Enums.StatutAptitude
    dateVisite?: DateTimeFieldUpdateOperationsInput | Date | string
    dateProchainExamen?: DateTimeFieldUpdateOperationsInput | Date | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    medecin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompetenceCreateInput = {
    code: string
    libelle: string
    dateObtention: Date | string
    dateExpiration?: Date | string | null
    niveau?: string | null
    organisme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    personnel: PersonnelCreateNestedOneWithoutCompetencesInput
  }

  export type CompetenceUncheckedCreateInput = {
    id?: number
    personnelId: number
    code: string
    libelle: string
    dateObtention: Date | string
    dateExpiration?: Date | string | null
    niveau?: string | null
    organisme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompetenceUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dateObtention?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    niveau?: NullableStringFieldUpdateOperationsInput | string | null
    organisme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    personnel?: PersonnelUpdateOneRequiredWithoutCompetencesNestedInput
  }

  export type CompetenceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    personnelId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dateObtention?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    niveau?: NullableStringFieldUpdateOperationsInput | string | null
    organisme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompetenceCreateManyInput = {
    id?: number
    personnelId: number
    code: string
    libelle: string
    dateObtention: Date | string
    dateExpiration?: Date | string | null
    niveau?: string | null
    organisme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompetenceUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dateObtention?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    niveau?: NullableStringFieldUpdateOperationsInput | string | null
    organisme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompetenceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    personnelId?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dateObtention?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    niveau?: NullableStringFieldUpdateOperationsInput | string | null
    organisme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportTTACreateInput = {
    mois: Date | string
    centreId: number
    nombreLignes: number
    montantTotal: number
    fichierCsv: string
    statut: string
    validePar?: number | null
    dateValidation?: Date | string | null
    createdAt?: Date | string
    session?: SessionFMPACreateNestedOneWithoutExportsTTAInput
  }

  export type ExportTTAUncheckedCreateInput = {
    id?: number
    mois: Date | string
    centreId: number
    sessionId?: number | null
    nombreLignes: number
    montantTotal: number
    fichierCsv: string
    statut: string
    validePar?: number | null
    dateValidation?: Date | string | null
    createdAt?: Date | string
  }

  export type ExportTTAUpdateInput = {
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
    centreId?: IntFieldUpdateOperationsInput | number
    nombreLignes?: IntFieldUpdateOperationsInput | number
    montantTotal?: FloatFieldUpdateOperationsInput | number
    fichierCsv?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    validePar?: NullableIntFieldUpdateOperationsInput | number | null
    dateValidation?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionFMPAUpdateOneWithoutExportsTTANestedInput
  }

  export type ExportTTAUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
    centreId?: IntFieldUpdateOperationsInput | number
    sessionId?: NullableIntFieldUpdateOperationsInput | number | null
    nombreLignes?: IntFieldUpdateOperationsInput | number
    montantTotal?: FloatFieldUpdateOperationsInput | number
    fichierCsv?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    validePar?: NullableIntFieldUpdateOperationsInput | number | null
    dateValidation?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportTTACreateManyInput = {
    id?: number
    mois: Date | string
    centreId: number
    sessionId?: number | null
    nombreLignes: number
    montantTotal: number
    fichierCsv: string
    statut: string
    validePar?: number | null
    dateValidation?: Date | string | null
    createdAt?: Date | string
  }

  export type ExportTTAUpdateManyMutationInput = {
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
    centreId?: IntFieldUpdateOperationsInput | number
    nombreLignes?: IntFieldUpdateOperationsInput | number
    montantTotal?: FloatFieldUpdateOperationsInput | number
    fichierCsv?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    validePar?: NullableIntFieldUpdateOperationsInput | number | null
    dateValidation?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportTTAUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
    centreId?: IntFieldUpdateOperationsInput | number
    sessionId?: NullableIntFieldUpdateOperationsInput | number | null
    nombreLignes?: IntFieldUpdateOperationsInput | number
    montantTotal?: FloatFieldUpdateOperationsInput | number
    fichierCsv?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    validePar?: NullableIntFieldUpdateOperationsInput | number | null
    dateValidation?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    type: string
    sujet: string
    message: string
    lu?: boolean
    dateLecture?: Date | string | null
    createdAt?: Date | string
    personnel: PersonnelCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    personnelId: number
    type: string
    sujet: string
    message: string
    lu?: boolean
    dateLecture?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    sujet?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    dateLecture?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    personnel?: PersonnelUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    personnelId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    sujet?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    dateLecture?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    personnelId: number
    type: string
    sujet: string
    message: string
    lu?: boolean
    dateLecture?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    sujet?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    dateLecture?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    personnelId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    sujet?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    dateLecture?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
    user?: PersonnelCreateNestedOneWithoutAuditLogsInput
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    userId?: number | null
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: PersonnelUpdateOneWithoutAuditLogsNestedInput
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    userId?: number | null
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type EnumCategorieFilter<$PrismaModel = never> = {
    equals?: $Enums.Categorie | EnumCategorieFieldRefInput<$PrismaModel>
    in?: $Enums.Categorie[] | ListEnumCategorieFieldRefInput<$PrismaModel>
    notIn?: $Enums.Categorie[] | ListEnumCategorieFieldRefInput<$PrismaModel>
    not?: NestedEnumCategorieFilter<$PrismaModel> | $Enums.Categorie
  }

  export type EnumStatutPersonnelFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutPersonnel | EnumStatutPersonnelFieldRefInput<$PrismaModel>
    in?: $Enums.StatutPersonnel[] | ListEnumStatutPersonnelFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutPersonnel[] | ListEnumStatutPersonnelFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutPersonnelFilter<$PrismaModel> | $Enums.StatutPersonnel
  }

  export type EnumRoleNullableListFilter<$PrismaModel = never> = {
    equals?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel> | null
    has?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel> | null
    hasEvery?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    hasSome?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CentreRelationFilter = {
    is?: CentreWhereInput
    isNot?: CentreWhereInput
  }

  export type AptitudeMedicaleNullableRelationFilter = {
    is?: AptitudeMedicaleWhereInput | null
    isNot?: AptitudeMedicaleWhereInput | null
  }

  export type CompetenceListRelationFilter = {
    every?: CompetenceWhereInput
    some?: CompetenceWhereInput
    none?: CompetenceWhereInput
  }

  export type InscriptionFMPAListRelationFilter = {
    every?: InscriptionFMPAWhereInput
    some?: InscriptionFMPAWhereInput
    none?: InscriptionFMPAWhereInput
  }

  export type SessionFMPAListRelationFilter = {
    every?: SessionFMPAWhereInput
    some?: SessionFMPAWhereInput
    none?: SessionFMPAWhereInput
  }

  export type SignatureFMPAListRelationFilter = {
    every?: SignatureFMPAWhereInput
    some?: SignatureFMPAWhereInput
    none?: SignatureFMPAWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type AuditLogListRelationFilter = {
    every?: AuditLogWhereInput
    some?: AuditLogWhereInput
    none?: AuditLogWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CompetenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type InscriptionFMPAOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionFMPAOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SignatureFMPAOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AuditLogOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PersonnelCountOrderByAggregateInput = {
    id?: SortOrder
    matricule?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    grade?: SortOrder
    centreId?: SortOrder
    categorie?: SortOrder
    statut?: SortOrder
    roles?: SortOrder
    refreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PersonnelAvgOrderByAggregateInput = {
    id?: SortOrder
    centreId?: SortOrder
  }

  export type PersonnelMaxOrderByAggregateInput = {
    id?: SortOrder
    matricule?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    grade?: SortOrder
    centreId?: SortOrder
    categorie?: SortOrder
    statut?: SortOrder
    refreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PersonnelMinOrderByAggregateInput = {
    id?: SortOrder
    matricule?: SortOrder
    nom?: SortOrder
    prenom?: SortOrder
    email?: SortOrder
    telephone?: SortOrder
    password?: SortOrder
    grade?: SortOrder
    centreId?: SortOrder
    categorie?: SortOrder
    statut?: SortOrder
    refreshToken?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PersonnelSumOrderByAggregateInput = {
    id?: SortOrder
    centreId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type EnumCategorieWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Categorie | EnumCategorieFieldRefInput<$PrismaModel>
    in?: $Enums.Categorie[] | ListEnumCategorieFieldRefInput<$PrismaModel>
    notIn?: $Enums.Categorie[] | ListEnumCategorieFieldRefInput<$PrismaModel>
    not?: NestedEnumCategorieWithAggregatesFilter<$PrismaModel> | $Enums.Categorie
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategorieFilter<$PrismaModel>
    _max?: NestedEnumCategorieFilter<$PrismaModel>
  }

  export type EnumStatutPersonnelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutPersonnel | EnumStatutPersonnelFieldRefInput<$PrismaModel>
    in?: $Enums.StatutPersonnel[] | ListEnumStatutPersonnelFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutPersonnel[] | ListEnumStatutPersonnelFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutPersonnelWithAggregatesFilter<$PrismaModel> | $Enums.StatutPersonnel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutPersonnelFilter<$PrismaModel>
    _max?: NestedEnumStatutPersonnelFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PersonnelListRelationFilter = {
    every?: PersonnelWhereInput
    some?: PersonnelWhereInput
    none?: PersonnelWhereInput
  }

  export type PersonnelOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CentreCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    nom?: SortOrder
    type?: SortOrder
    adresse?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CentreAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CentreMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    nom?: SortOrder
    type?: SortOrder
    adresse?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CentreMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    nom?: SortOrder
    type?: SortOrder
    adresse?: SortOrder
    telephone?: SortOrder
    email?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CentreSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type TypeFMPACountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    libelle?: SortOrder
    dureeHeures?: SortOrder
    tauxHoraire?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TypeFMPAAvgOrderByAggregateInput = {
    id?: SortOrder
    dureeHeures?: SortOrder
    tauxHoraire?: SortOrder
  }

  export type TypeFMPAMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    libelle?: SortOrder
    dureeHeures?: SortOrder
    tauxHoraire?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TypeFMPAMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    libelle?: SortOrder
    dureeHeures?: SortOrder
    tauxHoraire?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TypeFMPASumOrderByAggregateInput = {
    id?: SortOrder
    dureeHeures?: SortOrder
    tauxHoraire?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type EnumStatutSessionFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutSession | EnumStatutSessionFieldRefInput<$PrismaModel>
    in?: $Enums.StatutSession[] | ListEnumStatutSessionFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutSession[] | ListEnumStatutSessionFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutSessionFilter<$PrismaModel> | $Enums.StatutSession
  }

  export type TypeFMPARelationFilter = {
    is?: TypeFMPAWhereInput
    isNot?: TypeFMPAWhereInput
  }

  export type PersonnelRelationFilter = {
    is?: PersonnelWhereInput
    isNot?: PersonnelWhereInput
  }

  export type ExportTTAListRelationFilter = {
    every?: ExportTTAWhereInput
    some?: ExportTTAWhereInput
    none?: ExportTTAWhereInput
  }

  export type ExportTTAOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionFMPACountOrderByAggregateInput = {
    id?: SortOrder
    typeFMPAId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    lieu?: SortOrder
    placesMax?: SortOrder
    placesOccupees?: SortOrder
    formateurPrincipalId?: SortOrder
    centreId?: SortOrder
    statut?: SortOrder
    codeTTA?: SortOrder
    tauxHoraire?: SortOrder
    observations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionFMPAAvgOrderByAggregateInput = {
    id?: SortOrder
    typeFMPAId?: SortOrder
    placesMax?: SortOrder
    placesOccupees?: SortOrder
    formateurPrincipalId?: SortOrder
    centreId?: SortOrder
    tauxHoraire?: SortOrder
  }

  export type SessionFMPAMaxOrderByAggregateInput = {
    id?: SortOrder
    typeFMPAId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    lieu?: SortOrder
    placesMax?: SortOrder
    placesOccupees?: SortOrder
    formateurPrincipalId?: SortOrder
    centreId?: SortOrder
    statut?: SortOrder
    codeTTA?: SortOrder
    tauxHoraire?: SortOrder
    observations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionFMPAMinOrderByAggregateInput = {
    id?: SortOrder
    typeFMPAId?: SortOrder
    dateDebut?: SortOrder
    dateFin?: SortOrder
    lieu?: SortOrder
    placesMax?: SortOrder
    placesOccupees?: SortOrder
    formateurPrincipalId?: SortOrder
    centreId?: SortOrder
    statut?: SortOrder
    codeTTA?: SortOrder
    tauxHoraire?: SortOrder
    observations?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type SessionFMPASumOrderByAggregateInput = {
    id?: SortOrder
    typeFMPAId?: SortOrder
    placesMax?: SortOrder
    placesOccupees?: SortOrder
    formateurPrincipalId?: SortOrder
    centreId?: SortOrder
    tauxHoraire?: SortOrder
  }

  export type EnumStatutSessionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutSession | EnumStatutSessionFieldRefInput<$PrismaModel>
    in?: $Enums.StatutSession[] | ListEnumStatutSessionFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutSession[] | ListEnumStatutSessionFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutSessionWithAggregatesFilter<$PrismaModel> | $Enums.StatutSession
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutSessionFilter<$PrismaModel>
    _max?: NestedEnumStatutSessionFilter<$PrismaModel>
  }

  export type EnumStatutInscriptionFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutInscription | EnumStatutInscriptionFieldRefInput<$PrismaModel>
    in?: $Enums.StatutInscription[] | ListEnumStatutInscriptionFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutInscription[] | ListEnumStatutInscriptionFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutInscriptionFilter<$PrismaModel> | $Enums.StatutInscription
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type SessionFMPARelationFilter = {
    is?: SessionFMPAWhereInput
    isNot?: SessionFMPAWhereInput
  }

  export type InscriptionFMPASessionIdPersonnelIdCompoundUniqueInput = {
    sessionId: number
    personnelId: number
  }

  export type InscriptionFMPACountOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    personnelId?: SortOrder
    statut?: SortOrder
    present?: SortOrder
    signatureElectronique?: SortOrder
    dateSignature?: SortOrder
    heuresValidees?: SortOrder
    montantTTA?: SortOrder
    dateInscription?: SortOrder
    dateModification?: SortOrder
  }

  export type InscriptionFMPAAvgOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    personnelId?: SortOrder
    heuresValidees?: SortOrder
    montantTTA?: SortOrder
  }

  export type InscriptionFMPAMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    personnelId?: SortOrder
    statut?: SortOrder
    present?: SortOrder
    signatureElectronique?: SortOrder
    dateSignature?: SortOrder
    heuresValidees?: SortOrder
    montantTTA?: SortOrder
    dateInscription?: SortOrder
    dateModification?: SortOrder
  }

  export type InscriptionFMPAMinOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    personnelId?: SortOrder
    statut?: SortOrder
    present?: SortOrder
    signatureElectronique?: SortOrder
    dateSignature?: SortOrder
    heuresValidees?: SortOrder
    montantTTA?: SortOrder
    dateInscription?: SortOrder
    dateModification?: SortOrder
  }

  export type InscriptionFMPASumOrderByAggregateInput = {
    id?: SortOrder
    sessionId?: SortOrder
    personnelId?: SortOrder
    heuresValidees?: SortOrder
    montantTTA?: SortOrder
  }

  export type EnumStatutInscriptionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutInscription | EnumStatutInscriptionFieldRefInput<$PrismaModel>
    in?: $Enums.StatutInscription[] | ListEnumStatutInscriptionFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutInscription[] | ListEnumStatutInscriptionFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutInscriptionWithAggregatesFilter<$PrismaModel> | $Enums.StatutInscription
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutInscriptionFilter<$PrismaModel>
    _max?: NestedEnumStatutInscriptionFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type SignatureFMPACountOrderByAggregateInput = {
    id?: SortOrder
    sessionFMPAId?: SortOrder
    personnelId?: SortOrder
    type?: SortOrder
    signature?: SortOrder
    dateSignature?: SortOrder
  }

  export type SignatureFMPAAvgOrderByAggregateInput = {
    sessionFMPAId?: SortOrder
    personnelId?: SortOrder
  }

  export type SignatureFMPAMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionFMPAId?: SortOrder
    personnelId?: SortOrder
    type?: SortOrder
    signature?: SortOrder
    dateSignature?: SortOrder
  }

  export type SignatureFMPAMinOrderByAggregateInput = {
    id?: SortOrder
    sessionFMPAId?: SortOrder
    personnelId?: SortOrder
    type?: SortOrder
    signature?: SortOrder
    dateSignature?: SortOrder
  }

  export type SignatureFMPASumOrderByAggregateInput = {
    sessionFMPAId?: SortOrder
    personnelId?: SortOrder
  }

  export type EnumStatutAptitudeFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutAptitude | EnumStatutAptitudeFieldRefInput<$PrismaModel>
    in?: $Enums.StatutAptitude[] | ListEnumStatutAptitudeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutAptitude[] | ListEnumStatutAptitudeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutAptitudeFilter<$PrismaModel> | $Enums.StatutAptitude
  }

  export type AptitudeMedicaleCountOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
    statut?: SortOrder
    dateVisite?: SortOrder
    dateProchainExamen?: SortOrder
    restrictions?: SortOrder
    medecin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AptitudeMedicaleAvgOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
  }

  export type AptitudeMedicaleMaxOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
    statut?: SortOrder
    dateVisite?: SortOrder
    dateProchainExamen?: SortOrder
    restrictions?: SortOrder
    medecin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AptitudeMedicaleMinOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
    statut?: SortOrder
    dateVisite?: SortOrder
    dateProchainExamen?: SortOrder
    restrictions?: SortOrder
    medecin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AptitudeMedicaleSumOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
  }

  export type EnumStatutAptitudeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutAptitude | EnumStatutAptitudeFieldRefInput<$PrismaModel>
    in?: $Enums.StatutAptitude[] | ListEnumStatutAptitudeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutAptitude[] | ListEnumStatutAptitudeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutAptitudeWithAggregatesFilter<$PrismaModel> | $Enums.StatutAptitude
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutAptitudeFilter<$PrismaModel>
    _max?: NestedEnumStatutAptitudeFilter<$PrismaModel>
  }

  export type CompetenceCountOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
    code?: SortOrder
    libelle?: SortOrder
    dateObtention?: SortOrder
    dateExpiration?: SortOrder
    niveau?: SortOrder
    organisme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompetenceAvgOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
  }

  export type CompetenceMaxOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
    code?: SortOrder
    libelle?: SortOrder
    dateObtention?: SortOrder
    dateExpiration?: SortOrder
    niveau?: SortOrder
    organisme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompetenceMinOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
    code?: SortOrder
    libelle?: SortOrder
    dateObtention?: SortOrder
    dateExpiration?: SortOrder
    niveau?: SortOrder
    organisme?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CompetenceSumOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SessionFMPANullableRelationFilter = {
    is?: SessionFMPAWhereInput | null
    isNot?: SessionFMPAWhereInput | null
  }

  export type ExportTTACountOrderByAggregateInput = {
    id?: SortOrder
    mois?: SortOrder
    centreId?: SortOrder
    sessionId?: SortOrder
    nombreLignes?: SortOrder
    montantTotal?: SortOrder
    fichierCsv?: SortOrder
    statut?: SortOrder
    validePar?: SortOrder
    dateValidation?: SortOrder
    createdAt?: SortOrder
  }

  export type ExportTTAAvgOrderByAggregateInput = {
    id?: SortOrder
    centreId?: SortOrder
    sessionId?: SortOrder
    nombreLignes?: SortOrder
    montantTotal?: SortOrder
    validePar?: SortOrder
  }

  export type ExportTTAMaxOrderByAggregateInput = {
    id?: SortOrder
    mois?: SortOrder
    centreId?: SortOrder
    sessionId?: SortOrder
    nombreLignes?: SortOrder
    montantTotal?: SortOrder
    fichierCsv?: SortOrder
    statut?: SortOrder
    validePar?: SortOrder
    dateValidation?: SortOrder
    createdAt?: SortOrder
  }

  export type ExportTTAMinOrderByAggregateInput = {
    id?: SortOrder
    mois?: SortOrder
    centreId?: SortOrder
    sessionId?: SortOrder
    nombreLignes?: SortOrder
    montantTotal?: SortOrder
    fichierCsv?: SortOrder
    statut?: SortOrder
    validePar?: SortOrder
    dateValidation?: SortOrder
    createdAt?: SortOrder
  }

  export type ExportTTASumOrderByAggregateInput = {
    id?: SortOrder
    centreId?: SortOrder
    sessionId?: SortOrder
    nombreLignes?: SortOrder
    montantTotal?: SortOrder
    validePar?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
    type?: SortOrder
    sujet?: SortOrder
    message?: SortOrder
    lu?: SortOrder
    dateLecture?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
    type?: SortOrder
    sujet?: SortOrder
    message?: SortOrder
    lu?: SortOrder
    dateLecture?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
    type?: SortOrder
    sujet?: SortOrder
    message?: SortOrder
    lu?: SortOrder
    dateLecture?: SortOrder
    createdAt?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    personnelId?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type PersonnelNullableRelationFilter = {
    is?: PersonnelWhereInput | null
    isNot?: PersonnelWhereInput | null
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    oldValues?: SortOrder
    newValues?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    action?: SortOrder
    entity?: SortOrder
    entityId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    createdAt?: SortOrder
  }

  export type AuditLogSumOrderByAggregateInput = {
    userId?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type PersonnelCreaterolesInput = {
    set: $Enums.Role[]
  }

  export type CentreCreateNestedOneWithoutPersonnelsInput = {
    create?: XOR<CentreCreateWithoutPersonnelsInput, CentreUncheckedCreateWithoutPersonnelsInput>
    connectOrCreate?: CentreCreateOrConnectWithoutPersonnelsInput
    connect?: CentreWhereUniqueInput
  }

  export type AptitudeMedicaleCreateNestedOneWithoutPersonnelInput = {
    create?: XOR<AptitudeMedicaleCreateWithoutPersonnelInput, AptitudeMedicaleUncheckedCreateWithoutPersonnelInput>
    connectOrCreate?: AptitudeMedicaleCreateOrConnectWithoutPersonnelInput
    connect?: AptitudeMedicaleWhereUniqueInput
  }

  export type CompetenceCreateNestedManyWithoutPersonnelInput = {
    create?: XOR<CompetenceCreateWithoutPersonnelInput, CompetenceUncheckedCreateWithoutPersonnelInput> | CompetenceCreateWithoutPersonnelInput[] | CompetenceUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: CompetenceCreateOrConnectWithoutPersonnelInput | CompetenceCreateOrConnectWithoutPersonnelInput[]
    createMany?: CompetenceCreateManyPersonnelInputEnvelope
    connect?: CompetenceWhereUniqueInput | CompetenceWhereUniqueInput[]
  }

  export type InscriptionFMPACreateNestedManyWithoutPersonnelInput = {
    create?: XOR<InscriptionFMPACreateWithoutPersonnelInput, InscriptionFMPAUncheckedCreateWithoutPersonnelInput> | InscriptionFMPACreateWithoutPersonnelInput[] | InscriptionFMPAUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: InscriptionFMPACreateOrConnectWithoutPersonnelInput | InscriptionFMPACreateOrConnectWithoutPersonnelInput[]
    createMany?: InscriptionFMPACreateManyPersonnelInputEnvelope
    connect?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
  }

  export type SessionFMPACreateNestedManyWithoutFormateurPrincipalInput = {
    create?: XOR<SessionFMPACreateWithoutFormateurPrincipalInput, SessionFMPAUncheckedCreateWithoutFormateurPrincipalInput> | SessionFMPACreateWithoutFormateurPrincipalInput[] | SessionFMPAUncheckedCreateWithoutFormateurPrincipalInput[]
    connectOrCreate?: SessionFMPACreateOrConnectWithoutFormateurPrincipalInput | SessionFMPACreateOrConnectWithoutFormateurPrincipalInput[]
    createMany?: SessionFMPACreateManyFormateurPrincipalInputEnvelope
    connect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
  }

  export type SignatureFMPACreateNestedManyWithoutPersonnelInput = {
    create?: XOR<SignatureFMPACreateWithoutPersonnelInput, SignatureFMPAUncheckedCreateWithoutPersonnelInput> | SignatureFMPACreateWithoutPersonnelInput[] | SignatureFMPAUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: SignatureFMPACreateOrConnectWithoutPersonnelInput | SignatureFMPACreateOrConnectWithoutPersonnelInput[]
    createMany?: SignatureFMPACreateManyPersonnelInputEnvelope
    connect?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutPersonnelInput = {
    create?: XOR<NotificationCreateWithoutPersonnelInput, NotificationUncheckedCreateWithoutPersonnelInput> | NotificationCreateWithoutPersonnelInput[] | NotificationUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutPersonnelInput | NotificationCreateOrConnectWithoutPersonnelInput[]
    createMany?: NotificationCreateManyPersonnelInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type AptitudeMedicaleUncheckedCreateNestedOneWithoutPersonnelInput = {
    create?: XOR<AptitudeMedicaleCreateWithoutPersonnelInput, AptitudeMedicaleUncheckedCreateWithoutPersonnelInput>
    connectOrCreate?: AptitudeMedicaleCreateOrConnectWithoutPersonnelInput
    connect?: AptitudeMedicaleWhereUniqueInput
  }

  export type CompetenceUncheckedCreateNestedManyWithoutPersonnelInput = {
    create?: XOR<CompetenceCreateWithoutPersonnelInput, CompetenceUncheckedCreateWithoutPersonnelInput> | CompetenceCreateWithoutPersonnelInput[] | CompetenceUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: CompetenceCreateOrConnectWithoutPersonnelInput | CompetenceCreateOrConnectWithoutPersonnelInput[]
    createMany?: CompetenceCreateManyPersonnelInputEnvelope
    connect?: CompetenceWhereUniqueInput | CompetenceWhereUniqueInput[]
  }

  export type InscriptionFMPAUncheckedCreateNestedManyWithoutPersonnelInput = {
    create?: XOR<InscriptionFMPACreateWithoutPersonnelInput, InscriptionFMPAUncheckedCreateWithoutPersonnelInput> | InscriptionFMPACreateWithoutPersonnelInput[] | InscriptionFMPAUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: InscriptionFMPACreateOrConnectWithoutPersonnelInput | InscriptionFMPACreateOrConnectWithoutPersonnelInput[]
    createMany?: InscriptionFMPACreateManyPersonnelInputEnvelope
    connect?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
  }

  export type SessionFMPAUncheckedCreateNestedManyWithoutFormateurPrincipalInput = {
    create?: XOR<SessionFMPACreateWithoutFormateurPrincipalInput, SessionFMPAUncheckedCreateWithoutFormateurPrincipalInput> | SessionFMPACreateWithoutFormateurPrincipalInput[] | SessionFMPAUncheckedCreateWithoutFormateurPrincipalInput[]
    connectOrCreate?: SessionFMPACreateOrConnectWithoutFormateurPrincipalInput | SessionFMPACreateOrConnectWithoutFormateurPrincipalInput[]
    createMany?: SessionFMPACreateManyFormateurPrincipalInputEnvelope
    connect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
  }

  export type SignatureFMPAUncheckedCreateNestedManyWithoutPersonnelInput = {
    create?: XOR<SignatureFMPACreateWithoutPersonnelInput, SignatureFMPAUncheckedCreateWithoutPersonnelInput> | SignatureFMPACreateWithoutPersonnelInput[] | SignatureFMPAUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: SignatureFMPACreateOrConnectWithoutPersonnelInput | SignatureFMPACreateOrConnectWithoutPersonnelInput[]
    createMany?: SignatureFMPACreateManyPersonnelInputEnvelope
    connect?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutPersonnelInput = {
    create?: XOR<NotificationCreateWithoutPersonnelInput, NotificationUncheckedCreateWithoutPersonnelInput> | NotificationCreateWithoutPersonnelInput[] | NotificationUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutPersonnelInput | NotificationCreateOrConnectWithoutPersonnelInput[]
    createMany?: NotificationCreateManyPersonnelInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type AuditLogUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type EnumCategorieFieldUpdateOperationsInput = {
    set?: $Enums.Categorie
  }

  export type EnumStatutPersonnelFieldUpdateOperationsInput = {
    set?: $Enums.StatutPersonnel
  }

  export type PersonnelUpdaterolesInput = {
    set?: $Enums.Role[]
    push?: $Enums.Role | $Enums.Role[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type CentreUpdateOneRequiredWithoutPersonnelsNestedInput = {
    create?: XOR<CentreCreateWithoutPersonnelsInput, CentreUncheckedCreateWithoutPersonnelsInput>
    connectOrCreate?: CentreCreateOrConnectWithoutPersonnelsInput
    upsert?: CentreUpsertWithoutPersonnelsInput
    connect?: CentreWhereUniqueInput
    update?: XOR<XOR<CentreUpdateToOneWithWhereWithoutPersonnelsInput, CentreUpdateWithoutPersonnelsInput>, CentreUncheckedUpdateWithoutPersonnelsInput>
  }

  export type AptitudeMedicaleUpdateOneWithoutPersonnelNestedInput = {
    create?: XOR<AptitudeMedicaleCreateWithoutPersonnelInput, AptitudeMedicaleUncheckedCreateWithoutPersonnelInput>
    connectOrCreate?: AptitudeMedicaleCreateOrConnectWithoutPersonnelInput
    upsert?: AptitudeMedicaleUpsertWithoutPersonnelInput
    disconnect?: AptitudeMedicaleWhereInput | boolean
    delete?: AptitudeMedicaleWhereInput | boolean
    connect?: AptitudeMedicaleWhereUniqueInput
    update?: XOR<XOR<AptitudeMedicaleUpdateToOneWithWhereWithoutPersonnelInput, AptitudeMedicaleUpdateWithoutPersonnelInput>, AptitudeMedicaleUncheckedUpdateWithoutPersonnelInput>
  }

  export type CompetenceUpdateManyWithoutPersonnelNestedInput = {
    create?: XOR<CompetenceCreateWithoutPersonnelInput, CompetenceUncheckedCreateWithoutPersonnelInput> | CompetenceCreateWithoutPersonnelInput[] | CompetenceUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: CompetenceCreateOrConnectWithoutPersonnelInput | CompetenceCreateOrConnectWithoutPersonnelInput[]
    upsert?: CompetenceUpsertWithWhereUniqueWithoutPersonnelInput | CompetenceUpsertWithWhereUniqueWithoutPersonnelInput[]
    createMany?: CompetenceCreateManyPersonnelInputEnvelope
    set?: CompetenceWhereUniqueInput | CompetenceWhereUniqueInput[]
    disconnect?: CompetenceWhereUniqueInput | CompetenceWhereUniqueInput[]
    delete?: CompetenceWhereUniqueInput | CompetenceWhereUniqueInput[]
    connect?: CompetenceWhereUniqueInput | CompetenceWhereUniqueInput[]
    update?: CompetenceUpdateWithWhereUniqueWithoutPersonnelInput | CompetenceUpdateWithWhereUniqueWithoutPersonnelInput[]
    updateMany?: CompetenceUpdateManyWithWhereWithoutPersonnelInput | CompetenceUpdateManyWithWhereWithoutPersonnelInput[]
    deleteMany?: CompetenceScalarWhereInput | CompetenceScalarWhereInput[]
  }

  export type InscriptionFMPAUpdateManyWithoutPersonnelNestedInput = {
    create?: XOR<InscriptionFMPACreateWithoutPersonnelInput, InscriptionFMPAUncheckedCreateWithoutPersonnelInput> | InscriptionFMPACreateWithoutPersonnelInput[] | InscriptionFMPAUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: InscriptionFMPACreateOrConnectWithoutPersonnelInput | InscriptionFMPACreateOrConnectWithoutPersonnelInput[]
    upsert?: InscriptionFMPAUpsertWithWhereUniqueWithoutPersonnelInput | InscriptionFMPAUpsertWithWhereUniqueWithoutPersonnelInput[]
    createMany?: InscriptionFMPACreateManyPersonnelInputEnvelope
    set?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    disconnect?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    delete?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    connect?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    update?: InscriptionFMPAUpdateWithWhereUniqueWithoutPersonnelInput | InscriptionFMPAUpdateWithWhereUniqueWithoutPersonnelInput[]
    updateMany?: InscriptionFMPAUpdateManyWithWhereWithoutPersonnelInput | InscriptionFMPAUpdateManyWithWhereWithoutPersonnelInput[]
    deleteMany?: InscriptionFMPAScalarWhereInput | InscriptionFMPAScalarWhereInput[]
  }

  export type SessionFMPAUpdateManyWithoutFormateurPrincipalNestedInput = {
    create?: XOR<SessionFMPACreateWithoutFormateurPrincipalInput, SessionFMPAUncheckedCreateWithoutFormateurPrincipalInput> | SessionFMPACreateWithoutFormateurPrincipalInput[] | SessionFMPAUncheckedCreateWithoutFormateurPrincipalInput[]
    connectOrCreate?: SessionFMPACreateOrConnectWithoutFormateurPrincipalInput | SessionFMPACreateOrConnectWithoutFormateurPrincipalInput[]
    upsert?: SessionFMPAUpsertWithWhereUniqueWithoutFormateurPrincipalInput | SessionFMPAUpsertWithWhereUniqueWithoutFormateurPrincipalInput[]
    createMany?: SessionFMPACreateManyFormateurPrincipalInputEnvelope
    set?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    disconnect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    delete?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    connect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    update?: SessionFMPAUpdateWithWhereUniqueWithoutFormateurPrincipalInput | SessionFMPAUpdateWithWhereUniqueWithoutFormateurPrincipalInput[]
    updateMany?: SessionFMPAUpdateManyWithWhereWithoutFormateurPrincipalInput | SessionFMPAUpdateManyWithWhereWithoutFormateurPrincipalInput[]
    deleteMany?: SessionFMPAScalarWhereInput | SessionFMPAScalarWhereInput[]
  }

  export type SignatureFMPAUpdateManyWithoutPersonnelNestedInput = {
    create?: XOR<SignatureFMPACreateWithoutPersonnelInput, SignatureFMPAUncheckedCreateWithoutPersonnelInput> | SignatureFMPACreateWithoutPersonnelInput[] | SignatureFMPAUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: SignatureFMPACreateOrConnectWithoutPersonnelInput | SignatureFMPACreateOrConnectWithoutPersonnelInput[]
    upsert?: SignatureFMPAUpsertWithWhereUniqueWithoutPersonnelInput | SignatureFMPAUpsertWithWhereUniqueWithoutPersonnelInput[]
    createMany?: SignatureFMPACreateManyPersonnelInputEnvelope
    set?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    disconnect?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    delete?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    connect?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    update?: SignatureFMPAUpdateWithWhereUniqueWithoutPersonnelInput | SignatureFMPAUpdateWithWhereUniqueWithoutPersonnelInput[]
    updateMany?: SignatureFMPAUpdateManyWithWhereWithoutPersonnelInput | SignatureFMPAUpdateManyWithWhereWithoutPersonnelInput[]
    deleteMany?: SignatureFMPAScalarWhereInput | SignatureFMPAScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutPersonnelNestedInput = {
    create?: XOR<NotificationCreateWithoutPersonnelInput, NotificationUncheckedCreateWithoutPersonnelInput> | NotificationCreateWithoutPersonnelInput[] | NotificationUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutPersonnelInput | NotificationCreateOrConnectWithoutPersonnelInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutPersonnelInput | NotificationUpsertWithWhereUniqueWithoutPersonnelInput[]
    createMany?: NotificationCreateManyPersonnelInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutPersonnelInput | NotificationUpdateWithWhereUniqueWithoutPersonnelInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutPersonnelInput | NotificationUpdateManyWithWhereWithoutPersonnelInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AptitudeMedicaleUncheckedUpdateOneWithoutPersonnelNestedInput = {
    create?: XOR<AptitudeMedicaleCreateWithoutPersonnelInput, AptitudeMedicaleUncheckedCreateWithoutPersonnelInput>
    connectOrCreate?: AptitudeMedicaleCreateOrConnectWithoutPersonnelInput
    upsert?: AptitudeMedicaleUpsertWithoutPersonnelInput
    disconnect?: AptitudeMedicaleWhereInput | boolean
    delete?: AptitudeMedicaleWhereInput | boolean
    connect?: AptitudeMedicaleWhereUniqueInput
    update?: XOR<XOR<AptitudeMedicaleUpdateToOneWithWhereWithoutPersonnelInput, AptitudeMedicaleUpdateWithoutPersonnelInput>, AptitudeMedicaleUncheckedUpdateWithoutPersonnelInput>
  }

  export type CompetenceUncheckedUpdateManyWithoutPersonnelNestedInput = {
    create?: XOR<CompetenceCreateWithoutPersonnelInput, CompetenceUncheckedCreateWithoutPersonnelInput> | CompetenceCreateWithoutPersonnelInput[] | CompetenceUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: CompetenceCreateOrConnectWithoutPersonnelInput | CompetenceCreateOrConnectWithoutPersonnelInput[]
    upsert?: CompetenceUpsertWithWhereUniqueWithoutPersonnelInput | CompetenceUpsertWithWhereUniqueWithoutPersonnelInput[]
    createMany?: CompetenceCreateManyPersonnelInputEnvelope
    set?: CompetenceWhereUniqueInput | CompetenceWhereUniqueInput[]
    disconnect?: CompetenceWhereUniqueInput | CompetenceWhereUniqueInput[]
    delete?: CompetenceWhereUniqueInput | CompetenceWhereUniqueInput[]
    connect?: CompetenceWhereUniqueInput | CompetenceWhereUniqueInput[]
    update?: CompetenceUpdateWithWhereUniqueWithoutPersonnelInput | CompetenceUpdateWithWhereUniqueWithoutPersonnelInput[]
    updateMany?: CompetenceUpdateManyWithWhereWithoutPersonnelInput | CompetenceUpdateManyWithWhereWithoutPersonnelInput[]
    deleteMany?: CompetenceScalarWhereInput | CompetenceScalarWhereInput[]
  }

  export type InscriptionFMPAUncheckedUpdateManyWithoutPersonnelNestedInput = {
    create?: XOR<InscriptionFMPACreateWithoutPersonnelInput, InscriptionFMPAUncheckedCreateWithoutPersonnelInput> | InscriptionFMPACreateWithoutPersonnelInput[] | InscriptionFMPAUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: InscriptionFMPACreateOrConnectWithoutPersonnelInput | InscriptionFMPACreateOrConnectWithoutPersonnelInput[]
    upsert?: InscriptionFMPAUpsertWithWhereUniqueWithoutPersonnelInput | InscriptionFMPAUpsertWithWhereUniqueWithoutPersonnelInput[]
    createMany?: InscriptionFMPACreateManyPersonnelInputEnvelope
    set?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    disconnect?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    delete?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    connect?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    update?: InscriptionFMPAUpdateWithWhereUniqueWithoutPersonnelInput | InscriptionFMPAUpdateWithWhereUniqueWithoutPersonnelInput[]
    updateMany?: InscriptionFMPAUpdateManyWithWhereWithoutPersonnelInput | InscriptionFMPAUpdateManyWithWhereWithoutPersonnelInput[]
    deleteMany?: InscriptionFMPAScalarWhereInput | InscriptionFMPAScalarWhereInput[]
  }

  export type SessionFMPAUncheckedUpdateManyWithoutFormateurPrincipalNestedInput = {
    create?: XOR<SessionFMPACreateWithoutFormateurPrincipalInput, SessionFMPAUncheckedCreateWithoutFormateurPrincipalInput> | SessionFMPACreateWithoutFormateurPrincipalInput[] | SessionFMPAUncheckedCreateWithoutFormateurPrincipalInput[]
    connectOrCreate?: SessionFMPACreateOrConnectWithoutFormateurPrincipalInput | SessionFMPACreateOrConnectWithoutFormateurPrincipalInput[]
    upsert?: SessionFMPAUpsertWithWhereUniqueWithoutFormateurPrincipalInput | SessionFMPAUpsertWithWhereUniqueWithoutFormateurPrincipalInput[]
    createMany?: SessionFMPACreateManyFormateurPrincipalInputEnvelope
    set?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    disconnect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    delete?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    connect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    update?: SessionFMPAUpdateWithWhereUniqueWithoutFormateurPrincipalInput | SessionFMPAUpdateWithWhereUniqueWithoutFormateurPrincipalInput[]
    updateMany?: SessionFMPAUpdateManyWithWhereWithoutFormateurPrincipalInput | SessionFMPAUpdateManyWithWhereWithoutFormateurPrincipalInput[]
    deleteMany?: SessionFMPAScalarWhereInput | SessionFMPAScalarWhereInput[]
  }

  export type SignatureFMPAUncheckedUpdateManyWithoutPersonnelNestedInput = {
    create?: XOR<SignatureFMPACreateWithoutPersonnelInput, SignatureFMPAUncheckedCreateWithoutPersonnelInput> | SignatureFMPACreateWithoutPersonnelInput[] | SignatureFMPAUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: SignatureFMPACreateOrConnectWithoutPersonnelInput | SignatureFMPACreateOrConnectWithoutPersonnelInput[]
    upsert?: SignatureFMPAUpsertWithWhereUniqueWithoutPersonnelInput | SignatureFMPAUpsertWithWhereUniqueWithoutPersonnelInput[]
    createMany?: SignatureFMPACreateManyPersonnelInputEnvelope
    set?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    disconnect?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    delete?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    connect?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    update?: SignatureFMPAUpdateWithWhereUniqueWithoutPersonnelInput | SignatureFMPAUpdateWithWhereUniqueWithoutPersonnelInput[]
    updateMany?: SignatureFMPAUpdateManyWithWhereWithoutPersonnelInput | SignatureFMPAUpdateManyWithWhereWithoutPersonnelInput[]
    deleteMany?: SignatureFMPAScalarWhereInput | SignatureFMPAScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutPersonnelNestedInput = {
    create?: XOR<NotificationCreateWithoutPersonnelInput, NotificationUncheckedCreateWithoutPersonnelInput> | NotificationCreateWithoutPersonnelInput[] | NotificationUncheckedCreateWithoutPersonnelInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutPersonnelInput | NotificationCreateOrConnectWithoutPersonnelInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutPersonnelInput | NotificationUpsertWithWhereUniqueWithoutPersonnelInput[]
    createMany?: NotificationCreateManyPersonnelInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutPersonnelInput | NotificationUpdateWithWhereUniqueWithoutPersonnelInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutPersonnelInput | NotificationUpdateManyWithWhereWithoutPersonnelInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type AuditLogUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput> | AuditLogCreateWithoutUserInput[] | AuditLogUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AuditLogCreateOrConnectWithoutUserInput | AuditLogCreateOrConnectWithoutUserInput[]
    upsert?: AuditLogUpsertWithWhereUniqueWithoutUserInput | AuditLogUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AuditLogCreateManyUserInputEnvelope
    set?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    disconnect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    delete?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    connect?: AuditLogWhereUniqueInput | AuditLogWhereUniqueInput[]
    update?: AuditLogUpdateWithWhereUniqueWithoutUserInput | AuditLogUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AuditLogUpdateManyWithWhereWithoutUserInput | AuditLogUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
  }

  export type PersonnelCreateNestedManyWithoutCentreInput = {
    create?: XOR<PersonnelCreateWithoutCentreInput, PersonnelUncheckedCreateWithoutCentreInput> | PersonnelCreateWithoutCentreInput[] | PersonnelUncheckedCreateWithoutCentreInput[]
    connectOrCreate?: PersonnelCreateOrConnectWithoutCentreInput | PersonnelCreateOrConnectWithoutCentreInput[]
    createMany?: PersonnelCreateManyCentreInputEnvelope
    connect?: PersonnelWhereUniqueInput | PersonnelWhereUniqueInput[]
  }

  export type SessionFMPACreateNestedManyWithoutCentreInput = {
    create?: XOR<SessionFMPACreateWithoutCentreInput, SessionFMPAUncheckedCreateWithoutCentreInput> | SessionFMPACreateWithoutCentreInput[] | SessionFMPAUncheckedCreateWithoutCentreInput[]
    connectOrCreate?: SessionFMPACreateOrConnectWithoutCentreInput | SessionFMPACreateOrConnectWithoutCentreInput[]
    createMany?: SessionFMPACreateManyCentreInputEnvelope
    connect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
  }

  export type PersonnelUncheckedCreateNestedManyWithoutCentreInput = {
    create?: XOR<PersonnelCreateWithoutCentreInput, PersonnelUncheckedCreateWithoutCentreInput> | PersonnelCreateWithoutCentreInput[] | PersonnelUncheckedCreateWithoutCentreInput[]
    connectOrCreate?: PersonnelCreateOrConnectWithoutCentreInput | PersonnelCreateOrConnectWithoutCentreInput[]
    createMany?: PersonnelCreateManyCentreInputEnvelope
    connect?: PersonnelWhereUniqueInput | PersonnelWhereUniqueInput[]
  }

  export type SessionFMPAUncheckedCreateNestedManyWithoutCentreInput = {
    create?: XOR<SessionFMPACreateWithoutCentreInput, SessionFMPAUncheckedCreateWithoutCentreInput> | SessionFMPACreateWithoutCentreInput[] | SessionFMPAUncheckedCreateWithoutCentreInput[]
    connectOrCreate?: SessionFMPACreateOrConnectWithoutCentreInput | SessionFMPACreateOrConnectWithoutCentreInput[]
    createMany?: SessionFMPACreateManyCentreInputEnvelope
    connect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
  }

  export type PersonnelUpdateManyWithoutCentreNestedInput = {
    create?: XOR<PersonnelCreateWithoutCentreInput, PersonnelUncheckedCreateWithoutCentreInput> | PersonnelCreateWithoutCentreInput[] | PersonnelUncheckedCreateWithoutCentreInput[]
    connectOrCreate?: PersonnelCreateOrConnectWithoutCentreInput | PersonnelCreateOrConnectWithoutCentreInput[]
    upsert?: PersonnelUpsertWithWhereUniqueWithoutCentreInput | PersonnelUpsertWithWhereUniqueWithoutCentreInput[]
    createMany?: PersonnelCreateManyCentreInputEnvelope
    set?: PersonnelWhereUniqueInput | PersonnelWhereUniqueInput[]
    disconnect?: PersonnelWhereUniqueInput | PersonnelWhereUniqueInput[]
    delete?: PersonnelWhereUniqueInput | PersonnelWhereUniqueInput[]
    connect?: PersonnelWhereUniqueInput | PersonnelWhereUniqueInput[]
    update?: PersonnelUpdateWithWhereUniqueWithoutCentreInput | PersonnelUpdateWithWhereUniqueWithoutCentreInput[]
    updateMany?: PersonnelUpdateManyWithWhereWithoutCentreInput | PersonnelUpdateManyWithWhereWithoutCentreInput[]
    deleteMany?: PersonnelScalarWhereInput | PersonnelScalarWhereInput[]
  }

  export type SessionFMPAUpdateManyWithoutCentreNestedInput = {
    create?: XOR<SessionFMPACreateWithoutCentreInput, SessionFMPAUncheckedCreateWithoutCentreInput> | SessionFMPACreateWithoutCentreInput[] | SessionFMPAUncheckedCreateWithoutCentreInput[]
    connectOrCreate?: SessionFMPACreateOrConnectWithoutCentreInput | SessionFMPACreateOrConnectWithoutCentreInput[]
    upsert?: SessionFMPAUpsertWithWhereUniqueWithoutCentreInput | SessionFMPAUpsertWithWhereUniqueWithoutCentreInput[]
    createMany?: SessionFMPACreateManyCentreInputEnvelope
    set?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    disconnect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    delete?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    connect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    update?: SessionFMPAUpdateWithWhereUniqueWithoutCentreInput | SessionFMPAUpdateWithWhereUniqueWithoutCentreInput[]
    updateMany?: SessionFMPAUpdateManyWithWhereWithoutCentreInput | SessionFMPAUpdateManyWithWhereWithoutCentreInput[]
    deleteMany?: SessionFMPAScalarWhereInput | SessionFMPAScalarWhereInput[]
  }

  export type PersonnelUncheckedUpdateManyWithoutCentreNestedInput = {
    create?: XOR<PersonnelCreateWithoutCentreInput, PersonnelUncheckedCreateWithoutCentreInput> | PersonnelCreateWithoutCentreInput[] | PersonnelUncheckedCreateWithoutCentreInput[]
    connectOrCreate?: PersonnelCreateOrConnectWithoutCentreInput | PersonnelCreateOrConnectWithoutCentreInput[]
    upsert?: PersonnelUpsertWithWhereUniqueWithoutCentreInput | PersonnelUpsertWithWhereUniqueWithoutCentreInput[]
    createMany?: PersonnelCreateManyCentreInputEnvelope
    set?: PersonnelWhereUniqueInput | PersonnelWhereUniqueInput[]
    disconnect?: PersonnelWhereUniqueInput | PersonnelWhereUniqueInput[]
    delete?: PersonnelWhereUniqueInput | PersonnelWhereUniqueInput[]
    connect?: PersonnelWhereUniqueInput | PersonnelWhereUniqueInput[]
    update?: PersonnelUpdateWithWhereUniqueWithoutCentreInput | PersonnelUpdateWithWhereUniqueWithoutCentreInput[]
    updateMany?: PersonnelUpdateManyWithWhereWithoutCentreInput | PersonnelUpdateManyWithWhereWithoutCentreInput[]
    deleteMany?: PersonnelScalarWhereInput | PersonnelScalarWhereInput[]
  }

  export type SessionFMPAUncheckedUpdateManyWithoutCentreNestedInput = {
    create?: XOR<SessionFMPACreateWithoutCentreInput, SessionFMPAUncheckedCreateWithoutCentreInput> | SessionFMPACreateWithoutCentreInput[] | SessionFMPAUncheckedCreateWithoutCentreInput[]
    connectOrCreate?: SessionFMPACreateOrConnectWithoutCentreInput | SessionFMPACreateOrConnectWithoutCentreInput[]
    upsert?: SessionFMPAUpsertWithWhereUniqueWithoutCentreInput | SessionFMPAUpsertWithWhereUniqueWithoutCentreInput[]
    createMany?: SessionFMPACreateManyCentreInputEnvelope
    set?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    disconnect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    delete?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    connect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    update?: SessionFMPAUpdateWithWhereUniqueWithoutCentreInput | SessionFMPAUpdateWithWhereUniqueWithoutCentreInput[]
    updateMany?: SessionFMPAUpdateManyWithWhereWithoutCentreInput | SessionFMPAUpdateManyWithWhereWithoutCentreInput[]
    deleteMany?: SessionFMPAScalarWhereInput | SessionFMPAScalarWhereInput[]
  }

  export type SessionFMPACreateNestedManyWithoutTypeFMPAInput = {
    create?: XOR<SessionFMPACreateWithoutTypeFMPAInput, SessionFMPAUncheckedCreateWithoutTypeFMPAInput> | SessionFMPACreateWithoutTypeFMPAInput[] | SessionFMPAUncheckedCreateWithoutTypeFMPAInput[]
    connectOrCreate?: SessionFMPACreateOrConnectWithoutTypeFMPAInput | SessionFMPACreateOrConnectWithoutTypeFMPAInput[]
    createMany?: SessionFMPACreateManyTypeFMPAInputEnvelope
    connect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
  }

  export type SessionFMPAUncheckedCreateNestedManyWithoutTypeFMPAInput = {
    create?: XOR<SessionFMPACreateWithoutTypeFMPAInput, SessionFMPAUncheckedCreateWithoutTypeFMPAInput> | SessionFMPACreateWithoutTypeFMPAInput[] | SessionFMPAUncheckedCreateWithoutTypeFMPAInput[]
    connectOrCreate?: SessionFMPACreateOrConnectWithoutTypeFMPAInput | SessionFMPACreateOrConnectWithoutTypeFMPAInput[]
    createMany?: SessionFMPACreateManyTypeFMPAInputEnvelope
    connect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionFMPAUpdateManyWithoutTypeFMPANestedInput = {
    create?: XOR<SessionFMPACreateWithoutTypeFMPAInput, SessionFMPAUncheckedCreateWithoutTypeFMPAInput> | SessionFMPACreateWithoutTypeFMPAInput[] | SessionFMPAUncheckedCreateWithoutTypeFMPAInput[]
    connectOrCreate?: SessionFMPACreateOrConnectWithoutTypeFMPAInput | SessionFMPACreateOrConnectWithoutTypeFMPAInput[]
    upsert?: SessionFMPAUpsertWithWhereUniqueWithoutTypeFMPAInput | SessionFMPAUpsertWithWhereUniqueWithoutTypeFMPAInput[]
    createMany?: SessionFMPACreateManyTypeFMPAInputEnvelope
    set?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    disconnect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    delete?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    connect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    update?: SessionFMPAUpdateWithWhereUniqueWithoutTypeFMPAInput | SessionFMPAUpdateWithWhereUniqueWithoutTypeFMPAInput[]
    updateMany?: SessionFMPAUpdateManyWithWhereWithoutTypeFMPAInput | SessionFMPAUpdateManyWithWhereWithoutTypeFMPAInput[]
    deleteMany?: SessionFMPAScalarWhereInput | SessionFMPAScalarWhereInput[]
  }

  export type SessionFMPAUncheckedUpdateManyWithoutTypeFMPANestedInput = {
    create?: XOR<SessionFMPACreateWithoutTypeFMPAInput, SessionFMPAUncheckedCreateWithoutTypeFMPAInput> | SessionFMPACreateWithoutTypeFMPAInput[] | SessionFMPAUncheckedCreateWithoutTypeFMPAInput[]
    connectOrCreate?: SessionFMPACreateOrConnectWithoutTypeFMPAInput | SessionFMPACreateOrConnectWithoutTypeFMPAInput[]
    upsert?: SessionFMPAUpsertWithWhereUniqueWithoutTypeFMPAInput | SessionFMPAUpsertWithWhereUniqueWithoutTypeFMPAInput[]
    createMany?: SessionFMPACreateManyTypeFMPAInputEnvelope
    set?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    disconnect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    delete?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    connect?: SessionFMPAWhereUniqueInput | SessionFMPAWhereUniqueInput[]
    update?: SessionFMPAUpdateWithWhereUniqueWithoutTypeFMPAInput | SessionFMPAUpdateWithWhereUniqueWithoutTypeFMPAInput[]
    updateMany?: SessionFMPAUpdateManyWithWhereWithoutTypeFMPAInput | SessionFMPAUpdateManyWithWhereWithoutTypeFMPAInput[]
    deleteMany?: SessionFMPAScalarWhereInput | SessionFMPAScalarWhereInput[]
  }

  export type TypeFMPACreateNestedOneWithoutSessionsInput = {
    create?: XOR<TypeFMPACreateWithoutSessionsInput, TypeFMPAUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: TypeFMPACreateOrConnectWithoutSessionsInput
    connect?: TypeFMPAWhereUniqueInput
  }

  export type PersonnelCreateNestedOneWithoutSessionsFormateurInput = {
    create?: XOR<PersonnelCreateWithoutSessionsFormateurInput, PersonnelUncheckedCreateWithoutSessionsFormateurInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutSessionsFormateurInput
    connect?: PersonnelWhereUniqueInput
  }

  export type CentreCreateNestedOneWithoutSessionsInput = {
    create?: XOR<CentreCreateWithoutSessionsInput, CentreUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: CentreCreateOrConnectWithoutSessionsInput
    connect?: CentreWhereUniqueInput
  }

  export type InscriptionFMPACreateNestedManyWithoutSessionInput = {
    create?: XOR<InscriptionFMPACreateWithoutSessionInput, InscriptionFMPAUncheckedCreateWithoutSessionInput> | InscriptionFMPACreateWithoutSessionInput[] | InscriptionFMPAUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: InscriptionFMPACreateOrConnectWithoutSessionInput | InscriptionFMPACreateOrConnectWithoutSessionInput[]
    createMany?: InscriptionFMPACreateManySessionInputEnvelope
    connect?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
  }

  export type SignatureFMPACreateNestedManyWithoutSessionInput = {
    create?: XOR<SignatureFMPACreateWithoutSessionInput, SignatureFMPAUncheckedCreateWithoutSessionInput> | SignatureFMPACreateWithoutSessionInput[] | SignatureFMPAUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SignatureFMPACreateOrConnectWithoutSessionInput | SignatureFMPACreateOrConnectWithoutSessionInput[]
    createMany?: SignatureFMPACreateManySessionInputEnvelope
    connect?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
  }

  export type ExportTTACreateNestedManyWithoutSessionInput = {
    create?: XOR<ExportTTACreateWithoutSessionInput, ExportTTAUncheckedCreateWithoutSessionInput> | ExportTTACreateWithoutSessionInput[] | ExportTTAUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ExportTTACreateOrConnectWithoutSessionInput | ExportTTACreateOrConnectWithoutSessionInput[]
    createMany?: ExportTTACreateManySessionInputEnvelope
    connect?: ExportTTAWhereUniqueInput | ExportTTAWhereUniqueInput[]
  }

  export type InscriptionFMPAUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<InscriptionFMPACreateWithoutSessionInput, InscriptionFMPAUncheckedCreateWithoutSessionInput> | InscriptionFMPACreateWithoutSessionInput[] | InscriptionFMPAUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: InscriptionFMPACreateOrConnectWithoutSessionInput | InscriptionFMPACreateOrConnectWithoutSessionInput[]
    createMany?: InscriptionFMPACreateManySessionInputEnvelope
    connect?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
  }

  export type SignatureFMPAUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<SignatureFMPACreateWithoutSessionInput, SignatureFMPAUncheckedCreateWithoutSessionInput> | SignatureFMPACreateWithoutSessionInput[] | SignatureFMPAUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SignatureFMPACreateOrConnectWithoutSessionInput | SignatureFMPACreateOrConnectWithoutSessionInput[]
    createMany?: SignatureFMPACreateManySessionInputEnvelope
    connect?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
  }

  export type ExportTTAUncheckedCreateNestedManyWithoutSessionInput = {
    create?: XOR<ExportTTACreateWithoutSessionInput, ExportTTAUncheckedCreateWithoutSessionInput> | ExportTTACreateWithoutSessionInput[] | ExportTTAUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ExportTTACreateOrConnectWithoutSessionInput | ExportTTACreateOrConnectWithoutSessionInput[]
    createMany?: ExportTTACreateManySessionInputEnvelope
    connect?: ExportTTAWhereUniqueInput | ExportTTAWhereUniqueInput[]
  }

  export type EnumStatutSessionFieldUpdateOperationsInput = {
    set?: $Enums.StatutSession
  }

  export type TypeFMPAUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<TypeFMPACreateWithoutSessionsInput, TypeFMPAUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: TypeFMPACreateOrConnectWithoutSessionsInput
    upsert?: TypeFMPAUpsertWithoutSessionsInput
    connect?: TypeFMPAWhereUniqueInput
    update?: XOR<XOR<TypeFMPAUpdateToOneWithWhereWithoutSessionsInput, TypeFMPAUpdateWithoutSessionsInput>, TypeFMPAUncheckedUpdateWithoutSessionsInput>
  }

  export type PersonnelUpdateOneRequiredWithoutSessionsFormateurNestedInput = {
    create?: XOR<PersonnelCreateWithoutSessionsFormateurInput, PersonnelUncheckedCreateWithoutSessionsFormateurInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutSessionsFormateurInput
    upsert?: PersonnelUpsertWithoutSessionsFormateurInput
    connect?: PersonnelWhereUniqueInput
    update?: XOR<XOR<PersonnelUpdateToOneWithWhereWithoutSessionsFormateurInput, PersonnelUpdateWithoutSessionsFormateurInput>, PersonnelUncheckedUpdateWithoutSessionsFormateurInput>
  }

  export type CentreUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<CentreCreateWithoutSessionsInput, CentreUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: CentreCreateOrConnectWithoutSessionsInput
    upsert?: CentreUpsertWithoutSessionsInput
    connect?: CentreWhereUniqueInput
    update?: XOR<XOR<CentreUpdateToOneWithWhereWithoutSessionsInput, CentreUpdateWithoutSessionsInput>, CentreUncheckedUpdateWithoutSessionsInput>
  }

  export type InscriptionFMPAUpdateManyWithoutSessionNestedInput = {
    create?: XOR<InscriptionFMPACreateWithoutSessionInput, InscriptionFMPAUncheckedCreateWithoutSessionInput> | InscriptionFMPACreateWithoutSessionInput[] | InscriptionFMPAUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: InscriptionFMPACreateOrConnectWithoutSessionInput | InscriptionFMPACreateOrConnectWithoutSessionInput[]
    upsert?: InscriptionFMPAUpsertWithWhereUniqueWithoutSessionInput | InscriptionFMPAUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: InscriptionFMPACreateManySessionInputEnvelope
    set?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    disconnect?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    delete?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    connect?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    update?: InscriptionFMPAUpdateWithWhereUniqueWithoutSessionInput | InscriptionFMPAUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: InscriptionFMPAUpdateManyWithWhereWithoutSessionInput | InscriptionFMPAUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: InscriptionFMPAScalarWhereInput | InscriptionFMPAScalarWhereInput[]
  }

  export type SignatureFMPAUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SignatureFMPACreateWithoutSessionInput, SignatureFMPAUncheckedCreateWithoutSessionInput> | SignatureFMPACreateWithoutSessionInput[] | SignatureFMPAUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SignatureFMPACreateOrConnectWithoutSessionInput | SignatureFMPACreateOrConnectWithoutSessionInput[]
    upsert?: SignatureFMPAUpsertWithWhereUniqueWithoutSessionInput | SignatureFMPAUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SignatureFMPACreateManySessionInputEnvelope
    set?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    disconnect?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    delete?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    connect?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    update?: SignatureFMPAUpdateWithWhereUniqueWithoutSessionInput | SignatureFMPAUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SignatureFMPAUpdateManyWithWhereWithoutSessionInput | SignatureFMPAUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SignatureFMPAScalarWhereInput | SignatureFMPAScalarWhereInput[]
  }

  export type ExportTTAUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ExportTTACreateWithoutSessionInput, ExportTTAUncheckedCreateWithoutSessionInput> | ExportTTACreateWithoutSessionInput[] | ExportTTAUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ExportTTACreateOrConnectWithoutSessionInput | ExportTTACreateOrConnectWithoutSessionInput[]
    upsert?: ExportTTAUpsertWithWhereUniqueWithoutSessionInput | ExportTTAUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ExportTTACreateManySessionInputEnvelope
    set?: ExportTTAWhereUniqueInput | ExportTTAWhereUniqueInput[]
    disconnect?: ExportTTAWhereUniqueInput | ExportTTAWhereUniqueInput[]
    delete?: ExportTTAWhereUniqueInput | ExportTTAWhereUniqueInput[]
    connect?: ExportTTAWhereUniqueInput | ExportTTAWhereUniqueInput[]
    update?: ExportTTAUpdateWithWhereUniqueWithoutSessionInput | ExportTTAUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ExportTTAUpdateManyWithWhereWithoutSessionInput | ExportTTAUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ExportTTAScalarWhereInput | ExportTTAScalarWhereInput[]
  }

  export type InscriptionFMPAUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<InscriptionFMPACreateWithoutSessionInput, InscriptionFMPAUncheckedCreateWithoutSessionInput> | InscriptionFMPACreateWithoutSessionInput[] | InscriptionFMPAUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: InscriptionFMPACreateOrConnectWithoutSessionInput | InscriptionFMPACreateOrConnectWithoutSessionInput[]
    upsert?: InscriptionFMPAUpsertWithWhereUniqueWithoutSessionInput | InscriptionFMPAUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: InscriptionFMPACreateManySessionInputEnvelope
    set?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    disconnect?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    delete?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    connect?: InscriptionFMPAWhereUniqueInput | InscriptionFMPAWhereUniqueInput[]
    update?: InscriptionFMPAUpdateWithWhereUniqueWithoutSessionInput | InscriptionFMPAUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: InscriptionFMPAUpdateManyWithWhereWithoutSessionInput | InscriptionFMPAUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: InscriptionFMPAScalarWhereInput | InscriptionFMPAScalarWhereInput[]
  }

  export type SignatureFMPAUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<SignatureFMPACreateWithoutSessionInput, SignatureFMPAUncheckedCreateWithoutSessionInput> | SignatureFMPACreateWithoutSessionInput[] | SignatureFMPAUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: SignatureFMPACreateOrConnectWithoutSessionInput | SignatureFMPACreateOrConnectWithoutSessionInput[]
    upsert?: SignatureFMPAUpsertWithWhereUniqueWithoutSessionInput | SignatureFMPAUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: SignatureFMPACreateManySessionInputEnvelope
    set?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    disconnect?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    delete?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    connect?: SignatureFMPAWhereUniqueInput | SignatureFMPAWhereUniqueInput[]
    update?: SignatureFMPAUpdateWithWhereUniqueWithoutSessionInput | SignatureFMPAUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: SignatureFMPAUpdateManyWithWhereWithoutSessionInput | SignatureFMPAUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: SignatureFMPAScalarWhereInput | SignatureFMPAScalarWhereInput[]
  }

  export type ExportTTAUncheckedUpdateManyWithoutSessionNestedInput = {
    create?: XOR<ExportTTACreateWithoutSessionInput, ExportTTAUncheckedCreateWithoutSessionInput> | ExportTTACreateWithoutSessionInput[] | ExportTTAUncheckedCreateWithoutSessionInput[]
    connectOrCreate?: ExportTTACreateOrConnectWithoutSessionInput | ExportTTACreateOrConnectWithoutSessionInput[]
    upsert?: ExportTTAUpsertWithWhereUniqueWithoutSessionInput | ExportTTAUpsertWithWhereUniqueWithoutSessionInput[]
    createMany?: ExportTTACreateManySessionInputEnvelope
    set?: ExportTTAWhereUniqueInput | ExportTTAWhereUniqueInput[]
    disconnect?: ExportTTAWhereUniqueInput | ExportTTAWhereUniqueInput[]
    delete?: ExportTTAWhereUniqueInput | ExportTTAWhereUniqueInput[]
    connect?: ExportTTAWhereUniqueInput | ExportTTAWhereUniqueInput[]
    update?: ExportTTAUpdateWithWhereUniqueWithoutSessionInput | ExportTTAUpdateWithWhereUniqueWithoutSessionInput[]
    updateMany?: ExportTTAUpdateManyWithWhereWithoutSessionInput | ExportTTAUpdateManyWithWhereWithoutSessionInput[]
    deleteMany?: ExportTTAScalarWhereInput | ExportTTAScalarWhereInput[]
  }

  export type SessionFMPACreateNestedOneWithoutInscriptionsInput = {
    create?: XOR<SessionFMPACreateWithoutInscriptionsInput, SessionFMPAUncheckedCreateWithoutInscriptionsInput>
    connectOrCreate?: SessionFMPACreateOrConnectWithoutInscriptionsInput
    connect?: SessionFMPAWhereUniqueInput
  }

  export type PersonnelCreateNestedOneWithoutInscriptionsInput = {
    create?: XOR<PersonnelCreateWithoutInscriptionsInput, PersonnelUncheckedCreateWithoutInscriptionsInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutInscriptionsInput
    connect?: PersonnelWhereUniqueInput
  }

  export type EnumStatutInscriptionFieldUpdateOperationsInput = {
    set?: $Enums.StatutInscription
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionFMPAUpdateOneRequiredWithoutInscriptionsNestedInput = {
    create?: XOR<SessionFMPACreateWithoutInscriptionsInput, SessionFMPAUncheckedCreateWithoutInscriptionsInput>
    connectOrCreate?: SessionFMPACreateOrConnectWithoutInscriptionsInput
    upsert?: SessionFMPAUpsertWithoutInscriptionsInput
    connect?: SessionFMPAWhereUniqueInput
    update?: XOR<XOR<SessionFMPAUpdateToOneWithWhereWithoutInscriptionsInput, SessionFMPAUpdateWithoutInscriptionsInput>, SessionFMPAUncheckedUpdateWithoutInscriptionsInput>
  }

  export type PersonnelUpdateOneRequiredWithoutInscriptionsNestedInput = {
    create?: XOR<PersonnelCreateWithoutInscriptionsInput, PersonnelUncheckedCreateWithoutInscriptionsInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutInscriptionsInput
    upsert?: PersonnelUpsertWithoutInscriptionsInput
    connect?: PersonnelWhereUniqueInput
    update?: XOR<XOR<PersonnelUpdateToOneWithWhereWithoutInscriptionsInput, PersonnelUpdateWithoutInscriptionsInput>, PersonnelUncheckedUpdateWithoutInscriptionsInput>
  }

  export type SessionFMPACreateNestedOneWithoutSignaturesInput = {
    create?: XOR<SessionFMPACreateWithoutSignaturesInput, SessionFMPAUncheckedCreateWithoutSignaturesInput>
    connectOrCreate?: SessionFMPACreateOrConnectWithoutSignaturesInput
    connect?: SessionFMPAWhereUniqueInput
  }

  export type PersonnelCreateNestedOneWithoutSignaturesInput = {
    create?: XOR<PersonnelCreateWithoutSignaturesInput, PersonnelUncheckedCreateWithoutSignaturesInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutSignaturesInput
    connect?: PersonnelWhereUniqueInput
  }

  export type SessionFMPAUpdateOneRequiredWithoutSignaturesNestedInput = {
    create?: XOR<SessionFMPACreateWithoutSignaturesInput, SessionFMPAUncheckedCreateWithoutSignaturesInput>
    connectOrCreate?: SessionFMPACreateOrConnectWithoutSignaturesInput
    upsert?: SessionFMPAUpsertWithoutSignaturesInput
    connect?: SessionFMPAWhereUniqueInput
    update?: XOR<XOR<SessionFMPAUpdateToOneWithWhereWithoutSignaturesInput, SessionFMPAUpdateWithoutSignaturesInput>, SessionFMPAUncheckedUpdateWithoutSignaturesInput>
  }

  export type PersonnelUpdateOneRequiredWithoutSignaturesNestedInput = {
    create?: XOR<PersonnelCreateWithoutSignaturesInput, PersonnelUncheckedCreateWithoutSignaturesInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutSignaturesInput
    upsert?: PersonnelUpsertWithoutSignaturesInput
    connect?: PersonnelWhereUniqueInput
    update?: XOR<XOR<PersonnelUpdateToOneWithWhereWithoutSignaturesInput, PersonnelUpdateWithoutSignaturesInput>, PersonnelUncheckedUpdateWithoutSignaturesInput>
  }

  export type PersonnelCreateNestedOneWithoutAptitudeMedicaleInput = {
    create?: XOR<PersonnelCreateWithoutAptitudeMedicaleInput, PersonnelUncheckedCreateWithoutAptitudeMedicaleInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutAptitudeMedicaleInput
    connect?: PersonnelWhereUniqueInput
  }

  export type EnumStatutAptitudeFieldUpdateOperationsInput = {
    set?: $Enums.StatutAptitude
  }

  export type PersonnelUpdateOneRequiredWithoutAptitudeMedicaleNestedInput = {
    create?: XOR<PersonnelCreateWithoutAptitudeMedicaleInput, PersonnelUncheckedCreateWithoutAptitudeMedicaleInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutAptitudeMedicaleInput
    upsert?: PersonnelUpsertWithoutAptitudeMedicaleInput
    connect?: PersonnelWhereUniqueInput
    update?: XOR<XOR<PersonnelUpdateToOneWithWhereWithoutAptitudeMedicaleInput, PersonnelUpdateWithoutAptitudeMedicaleInput>, PersonnelUncheckedUpdateWithoutAptitudeMedicaleInput>
  }

  export type PersonnelCreateNestedOneWithoutCompetencesInput = {
    create?: XOR<PersonnelCreateWithoutCompetencesInput, PersonnelUncheckedCreateWithoutCompetencesInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutCompetencesInput
    connect?: PersonnelWhereUniqueInput
  }

  export type PersonnelUpdateOneRequiredWithoutCompetencesNestedInput = {
    create?: XOR<PersonnelCreateWithoutCompetencesInput, PersonnelUncheckedCreateWithoutCompetencesInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutCompetencesInput
    upsert?: PersonnelUpsertWithoutCompetencesInput
    connect?: PersonnelWhereUniqueInput
    update?: XOR<XOR<PersonnelUpdateToOneWithWhereWithoutCompetencesInput, PersonnelUpdateWithoutCompetencesInput>, PersonnelUncheckedUpdateWithoutCompetencesInput>
  }

  export type SessionFMPACreateNestedOneWithoutExportsTTAInput = {
    create?: XOR<SessionFMPACreateWithoutExportsTTAInput, SessionFMPAUncheckedCreateWithoutExportsTTAInput>
    connectOrCreate?: SessionFMPACreateOrConnectWithoutExportsTTAInput
    connect?: SessionFMPAWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type SessionFMPAUpdateOneWithoutExportsTTANestedInput = {
    create?: XOR<SessionFMPACreateWithoutExportsTTAInput, SessionFMPAUncheckedCreateWithoutExportsTTAInput>
    connectOrCreate?: SessionFMPACreateOrConnectWithoutExportsTTAInput
    upsert?: SessionFMPAUpsertWithoutExportsTTAInput
    disconnect?: SessionFMPAWhereInput | boolean
    delete?: SessionFMPAWhereInput | boolean
    connect?: SessionFMPAWhereUniqueInput
    update?: XOR<XOR<SessionFMPAUpdateToOneWithWhereWithoutExportsTTAInput, SessionFMPAUpdateWithoutExportsTTAInput>, SessionFMPAUncheckedUpdateWithoutExportsTTAInput>
  }

  export type PersonnelCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<PersonnelCreateWithoutNotificationsInput, PersonnelUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutNotificationsInput
    connect?: PersonnelWhereUniqueInput
  }

  export type PersonnelUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<PersonnelCreateWithoutNotificationsInput, PersonnelUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutNotificationsInput
    upsert?: PersonnelUpsertWithoutNotificationsInput
    connect?: PersonnelWhereUniqueInput
    update?: XOR<XOR<PersonnelUpdateToOneWithWhereWithoutNotificationsInput, PersonnelUpdateWithoutNotificationsInput>, PersonnelUncheckedUpdateWithoutNotificationsInput>
  }

  export type PersonnelCreateNestedOneWithoutAuditLogsInput = {
    create?: XOR<PersonnelCreateWithoutAuditLogsInput, PersonnelUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutAuditLogsInput
    connect?: PersonnelWhereUniqueInput
  }

  export type PersonnelUpdateOneWithoutAuditLogsNestedInput = {
    create?: XOR<PersonnelCreateWithoutAuditLogsInput, PersonnelUncheckedCreateWithoutAuditLogsInput>
    connectOrCreate?: PersonnelCreateOrConnectWithoutAuditLogsInput
    upsert?: PersonnelUpsertWithoutAuditLogsInput
    disconnect?: PersonnelWhereInput | boolean
    delete?: PersonnelWhereInput | boolean
    connect?: PersonnelWhereUniqueInput
    update?: XOR<XOR<PersonnelUpdateToOneWithWhereWithoutAuditLogsInput, PersonnelUpdateWithoutAuditLogsInput>, PersonnelUncheckedUpdateWithoutAuditLogsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedEnumCategorieFilter<$PrismaModel = never> = {
    equals?: $Enums.Categorie | EnumCategorieFieldRefInput<$PrismaModel>
    in?: $Enums.Categorie[] | ListEnumCategorieFieldRefInput<$PrismaModel>
    notIn?: $Enums.Categorie[] | ListEnumCategorieFieldRefInput<$PrismaModel>
    not?: NestedEnumCategorieFilter<$PrismaModel> | $Enums.Categorie
  }

  export type NestedEnumStatutPersonnelFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutPersonnel | EnumStatutPersonnelFieldRefInput<$PrismaModel>
    in?: $Enums.StatutPersonnel[] | ListEnumStatutPersonnelFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutPersonnel[] | ListEnumStatutPersonnelFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutPersonnelFilter<$PrismaModel> | $Enums.StatutPersonnel
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumCategorieWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Categorie | EnumCategorieFieldRefInput<$PrismaModel>
    in?: $Enums.Categorie[] | ListEnumCategorieFieldRefInput<$PrismaModel>
    notIn?: $Enums.Categorie[] | ListEnumCategorieFieldRefInput<$PrismaModel>
    not?: NestedEnumCategorieWithAggregatesFilter<$PrismaModel> | $Enums.Categorie
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCategorieFilter<$PrismaModel>
    _max?: NestedEnumCategorieFilter<$PrismaModel>
  }

  export type NestedEnumStatutPersonnelWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutPersonnel | EnumStatutPersonnelFieldRefInput<$PrismaModel>
    in?: $Enums.StatutPersonnel[] | ListEnumStatutPersonnelFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutPersonnel[] | ListEnumStatutPersonnelFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutPersonnelWithAggregatesFilter<$PrismaModel> | $Enums.StatutPersonnel
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutPersonnelFilter<$PrismaModel>
    _max?: NestedEnumStatutPersonnelFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumStatutSessionFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutSession | EnumStatutSessionFieldRefInput<$PrismaModel>
    in?: $Enums.StatutSession[] | ListEnumStatutSessionFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutSession[] | ListEnumStatutSessionFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutSessionFilter<$PrismaModel> | $Enums.StatutSession
  }

  export type NestedEnumStatutSessionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutSession | EnumStatutSessionFieldRefInput<$PrismaModel>
    in?: $Enums.StatutSession[] | ListEnumStatutSessionFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutSession[] | ListEnumStatutSessionFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutSessionWithAggregatesFilter<$PrismaModel> | $Enums.StatutSession
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutSessionFilter<$PrismaModel>
    _max?: NestedEnumStatutSessionFilter<$PrismaModel>
  }

  export type NestedEnumStatutInscriptionFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutInscription | EnumStatutInscriptionFieldRefInput<$PrismaModel>
    in?: $Enums.StatutInscription[] | ListEnumStatutInscriptionFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutInscription[] | ListEnumStatutInscriptionFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutInscriptionFilter<$PrismaModel> | $Enums.StatutInscription
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumStatutInscriptionWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutInscription | EnumStatutInscriptionFieldRefInput<$PrismaModel>
    in?: $Enums.StatutInscription[] | ListEnumStatutInscriptionFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutInscription[] | ListEnumStatutInscriptionFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutInscriptionWithAggregatesFilter<$PrismaModel> | $Enums.StatutInscription
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutInscriptionFilter<$PrismaModel>
    _max?: NestedEnumStatutInscriptionFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumStatutAptitudeFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutAptitude | EnumStatutAptitudeFieldRefInput<$PrismaModel>
    in?: $Enums.StatutAptitude[] | ListEnumStatutAptitudeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutAptitude[] | ListEnumStatutAptitudeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutAptitudeFilter<$PrismaModel> | $Enums.StatutAptitude
  }

  export type NestedEnumStatutAptitudeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.StatutAptitude | EnumStatutAptitudeFieldRefInput<$PrismaModel>
    in?: $Enums.StatutAptitude[] | ListEnumStatutAptitudeFieldRefInput<$PrismaModel>
    notIn?: $Enums.StatutAptitude[] | ListEnumStatutAptitudeFieldRefInput<$PrismaModel>
    not?: NestedEnumStatutAptitudeWithAggregatesFilter<$PrismaModel> | $Enums.StatutAptitude
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumStatutAptitudeFilter<$PrismaModel>
    _max?: NestedEnumStatutAptitudeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type CentreCreateWithoutPersonnelsInput = {
    code: string
    nom: string
    type: string
    adresse?: string | null
    telephone?: string | null
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionFMPACreateNestedManyWithoutCentreInput
  }

  export type CentreUncheckedCreateWithoutPersonnelsInput = {
    id?: number
    code: string
    nom: string
    type: string
    adresse?: string | null
    telephone?: string | null
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    sessions?: SessionFMPAUncheckedCreateNestedManyWithoutCentreInput
  }

  export type CentreCreateOrConnectWithoutPersonnelsInput = {
    where: CentreWhereUniqueInput
    create: XOR<CentreCreateWithoutPersonnelsInput, CentreUncheckedCreateWithoutPersonnelsInput>
  }

  export type AptitudeMedicaleCreateWithoutPersonnelInput = {
    statut?: $Enums.StatutAptitude
    dateVisite: Date | string
    dateProchainExamen: Date | string
    restrictions?: string | null
    medecin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AptitudeMedicaleUncheckedCreateWithoutPersonnelInput = {
    id?: number
    statut?: $Enums.StatutAptitude
    dateVisite: Date | string
    dateProchainExamen: Date | string
    restrictions?: string | null
    medecin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AptitudeMedicaleCreateOrConnectWithoutPersonnelInput = {
    where: AptitudeMedicaleWhereUniqueInput
    create: XOR<AptitudeMedicaleCreateWithoutPersonnelInput, AptitudeMedicaleUncheckedCreateWithoutPersonnelInput>
  }

  export type CompetenceCreateWithoutPersonnelInput = {
    code: string
    libelle: string
    dateObtention: Date | string
    dateExpiration?: Date | string | null
    niveau?: string | null
    organisme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompetenceUncheckedCreateWithoutPersonnelInput = {
    id?: number
    code: string
    libelle: string
    dateObtention: Date | string
    dateExpiration?: Date | string | null
    niveau?: string | null
    organisme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CompetenceCreateOrConnectWithoutPersonnelInput = {
    where: CompetenceWhereUniqueInput
    create: XOR<CompetenceCreateWithoutPersonnelInput, CompetenceUncheckedCreateWithoutPersonnelInput>
  }

  export type CompetenceCreateManyPersonnelInputEnvelope = {
    data: CompetenceCreateManyPersonnelInput | CompetenceCreateManyPersonnelInput[]
    skipDuplicates?: boolean
  }

  export type InscriptionFMPACreateWithoutPersonnelInput = {
    statut?: $Enums.StatutInscription
    present?: boolean
    signatureElectronique?: string | null
    dateSignature?: Date | string | null
    heuresValidees?: number | null
    montantTTA?: number | null
    dateInscription?: Date | string
    dateModification?: Date | string
    session: SessionFMPACreateNestedOneWithoutInscriptionsInput
  }

  export type InscriptionFMPAUncheckedCreateWithoutPersonnelInput = {
    id?: number
    sessionId: number
    statut?: $Enums.StatutInscription
    present?: boolean
    signatureElectronique?: string | null
    dateSignature?: Date | string | null
    heuresValidees?: number | null
    montantTTA?: number | null
    dateInscription?: Date | string
    dateModification?: Date | string
  }

  export type InscriptionFMPACreateOrConnectWithoutPersonnelInput = {
    where: InscriptionFMPAWhereUniqueInput
    create: XOR<InscriptionFMPACreateWithoutPersonnelInput, InscriptionFMPAUncheckedCreateWithoutPersonnelInput>
  }

  export type InscriptionFMPACreateManyPersonnelInputEnvelope = {
    data: InscriptionFMPACreateManyPersonnelInput | InscriptionFMPACreateManyPersonnelInput[]
    skipDuplicates?: boolean
  }

  export type SessionFMPACreateWithoutFormateurPrincipalInput = {
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    typeFMPA: TypeFMPACreateNestedOneWithoutSessionsInput
    centre: CentreCreateNestedOneWithoutSessionsInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutSessionInput
    signatures?: SignatureFMPACreateNestedManyWithoutSessionInput
    exportsTTA?: ExportTTACreateNestedManyWithoutSessionInput
  }

  export type SessionFMPAUncheckedCreateWithoutFormateurPrincipalInput = {
    id?: number
    typeFMPAId: number
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    centreId: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutSessionInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutSessionInput
    exportsTTA?: ExportTTAUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionFMPACreateOrConnectWithoutFormateurPrincipalInput = {
    where: SessionFMPAWhereUniqueInput
    create: XOR<SessionFMPACreateWithoutFormateurPrincipalInput, SessionFMPAUncheckedCreateWithoutFormateurPrincipalInput>
  }

  export type SessionFMPACreateManyFormateurPrincipalInputEnvelope = {
    data: SessionFMPACreateManyFormateurPrincipalInput | SessionFMPACreateManyFormateurPrincipalInput[]
    skipDuplicates?: boolean
  }

  export type SignatureFMPACreateWithoutPersonnelInput = {
    id?: string
    type: string
    signature: string
    dateSignature?: Date | string
    session: SessionFMPACreateNestedOneWithoutSignaturesInput
  }

  export type SignatureFMPAUncheckedCreateWithoutPersonnelInput = {
    id?: string
    sessionFMPAId: number
    type: string
    signature: string
    dateSignature?: Date | string
  }

  export type SignatureFMPACreateOrConnectWithoutPersonnelInput = {
    where: SignatureFMPAWhereUniqueInput
    create: XOR<SignatureFMPACreateWithoutPersonnelInput, SignatureFMPAUncheckedCreateWithoutPersonnelInput>
  }

  export type SignatureFMPACreateManyPersonnelInputEnvelope = {
    data: SignatureFMPACreateManyPersonnelInput | SignatureFMPACreateManyPersonnelInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutPersonnelInput = {
    type: string
    sujet: string
    message: string
    lu?: boolean
    dateLecture?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationUncheckedCreateWithoutPersonnelInput = {
    id?: number
    type: string
    sujet: string
    message: string
    lu?: boolean
    dateLecture?: Date | string | null
    createdAt?: Date | string
  }

  export type NotificationCreateOrConnectWithoutPersonnelInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutPersonnelInput, NotificationUncheckedCreateWithoutPersonnelInput>
  }

  export type NotificationCreateManyPersonnelInputEnvelope = {
    data: NotificationCreateManyPersonnelInput | NotificationCreateManyPersonnelInput[]
    skipDuplicates?: boolean
  }

  export type AuditLogCreateWithoutUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogUncheckedCreateWithoutUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateOrConnectWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogCreateManyUserInputEnvelope = {
    data: AuditLogCreateManyUserInput | AuditLogCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CentreUpsertWithoutPersonnelsInput = {
    update: XOR<CentreUpdateWithoutPersonnelsInput, CentreUncheckedUpdateWithoutPersonnelsInput>
    create: XOR<CentreCreateWithoutPersonnelsInput, CentreUncheckedCreateWithoutPersonnelsInput>
    where?: CentreWhereInput
  }

  export type CentreUpdateToOneWithWhereWithoutPersonnelsInput = {
    where?: CentreWhereInput
    data: XOR<CentreUpdateWithoutPersonnelsInput, CentreUncheckedUpdateWithoutPersonnelsInput>
  }

  export type CentreUpdateWithoutPersonnelsInput = {
    code?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionFMPAUpdateManyWithoutCentreNestedInput
  }

  export type CentreUncheckedUpdateWithoutPersonnelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sessions?: SessionFMPAUncheckedUpdateManyWithoutCentreNestedInput
  }

  export type AptitudeMedicaleUpsertWithoutPersonnelInput = {
    update: XOR<AptitudeMedicaleUpdateWithoutPersonnelInput, AptitudeMedicaleUncheckedUpdateWithoutPersonnelInput>
    create: XOR<AptitudeMedicaleCreateWithoutPersonnelInput, AptitudeMedicaleUncheckedCreateWithoutPersonnelInput>
    where?: AptitudeMedicaleWhereInput
  }

  export type AptitudeMedicaleUpdateToOneWithWhereWithoutPersonnelInput = {
    where?: AptitudeMedicaleWhereInput
    data: XOR<AptitudeMedicaleUpdateWithoutPersonnelInput, AptitudeMedicaleUncheckedUpdateWithoutPersonnelInput>
  }

  export type AptitudeMedicaleUpdateWithoutPersonnelInput = {
    statut?: EnumStatutAptitudeFieldUpdateOperationsInput | $Enums.StatutAptitude
    dateVisite?: DateTimeFieldUpdateOperationsInput | Date | string
    dateProchainExamen?: DateTimeFieldUpdateOperationsInput | Date | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    medecin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AptitudeMedicaleUncheckedUpdateWithoutPersonnelInput = {
    id?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutAptitudeFieldUpdateOperationsInput | $Enums.StatutAptitude
    dateVisite?: DateTimeFieldUpdateOperationsInput | Date | string
    dateProchainExamen?: DateTimeFieldUpdateOperationsInput | Date | string
    restrictions?: NullableStringFieldUpdateOperationsInput | string | null
    medecin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompetenceUpsertWithWhereUniqueWithoutPersonnelInput = {
    where: CompetenceWhereUniqueInput
    update: XOR<CompetenceUpdateWithoutPersonnelInput, CompetenceUncheckedUpdateWithoutPersonnelInput>
    create: XOR<CompetenceCreateWithoutPersonnelInput, CompetenceUncheckedCreateWithoutPersonnelInput>
  }

  export type CompetenceUpdateWithWhereUniqueWithoutPersonnelInput = {
    where: CompetenceWhereUniqueInput
    data: XOR<CompetenceUpdateWithoutPersonnelInput, CompetenceUncheckedUpdateWithoutPersonnelInput>
  }

  export type CompetenceUpdateManyWithWhereWithoutPersonnelInput = {
    where: CompetenceScalarWhereInput
    data: XOR<CompetenceUpdateManyMutationInput, CompetenceUncheckedUpdateManyWithoutPersonnelInput>
  }

  export type CompetenceScalarWhereInput = {
    AND?: CompetenceScalarWhereInput | CompetenceScalarWhereInput[]
    OR?: CompetenceScalarWhereInput[]
    NOT?: CompetenceScalarWhereInput | CompetenceScalarWhereInput[]
    id?: IntFilter<"Competence"> | number
    personnelId?: IntFilter<"Competence"> | number
    code?: StringFilter<"Competence"> | string
    libelle?: StringFilter<"Competence"> | string
    dateObtention?: DateTimeFilter<"Competence"> | Date | string
    dateExpiration?: DateTimeNullableFilter<"Competence"> | Date | string | null
    niveau?: StringNullableFilter<"Competence"> | string | null
    organisme?: StringNullableFilter<"Competence"> | string | null
    createdAt?: DateTimeFilter<"Competence"> | Date | string
    updatedAt?: DateTimeFilter<"Competence"> | Date | string
  }

  export type InscriptionFMPAUpsertWithWhereUniqueWithoutPersonnelInput = {
    where: InscriptionFMPAWhereUniqueInput
    update: XOR<InscriptionFMPAUpdateWithoutPersonnelInput, InscriptionFMPAUncheckedUpdateWithoutPersonnelInput>
    create: XOR<InscriptionFMPACreateWithoutPersonnelInput, InscriptionFMPAUncheckedCreateWithoutPersonnelInput>
  }

  export type InscriptionFMPAUpdateWithWhereUniqueWithoutPersonnelInput = {
    where: InscriptionFMPAWhereUniqueInput
    data: XOR<InscriptionFMPAUpdateWithoutPersonnelInput, InscriptionFMPAUncheckedUpdateWithoutPersonnelInput>
  }

  export type InscriptionFMPAUpdateManyWithWhereWithoutPersonnelInput = {
    where: InscriptionFMPAScalarWhereInput
    data: XOR<InscriptionFMPAUpdateManyMutationInput, InscriptionFMPAUncheckedUpdateManyWithoutPersonnelInput>
  }

  export type InscriptionFMPAScalarWhereInput = {
    AND?: InscriptionFMPAScalarWhereInput | InscriptionFMPAScalarWhereInput[]
    OR?: InscriptionFMPAScalarWhereInput[]
    NOT?: InscriptionFMPAScalarWhereInput | InscriptionFMPAScalarWhereInput[]
    id?: IntFilter<"InscriptionFMPA"> | number
    sessionId?: IntFilter<"InscriptionFMPA"> | number
    personnelId?: IntFilter<"InscriptionFMPA"> | number
    statut?: EnumStatutInscriptionFilter<"InscriptionFMPA"> | $Enums.StatutInscription
    present?: BoolFilter<"InscriptionFMPA"> | boolean
    signatureElectronique?: StringNullableFilter<"InscriptionFMPA"> | string | null
    dateSignature?: DateTimeNullableFilter<"InscriptionFMPA"> | Date | string | null
    heuresValidees?: FloatNullableFilter<"InscriptionFMPA"> | number | null
    montantTTA?: FloatNullableFilter<"InscriptionFMPA"> | number | null
    dateInscription?: DateTimeFilter<"InscriptionFMPA"> | Date | string
    dateModification?: DateTimeFilter<"InscriptionFMPA"> | Date | string
  }

  export type SessionFMPAUpsertWithWhereUniqueWithoutFormateurPrincipalInput = {
    where: SessionFMPAWhereUniqueInput
    update: XOR<SessionFMPAUpdateWithoutFormateurPrincipalInput, SessionFMPAUncheckedUpdateWithoutFormateurPrincipalInput>
    create: XOR<SessionFMPACreateWithoutFormateurPrincipalInput, SessionFMPAUncheckedCreateWithoutFormateurPrincipalInput>
  }

  export type SessionFMPAUpdateWithWhereUniqueWithoutFormateurPrincipalInput = {
    where: SessionFMPAWhereUniqueInput
    data: XOR<SessionFMPAUpdateWithoutFormateurPrincipalInput, SessionFMPAUncheckedUpdateWithoutFormateurPrincipalInput>
  }

  export type SessionFMPAUpdateManyWithWhereWithoutFormateurPrincipalInput = {
    where: SessionFMPAScalarWhereInput
    data: XOR<SessionFMPAUpdateManyMutationInput, SessionFMPAUncheckedUpdateManyWithoutFormateurPrincipalInput>
  }

  export type SessionFMPAScalarWhereInput = {
    AND?: SessionFMPAScalarWhereInput | SessionFMPAScalarWhereInput[]
    OR?: SessionFMPAScalarWhereInput[]
    NOT?: SessionFMPAScalarWhereInput | SessionFMPAScalarWhereInput[]
    id?: IntFilter<"SessionFMPA"> | number
    typeFMPAId?: IntFilter<"SessionFMPA"> | number
    dateDebut?: DateTimeFilter<"SessionFMPA"> | Date | string
    dateFin?: DateTimeFilter<"SessionFMPA"> | Date | string
    lieu?: StringFilter<"SessionFMPA"> | string
    placesMax?: IntFilter<"SessionFMPA"> | number
    placesOccupees?: IntFilter<"SessionFMPA"> | number
    formateurPrincipalId?: IntFilter<"SessionFMPA"> | number
    centreId?: IntFilter<"SessionFMPA"> | number
    statut?: EnumStatutSessionFilter<"SessionFMPA"> | $Enums.StatutSession
    codeTTA?: StringFilter<"SessionFMPA"> | string
    tauxHoraire?: FloatFilter<"SessionFMPA"> | number
    observations?: StringNullableFilter<"SessionFMPA"> | string | null
    createdAt?: DateTimeFilter<"SessionFMPA"> | Date | string
    updatedAt?: DateTimeFilter<"SessionFMPA"> | Date | string
  }

  export type SignatureFMPAUpsertWithWhereUniqueWithoutPersonnelInput = {
    where: SignatureFMPAWhereUniqueInput
    update: XOR<SignatureFMPAUpdateWithoutPersonnelInput, SignatureFMPAUncheckedUpdateWithoutPersonnelInput>
    create: XOR<SignatureFMPACreateWithoutPersonnelInput, SignatureFMPAUncheckedCreateWithoutPersonnelInput>
  }

  export type SignatureFMPAUpdateWithWhereUniqueWithoutPersonnelInput = {
    where: SignatureFMPAWhereUniqueInput
    data: XOR<SignatureFMPAUpdateWithoutPersonnelInput, SignatureFMPAUncheckedUpdateWithoutPersonnelInput>
  }

  export type SignatureFMPAUpdateManyWithWhereWithoutPersonnelInput = {
    where: SignatureFMPAScalarWhereInput
    data: XOR<SignatureFMPAUpdateManyMutationInput, SignatureFMPAUncheckedUpdateManyWithoutPersonnelInput>
  }

  export type SignatureFMPAScalarWhereInput = {
    AND?: SignatureFMPAScalarWhereInput | SignatureFMPAScalarWhereInput[]
    OR?: SignatureFMPAScalarWhereInput[]
    NOT?: SignatureFMPAScalarWhereInput | SignatureFMPAScalarWhereInput[]
    id?: StringFilter<"SignatureFMPA"> | string
    sessionFMPAId?: IntFilter<"SignatureFMPA"> | number
    personnelId?: IntFilter<"SignatureFMPA"> | number
    type?: StringFilter<"SignatureFMPA"> | string
    signature?: StringFilter<"SignatureFMPA"> | string
    dateSignature?: DateTimeFilter<"SignatureFMPA"> | Date | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutPersonnelInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutPersonnelInput, NotificationUncheckedUpdateWithoutPersonnelInput>
    create: XOR<NotificationCreateWithoutPersonnelInput, NotificationUncheckedCreateWithoutPersonnelInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutPersonnelInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutPersonnelInput, NotificationUncheckedUpdateWithoutPersonnelInput>
  }

  export type NotificationUpdateManyWithWhereWithoutPersonnelInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutPersonnelInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    personnelId?: IntFilter<"Notification"> | number
    type?: StringFilter<"Notification"> | string
    sujet?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    lu?: BoolFilter<"Notification"> | boolean
    dateLecture?: DateTimeNullableFilter<"Notification"> | Date | string | null
    createdAt?: DateTimeFilter<"Notification"> | Date | string
  }

  export type AuditLogUpsertWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    update: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
    create: XOR<AuditLogCreateWithoutUserInput, AuditLogUncheckedCreateWithoutUserInput>
  }

  export type AuditLogUpdateWithWhereUniqueWithoutUserInput = {
    where: AuditLogWhereUniqueInput
    data: XOR<AuditLogUpdateWithoutUserInput, AuditLogUncheckedUpdateWithoutUserInput>
  }

  export type AuditLogUpdateManyWithWhereWithoutUserInput = {
    where: AuditLogScalarWhereInput
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyWithoutUserInput>
  }

  export type AuditLogScalarWhereInput = {
    AND?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    OR?: AuditLogScalarWhereInput[]
    NOT?: AuditLogScalarWhereInput | AuditLogScalarWhereInput[]
    id?: StringFilter<"AuditLog"> | string
    userId?: IntNullableFilter<"AuditLog"> | number | null
    action?: StringFilter<"AuditLog"> | string
    entity?: StringFilter<"AuditLog"> | string
    entityId?: StringNullableFilter<"AuditLog"> | string | null
    oldValues?: JsonNullableFilter<"AuditLog">
    newValues?: JsonNullableFilter<"AuditLog">
    ipAddress?: StringNullableFilter<"AuditLog"> | string | null
    userAgent?: StringNullableFilter<"AuditLog"> | string | null
    createdAt?: DateTimeFilter<"AuditLog"> | Date | string
  }

  export type PersonnelCreateWithoutCentreInput = {
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    aptitudeMedicale?: AptitudeMedicaleCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPACreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPACreateNestedManyWithoutPersonnelInput
    notifications?: NotificationCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type PersonnelUncheckedCreateWithoutCentreInput = {
    id?: number
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceUncheckedCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPAUncheckedCreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type PersonnelCreateOrConnectWithoutCentreInput = {
    where: PersonnelWhereUniqueInput
    create: XOR<PersonnelCreateWithoutCentreInput, PersonnelUncheckedCreateWithoutCentreInput>
  }

  export type PersonnelCreateManyCentreInputEnvelope = {
    data: PersonnelCreateManyCentreInput | PersonnelCreateManyCentreInput[]
    skipDuplicates?: boolean
  }

  export type SessionFMPACreateWithoutCentreInput = {
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    typeFMPA: TypeFMPACreateNestedOneWithoutSessionsInput
    formateurPrincipal: PersonnelCreateNestedOneWithoutSessionsFormateurInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutSessionInput
    signatures?: SignatureFMPACreateNestedManyWithoutSessionInput
    exportsTTA?: ExportTTACreateNestedManyWithoutSessionInput
  }

  export type SessionFMPAUncheckedCreateWithoutCentreInput = {
    id?: number
    typeFMPAId: number
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    formateurPrincipalId: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutSessionInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutSessionInput
    exportsTTA?: ExportTTAUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionFMPACreateOrConnectWithoutCentreInput = {
    where: SessionFMPAWhereUniqueInput
    create: XOR<SessionFMPACreateWithoutCentreInput, SessionFMPAUncheckedCreateWithoutCentreInput>
  }

  export type SessionFMPACreateManyCentreInputEnvelope = {
    data: SessionFMPACreateManyCentreInput | SessionFMPACreateManyCentreInput[]
    skipDuplicates?: boolean
  }

  export type PersonnelUpsertWithWhereUniqueWithoutCentreInput = {
    where: PersonnelWhereUniqueInput
    update: XOR<PersonnelUpdateWithoutCentreInput, PersonnelUncheckedUpdateWithoutCentreInput>
    create: XOR<PersonnelCreateWithoutCentreInput, PersonnelUncheckedCreateWithoutCentreInput>
  }

  export type PersonnelUpdateWithWhereUniqueWithoutCentreInput = {
    where: PersonnelWhereUniqueInput
    data: XOR<PersonnelUpdateWithoutCentreInput, PersonnelUncheckedUpdateWithoutCentreInput>
  }

  export type PersonnelUpdateManyWithWhereWithoutCentreInput = {
    where: PersonnelScalarWhereInput
    data: XOR<PersonnelUpdateManyMutationInput, PersonnelUncheckedUpdateManyWithoutCentreInput>
  }

  export type PersonnelScalarWhereInput = {
    AND?: PersonnelScalarWhereInput | PersonnelScalarWhereInput[]
    OR?: PersonnelScalarWhereInput[]
    NOT?: PersonnelScalarWhereInput | PersonnelScalarWhereInput[]
    id?: IntFilter<"Personnel"> | number
    matricule?: StringFilter<"Personnel"> | string
    nom?: StringFilter<"Personnel"> | string
    prenom?: StringFilter<"Personnel"> | string
    email?: StringFilter<"Personnel"> | string
    telephone?: StringNullableFilter<"Personnel"> | string | null
    password?: StringFilter<"Personnel"> | string
    grade?: StringFilter<"Personnel"> | string
    centreId?: IntFilter<"Personnel"> | number
    categorie?: EnumCategorieFilter<"Personnel"> | $Enums.Categorie
    statut?: EnumStatutPersonnelFilter<"Personnel"> | $Enums.StatutPersonnel
    roles?: EnumRoleNullableListFilter<"Personnel">
    refreshToken?: StringNullableFilter<"Personnel"> | string | null
    createdAt?: DateTimeFilter<"Personnel"> | Date | string
    updatedAt?: DateTimeFilter<"Personnel"> | Date | string
  }

  export type SessionFMPAUpsertWithWhereUniqueWithoutCentreInput = {
    where: SessionFMPAWhereUniqueInput
    update: XOR<SessionFMPAUpdateWithoutCentreInput, SessionFMPAUncheckedUpdateWithoutCentreInput>
    create: XOR<SessionFMPACreateWithoutCentreInput, SessionFMPAUncheckedCreateWithoutCentreInput>
  }

  export type SessionFMPAUpdateWithWhereUniqueWithoutCentreInput = {
    where: SessionFMPAWhereUniqueInput
    data: XOR<SessionFMPAUpdateWithoutCentreInput, SessionFMPAUncheckedUpdateWithoutCentreInput>
  }

  export type SessionFMPAUpdateManyWithWhereWithoutCentreInput = {
    where: SessionFMPAScalarWhereInput
    data: XOR<SessionFMPAUpdateManyMutationInput, SessionFMPAUncheckedUpdateManyWithoutCentreInput>
  }

  export type SessionFMPACreateWithoutTypeFMPAInput = {
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    formateurPrincipal: PersonnelCreateNestedOneWithoutSessionsFormateurInput
    centre: CentreCreateNestedOneWithoutSessionsInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutSessionInput
    signatures?: SignatureFMPACreateNestedManyWithoutSessionInput
    exportsTTA?: ExportTTACreateNestedManyWithoutSessionInput
  }

  export type SessionFMPAUncheckedCreateWithoutTypeFMPAInput = {
    id?: number
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    formateurPrincipalId: number
    centreId: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutSessionInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutSessionInput
    exportsTTA?: ExportTTAUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionFMPACreateOrConnectWithoutTypeFMPAInput = {
    where: SessionFMPAWhereUniqueInput
    create: XOR<SessionFMPACreateWithoutTypeFMPAInput, SessionFMPAUncheckedCreateWithoutTypeFMPAInput>
  }

  export type SessionFMPACreateManyTypeFMPAInputEnvelope = {
    data: SessionFMPACreateManyTypeFMPAInput | SessionFMPACreateManyTypeFMPAInput[]
    skipDuplicates?: boolean
  }

  export type SessionFMPAUpsertWithWhereUniqueWithoutTypeFMPAInput = {
    where: SessionFMPAWhereUniqueInput
    update: XOR<SessionFMPAUpdateWithoutTypeFMPAInput, SessionFMPAUncheckedUpdateWithoutTypeFMPAInput>
    create: XOR<SessionFMPACreateWithoutTypeFMPAInput, SessionFMPAUncheckedCreateWithoutTypeFMPAInput>
  }

  export type SessionFMPAUpdateWithWhereUniqueWithoutTypeFMPAInput = {
    where: SessionFMPAWhereUniqueInput
    data: XOR<SessionFMPAUpdateWithoutTypeFMPAInput, SessionFMPAUncheckedUpdateWithoutTypeFMPAInput>
  }

  export type SessionFMPAUpdateManyWithWhereWithoutTypeFMPAInput = {
    where: SessionFMPAScalarWhereInput
    data: XOR<SessionFMPAUpdateManyMutationInput, SessionFMPAUncheckedUpdateManyWithoutTypeFMPAInput>
  }

  export type TypeFMPACreateWithoutSessionsInput = {
    code: string
    libelle: string
    dureeHeures: number
    tauxHoraire?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TypeFMPAUncheckedCreateWithoutSessionsInput = {
    id?: number
    code: string
    libelle: string
    dureeHeures: number
    tauxHoraire?: number
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TypeFMPACreateOrConnectWithoutSessionsInput = {
    where: TypeFMPAWhereUniqueInput
    create: XOR<TypeFMPACreateWithoutSessionsInput, TypeFMPAUncheckedCreateWithoutSessionsInput>
  }

  export type PersonnelCreateWithoutSessionsFormateurInput = {
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    centre: CentreCreateNestedOneWithoutPersonnelsInput
    aptitudeMedicale?: AptitudeMedicaleCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutPersonnelInput
    signatures?: SignatureFMPACreateNestedManyWithoutPersonnelInput
    notifications?: NotificationCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type PersonnelUncheckedCreateWithoutSessionsFormateurInput = {
    id?: number
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    centreId: number
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceUncheckedCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type PersonnelCreateOrConnectWithoutSessionsFormateurInput = {
    where: PersonnelWhereUniqueInput
    create: XOR<PersonnelCreateWithoutSessionsFormateurInput, PersonnelUncheckedCreateWithoutSessionsFormateurInput>
  }

  export type CentreCreateWithoutSessionsInput = {
    code: string
    nom: string
    type: string
    adresse?: string | null
    telephone?: string | null
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    personnels?: PersonnelCreateNestedManyWithoutCentreInput
  }

  export type CentreUncheckedCreateWithoutSessionsInput = {
    id?: number
    code: string
    nom: string
    type: string
    adresse?: string | null
    telephone?: string | null
    email?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    personnels?: PersonnelUncheckedCreateNestedManyWithoutCentreInput
  }

  export type CentreCreateOrConnectWithoutSessionsInput = {
    where: CentreWhereUniqueInput
    create: XOR<CentreCreateWithoutSessionsInput, CentreUncheckedCreateWithoutSessionsInput>
  }

  export type InscriptionFMPACreateWithoutSessionInput = {
    statut?: $Enums.StatutInscription
    present?: boolean
    signatureElectronique?: string | null
    dateSignature?: Date | string | null
    heuresValidees?: number | null
    montantTTA?: number | null
    dateInscription?: Date | string
    dateModification?: Date | string
    personnel: PersonnelCreateNestedOneWithoutInscriptionsInput
  }

  export type InscriptionFMPAUncheckedCreateWithoutSessionInput = {
    id?: number
    personnelId: number
    statut?: $Enums.StatutInscription
    present?: boolean
    signatureElectronique?: string | null
    dateSignature?: Date | string | null
    heuresValidees?: number | null
    montantTTA?: number | null
    dateInscription?: Date | string
    dateModification?: Date | string
  }

  export type InscriptionFMPACreateOrConnectWithoutSessionInput = {
    where: InscriptionFMPAWhereUniqueInput
    create: XOR<InscriptionFMPACreateWithoutSessionInput, InscriptionFMPAUncheckedCreateWithoutSessionInput>
  }

  export type InscriptionFMPACreateManySessionInputEnvelope = {
    data: InscriptionFMPACreateManySessionInput | InscriptionFMPACreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type SignatureFMPACreateWithoutSessionInput = {
    id?: string
    type: string
    signature: string
    dateSignature?: Date | string
    personnel: PersonnelCreateNestedOneWithoutSignaturesInput
  }

  export type SignatureFMPAUncheckedCreateWithoutSessionInput = {
    id?: string
    personnelId: number
    type: string
    signature: string
    dateSignature?: Date | string
  }

  export type SignatureFMPACreateOrConnectWithoutSessionInput = {
    where: SignatureFMPAWhereUniqueInput
    create: XOR<SignatureFMPACreateWithoutSessionInput, SignatureFMPAUncheckedCreateWithoutSessionInput>
  }

  export type SignatureFMPACreateManySessionInputEnvelope = {
    data: SignatureFMPACreateManySessionInput | SignatureFMPACreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type ExportTTACreateWithoutSessionInput = {
    mois: Date | string
    centreId: number
    nombreLignes: number
    montantTotal: number
    fichierCsv: string
    statut: string
    validePar?: number | null
    dateValidation?: Date | string | null
    createdAt?: Date | string
  }

  export type ExportTTAUncheckedCreateWithoutSessionInput = {
    id?: number
    mois: Date | string
    centreId: number
    nombreLignes: number
    montantTotal: number
    fichierCsv: string
    statut: string
    validePar?: number | null
    dateValidation?: Date | string | null
    createdAt?: Date | string
  }

  export type ExportTTACreateOrConnectWithoutSessionInput = {
    where: ExportTTAWhereUniqueInput
    create: XOR<ExportTTACreateWithoutSessionInput, ExportTTAUncheckedCreateWithoutSessionInput>
  }

  export type ExportTTACreateManySessionInputEnvelope = {
    data: ExportTTACreateManySessionInput | ExportTTACreateManySessionInput[]
    skipDuplicates?: boolean
  }

  export type TypeFMPAUpsertWithoutSessionsInput = {
    update: XOR<TypeFMPAUpdateWithoutSessionsInput, TypeFMPAUncheckedUpdateWithoutSessionsInput>
    create: XOR<TypeFMPACreateWithoutSessionsInput, TypeFMPAUncheckedCreateWithoutSessionsInput>
    where?: TypeFMPAWhereInput
  }

  export type TypeFMPAUpdateToOneWithWhereWithoutSessionsInput = {
    where?: TypeFMPAWhereInput
    data: XOR<TypeFMPAUpdateWithoutSessionsInput, TypeFMPAUncheckedUpdateWithoutSessionsInput>
  }

  export type TypeFMPAUpdateWithoutSessionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dureeHeures?: FloatFieldUpdateOperationsInput | number
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TypeFMPAUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dureeHeures?: FloatFieldUpdateOperationsInput | number
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonnelUpsertWithoutSessionsFormateurInput = {
    update: XOR<PersonnelUpdateWithoutSessionsFormateurInput, PersonnelUncheckedUpdateWithoutSessionsFormateurInput>
    create: XOR<PersonnelCreateWithoutSessionsFormateurInput, PersonnelUncheckedCreateWithoutSessionsFormateurInput>
    where?: PersonnelWhereInput
  }

  export type PersonnelUpdateToOneWithWhereWithoutSessionsFormateurInput = {
    where?: PersonnelWhereInput
    data: XOR<PersonnelUpdateWithoutSessionsFormateurInput, PersonnelUncheckedUpdateWithoutSessionsFormateurInput>
  }

  export type PersonnelUpdateWithoutSessionsFormateurInput = {
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    centre?: CentreUpdateOneRequiredWithoutPersonnelsNestedInput
    aptitudeMedicale?: AptitudeMedicaleUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutPersonnelNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type PersonnelUncheckedUpdateWithoutSessionsFormateurInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    centreId?: IntFieldUpdateOperationsInput | number
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUncheckedUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CentreUpsertWithoutSessionsInput = {
    update: XOR<CentreUpdateWithoutSessionsInput, CentreUncheckedUpdateWithoutSessionsInput>
    create: XOR<CentreCreateWithoutSessionsInput, CentreUncheckedCreateWithoutSessionsInput>
    where?: CentreWhereInput
  }

  export type CentreUpdateToOneWithWhereWithoutSessionsInput = {
    where?: CentreWhereInput
    data: XOR<CentreUpdateWithoutSessionsInput, CentreUncheckedUpdateWithoutSessionsInput>
  }

  export type CentreUpdateWithoutSessionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    personnels?: PersonnelUpdateManyWithoutCentreNestedInput
  }

  export type CentreUncheckedUpdateWithoutSessionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    adresse?: NullableStringFieldUpdateOperationsInput | string | null
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    personnels?: PersonnelUncheckedUpdateManyWithoutCentreNestedInput
  }

  export type InscriptionFMPAUpsertWithWhereUniqueWithoutSessionInput = {
    where: InscriptionFMPAWhereUniqueInput
    update: XOR<InscriptionFMPAUpdateWithoutSessionInput, InscriptionFMPAUncheckedUpdateWithoutSessionInput>
    create: XOR<InscriptionFMPACreateWithoutSessionInput, InscriptionFMPAUncheckedCreateWithoutSessionInput>
  }

  export type InscriptionFMPAUpdateWithWhereUniqueWithoutSessionInput = {
    where: InscriptionFMPAWhereUniqueInput
    data: XOR<InscriptionFMPAUpdateWithoutSessionInput, InscriptionFMPAUncheckedUpdateWithoutSessionInput>
  }

  export type InscriptionFMPAUpdateManyWithWhereWithoutSessionInput = {
    where: InscriptionFMPAScalarWhereInput
    data: XOR<InscriptionFMPAUpdateManyMutationInput, InscriptionFMPAUncheckedUpdateManyWithoutSessionInput>
  }

  export type SignatureFMPAUpsertWithWhereUniqueWithoutSessionInput = {
    where: SignatureFMPAWhereUniqueInput
    update: XOR<SignatureFMPAUpdateWithoutSessionInput, SignatureFMPAUncheckedUpdateWithoutSessionInput>
    create: XOR<SignatureFMPACreateWithoutSessionInput, SignatureFMPAUncheckedCreateWithoutSessionInput>
  }

  export type SignatureFMPAUpdateWithWhereUniqueWithoutSessionInput = {
    where: SignatureFMPAWhereUniqueInput
    data: XOR<SignatureFMPAUpdateWithoutSessionInput, SignatureFMPAUncheckedUpdateWithoutSessionInput>
  }

  export type SignatureFMPAUpdateManyWithWhereWithoutSessionInput = {
    where: SignatureFMPAScalarWhereInput
    data: XOR<SignatureFMPAUpdateManyMutationInput, SignatureFMPAUncheckedUpdateManyWithoutSessionInput>
  }

  export type ExportTTAUpsertWithWhereUniqueWithoutSessionInput = {
    where: ExportTTAWhereUniqueInput
    update: XOR<ExportTTAUpdateWithoutSessionInput, ExportTTAUncheckedUpdateWithoutSessionInput>
    create: XOR<ExportTTACreateWithoutSessionInput, ExportTTAUncheckedCreateWithoutSessionInput>
  }

  export type ExportTTAUpdateWithWhereUniqueWithoutSessionInput = {
    where: ExportTTAWhereUniqueInput
    data: XOR<ExportTTAUpdateWithoutSessionInput, ExportTTAUncheckedUpdateWithoutSessionInput>
  }

  export type ExportTTAUpdateManyWithWhereWithoutSessionInput = {
    where: ExportTTAScalarWhereInput
    data: XOR<ExportTTAUpdateManyMutationInput, ExportTTAUncheckedUpdateManyWithoutSessionInput>
  }

  export type ExportTTAScalarWhereInput = {
    AND?: ExportTTAScalarWhereInput | ExportTTAScalarWhereInput[]
    OR?: ExportTTAScalarWhereInput[]
    NOT?: ExportTTAScalarWhereInput | ExportTTAScalarWhereInput[]
    id?: IntFilter<"ExportTTA"> | number
    mois?: DateTimeFilter<"ExportTTA"> | Date | string
    centreId?: IntFilter<"ExportTTA"> | number
    sessionId?: IntNullableFilter<"ExportTTA"> | number | null
    nombreLignes?: IntFilter<"ExportTTA"> | number
    montantTotal?: FloatFilter<"ExportTTA"> | number
    fichierCsv?: StringFilter<"ExportTTA"> | string
    statut?: StringFilter<"ExportTTA"> | string
    validePar?: IntNullableFilter<"ExportTTA"> | number | null
    dateValidation?: DateTimeNullableFilter<"ExportTTA"> | Date | string | null
    createdAt?: DateTimeFilter<"ExportTTA"> | Date | string
  }

  export type SessionFMPACreateWithoutInscriptionsInput = {
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    typeFMPA: TypeFMPACreateNestedOneWithoutSessionsInput
    formateurPrincipal: PersonnelCreateNestedOneWithoutSessionsFormateurInput
    centre: CentreCreateNestedOneWithoutSessionsInput
    signatures?: SignatureFMPACreateNestedManyWithoutSessionInput
    exportsTTA?: ExportTTACreateNestedManyWithoutSessionInput
  }

  export type SessionFMPAUncheckedCreateWithoutInscriptionsInput = {
    id?: number
    typeFMPAId: number
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    formateurPrincipalId: number
    centreId: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutSessionInput
    exportsTTA?: ExportTTAUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionFMPACreateOrConnectWithoutInscriptionsInput = {
    where: SessionFMPAWhereUniqueInput
    create: XOR<SessionFMPACreateWithoutInscriptionsInput, SessionFMPAUncheckedCreateWithoutInscriptionsInput>
  }

  export type PersonnelCreateWithoutInscriptionsInput = {
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    centre: CentreCreateNestedOneWithoutPersonnelsInput
    aptitudeMedicale?: AptitudeMedicaleCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceCreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPACreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPACreateNestedManyWithoutPersonnelInput
    notifications?: NotificationCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type PersonnelUncheckedCreateWithoutInscriptionsInput = {
    id?: number
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    centreId: number
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceUncheckedCreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPAUncheckedCreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type PersonnelCreateOrConnectWithoutInscriptionsInput = {
    where: PersonnelWhereUniqueInput
    create: XOR<PersonnelCreateWithoutInscriptionsInput, PersonnelUncheckedCreateWithoutInscriptionsInput>
  }

  export type SessionFMPAUpsertWithoutInscriptionsInput = {
    update: XOR<SessionFMPAUpdateWithoutInscriptionsInput, SessionFMPAUncheckedUpdateWithoutInscriptionsInput>
    create: XOR<SessionFMPACreateWithoutInscriptionsInput, SessionFMPAUncheckedCreateWithoutInscriptionsInput>
    where?: SessionFMPAWhereInput
  }

  export type SessionFMPAUpdateToOneWithWhereWithoutInscriptionsInput = {
    where?: SessionFMPAWhereInput
    data: XOR<SessionFMPAUpdateWithoutInscriptionsInput, SessionFMPAUncheckedUpdateWithoutInscriptionsInput>
  }

  export type SessionFMPAUpdateWithoutInscriptionsInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeFMPA?: TypeFMPAUpdateOneRequiredWithoutSessionsNestedInput
    formateurPrincipal?: PersonnelUpdateOneRequiredWithoutSessionsFormateurNestedInput
    centre?: CentreUpdateOneRequiredWithoutSessionsNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutSessionNestedInput
    exportsTTA?: ExportTTAUpdateManyWithoutSessionNestedInput
  }

  export type SessionFMPAUncheckedUpdateWithoutInscriptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeFMPAId?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    formateurPrincipalId?: IntFieldUpdateOperationsInput | number
    centreId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutSessionNestedInput
    exportsTTA?: ExportTTAUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type PersonnelUpsertWithoutInscriptionsInput = {
    update: XOR<PersonnelUpdateWithoutInscriptionsInput, PersonnelUncheckedUpdateWithoutInscriptionsInput>
    create: XOR<PersonnelCreateWithoutInscriptionsInput, PersonnelUncheckedCreateWithoutInscriptionsInput>
    where?: PersonnelWhereInput
  }

  export type PersonnelUpdateToOneWithWhereWithoutInscriptionsInput = {
    where?: PersonnelWhereInput
    data: XOR<PersonnelUpdateWithoutInscriptionsInput, PersonnelUncheckedUpdateWithoutInscriptionsInput>
  }

  export type PersonnelUpdateWithoutInscriptionsInput = {
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    centre?: CentreUpdateOneRequiredWithoutPersonnelsNestedInput
    aptitudeMedicale?: AptitudeMedicaleUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type PersonnelUncheckedUpdateWithoutInscriptionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    centreId?: IntFieldUpdateOperationsInput | number
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUncheckedUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUncheckedUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SessionFMPACreateWithoutSignaturesInput = {
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    typeFMPA: TypeFMPACreateNestedOneWithoutSessionsInput
    formateurPrincipal: PersonnelCreateNestedOneWithoutSessionsFormateurInput
    centre: CentreCreateNestedOneWithoutSessionsInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutSessionInput
    exportsTTA?: ExportTTACreateNestedManyWithoutSessionInput
  }

  export type SessionFMPAUncheckedCreateWithoutSignaturesInput = {
    id?: number
    typeFMPAId: number
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    formateurPrincipalId: number
    centreId: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutSessionInput
    exportsTTA?: ExportTTAUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionFMPACreateOrConnectWithoutSignaturesInput = {
    where: SessionFMPAWhereUniqueInput
    create: XOR<SessionFMPACreateWithoutSignaturesInput, SessionFMPAUncheckedCreateWithoutSignaturesInput>
  }

  export type PersonnelCreateWithoutSignaturesInput = {
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    centre: CentreCreateNestedOneWithoutPersonnelsInput
    aptitudeMedicale?: AptitudeMedicaleCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPACreateNestedManyWithoutFormateurPrincipalInput
    notifications?: NotificationCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type PersonnelUncheckedCreateWithoutSignaturesInput = {
    id?: number
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    centreId: number
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceUncheckedCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPAUncheckedCreateNestedManyWithoutFormateurPrincipalInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type PersonnelCreateOrConnectWithoutSignaturesInput = {
    where: PersonnelWhereUniqueInput
    create: XOR<PersonnelCreateWithoutSignaturesInput, PersonnelUncheckedCreateWithoutSignaturesInput>
  }

  export type SessionFMPAUpsertWithoutSignaturesInput = {
    update: XOR<SessionFMPAUpdateWithoutSignaturesInput, SessionFMPAUncheckedUpdateWithoutSignaturesInput>
    create: XOR<SessionFMPACreateWithoutSignaturesInput, SessionFMPAUncheckedCreateWithoutSignaturesInput>
    where?: SessionFMPAWhereInput
  }

  export type SessionFMPAUpdateToOneWithWhereWithoutSignaturesInput = {
    where?: SessionFMPAWhereInput
    data: XOR<SessionFMPAUpdateWithoutSignaturesInput, SessionFMPAUncheckedUpdateWithoutSignaturesInput>
  }

  export type SessionFMPAUpdateWithoutSignaturesInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeFMPA?: TypeFMPAUpdateOneRequiredWithoutSessionsNestedInput
    formateurPrincipal?: PersonnelUpdateOneRequiredWithoutSessionsFormateurNestedInput
    centre?: CentreUpdateOneRequiredWithoutSessionsNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutSessionNestedInput
    exportsTTA?: ExportTTAUpdateManyWithoutSessionNestedInput
  }

  export type SessionFMPAUncheckedUpdateWithoutSignaturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeFMPAId?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    formateurPrincipalId?: IntFieldUpdateOperationsInput | number
    centreId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutSessionNestedInput
    exportsTTA?: ExportTTAUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type PersonnelUpsertWithoutSignaturesInput = {
    update: XOR<PersonnelUpdateWithoutSignaturesInput, PersonnelUncheckedUpdateWithoutSignaturesInput>
    create: XOR<PersonnelCreateWithoutSignaturesInput, PersonnelUncheckedCreateWithoutSignaturesInput>
    where?: PersonnelWhereInput
  }

  export type PersonnelUpdateToOneWithWhereWithoutSignaturesInput = {
    where?: PersonnelWhereInput
    data: XOR<PersonnelUpdateWithoutSignaturesInput, PersonnelUncheckedUpdateWithoutSignaturesInput>
  }

  export type PersonnelUpdateWithoutSignaturesInput = {
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    centre?: CentreUpdateOneRequiredWithoutPersonnelsNestedInput
    aptitudeMedicale?: AptitudeMedicaleUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUpdateManyWithoutFormateurPrincipalNestedInput
    notifications?: NotificationUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type PersonnelUncheckedUpdateWithoutSignaturesInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    centreId?: IntFieldUpdateOperationsInput | number
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUncheckedUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUncheckedUpdateManyWithoutFormateurPrincipalNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PersonnelCreateWithoutAptitudeMedicaleInput = {
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    centre: CentreCreateNestedOneWithoutPersonnelsInput
    competences?: CompetenceCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPACreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPACreateNestedManyWithoutPersonnelInput
    notifications?: NotificationCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type PersonnelUncheckedCreateWithoutAptitudeMedicaleInput = {
    id?: number
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    centreId: number
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    competences?: CompetenceUncheckedCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPAUncheckedCreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type PersonnelCreateOrConnectWithoutAptitudeMedicaleInput = {
    where: PersonnelWhereUniqueInput
    create: XOR<PersonnelCreateWithoutAptitudeMedicaleInput, PersonnelUncheckedCreateWithoutAptitudeMedicaleInput>
  }

  export type PersonnelUpsertWithoutAptitudeMedicaleInput = {
    update: XOR<PersonnelUpdateWithoutAptitudeMedicaleInput, PersonnelUncheckedUpdateWithoutAptitudeMedicaleInput>
    create: XOR<PersonnelCreateWithoutAptitudeMedicaleInput, PersonnelUncheckedCreateWithoutAptitudeMedicaleInput>
    where?: PersonnelWhereInput
  }

  export type PersonnelUpdateToOneWithWhereWithoutAptitudeMedicaleInput = {
    where?: PersonnelWhereInput
    data: XOR<PersonnelUpdateWithoutAptitudeMedicaleInput, PersonnelUncheckedUpdateWithoutAptitudeMedicaleInput>
  }

  export type PersonnelUpdateWithoutAptitudeMedicaleInput = {
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    centre?: CentreUpdateOneRequiredWithoutPersonnelsNestedInput
    competences?: CompetenceUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type PersonnelUncheckedUpdateWithoutAptitudeMedicaleInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    centreId?: IntFieldUpdateOperationsInput | number
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    competences?: CompetenceUncheckedUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUncheckedUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PersonnelCreateWithoutCompetencesInput = {
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    centre: CentreCreateNestedOneWithoutPersonnelsInput
    aptitudeMedicale?: AptitudeMedicaleCreateNestedOneWithoutPersonnelInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPACreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPACreateNestedManyWithoutPersonnelInput
    notifications?: NotificationCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type PersonnelUncheckedCreateWithoutCompetencesInput = {
    id?: number
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    centreId: number
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedCreateNestedOneWithoutPersonnelInput
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPAUncheckedCreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type PersonnelCreateOrConnectWithoutCompetencesInput = {
    where: PersonnelWhereUniqueInput
    create: XOR<PersonnelCreateWithoutCompetencesInput, PersonnelUncheckedCreateWithoutCompetencesInput>
  }

  export type PersonnelUpsertWithoutCompetencesInput = {
    update: XOR<PersonnelUpdateWithoutCompetencesInput, PersonnelUncheckedUpdateWithoutCompetencesInput>
    create: XOR<PersonnelCreateWithoutCompetencesInput, PersonnelUncheckedCreateWithoutCompetencesInput>
    where?: PersonnelWhereInput
  }

  export type PersonnelUpdateToOneWithWhereWithoutCompetencesInput = {
    where?: PersonnelWhereInput
    data: XOR<PersonnelUpdateWithoutCompetencesInput, PersonnelUncheckedUpdateWithoutCompetencesInput>
  }

  export type PersonnelUpdateWithoutCompetencesInput = {
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    centre?: CentreUpdateOneRequiredWithoutPersonnelsNestedInput
    aptitudeMedicale?: AptitudeMedicaleUpdateOneWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type PersonnelUncheckedUpdateWithoutCompetencesInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    centreId?: IntFieldUpdateOperationsInput | number
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedUpdateOneWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUncheckedUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SessionFMPACreateWithoutExportsTTAInput = {
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    typeFMPA: TypeFMPACreateNestedOneWithoutSessionsInput
    formateurPrincipal: PersonnelCreateNestedOneWithoutSessionsFormateurInput
    centre: CentreCreateNestedOneWithoutSessionsInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutSessionInput
    signatures?: SignatureFMPACreateNestedManyWithoutSessionInput
  }

  export type SessionFMPAUncheckedCreateWithoutExportsTTAInput = {
    id?: number
    typeFMPAId: number
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    formateurPrincipalId: number
    centreId: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutSessionInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutSessionInput
  }

  export type SessionFMPACreateOrConnectWithoutExportsTTAInput = {
    where: SessionFMPAWhereUniqueInput
    create: XOR<SessionFMPACreateWithoutExportsTTAInput, SessionFMPAUncheckedCreateWithoutExportsTTAInput>
  }

  export type SessionFMPAUpsertWithoutExportsTTAInput = {
    update: XOR<SessionFMPAUpdateWithoutExportsTTAInput, SessionFMPAUncheckedUpdateWithoutExportsTTAInput>
    create: XOR<SessionFMPACreateWithoutExportsTTAInput, SessionFMPAUncheckedCreateWithoutExportsTTAInput>
    where?: SessionFMPAWhereInput
  }

  export type SessionFMPAUpdateToOneWithWhereWithoutExportsTTAInput = {
    where?: SessionFMPAWhereInput
    data: XOR<SessionFMPAUpdateWithoutExportsTTAInput, SessionFMPAUncheckedUpdateWithoutExportsTTAInput>
  }

  export type SessionFMPAUpdateWithoutExportsTTAInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeFMPA?: TypeFMPAUpdateOneRequiredWithoutSessionsNestedInput
    formateurPrincipal?: PersonnelUpdateOneRequiredWithoutSessionsFormateurNestedInput
    centre?: CentreUpdateOneRequiredWithoutSessionsNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutSessionNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutSessionNestedInput
  }

  export type SessionFMPAUncheckedUpdateWithoutExportsTTAInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeFMPAId?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    formateurPrincipalId?: IntFieldUpdateOperationsInput | number
    centreId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutSessionNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type PersonnelCreateWithoutNotificationsInput = {
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    centre: CentreCreateNestedOneWithoutPersonnelsInput
    aptitudeMedicale?: AptitudeMedicaleCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPACreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPACreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogCreateNestedManyWithoutUserInput
  }

  export type PersonnelUncheckedCreateWithoutNotificationsInput = {
    id?: number
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    centreId: number
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceUncheckedCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPAUncheckedCreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    auditLogs?: AuditLogUncheckedCreateNestedManyWithoutUserInput
  }

  export type PersonnelCreateOrConnectWithoutNotificationsInput = {
    where: PersonnelWhereUniqueInput
    create: XOR<PersonnelCreateWithoutNotificationsInput, PersonnelUncheckedCreateWithoutNotificationsInput>
  }

  export type PersonnelUpsertWithoutNotificationsInput = {
    update: XOR<PersonnelUpdateWithoutNotificationsInput, PersonnelUncheckedUpdateWithoutNotificationsInput>
    create: XOR<PersonnelCreateWithoutNotificationsInput, PersonnelUncheckedCreateWithoutNotificationsInput>
    where?: PersonnelWhereInput
  }

  export type PersonnelUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: PersonnelWhereInput
    data: XOR<PersonnelUpdateWithoutNotificationsInput, PersonnelUncheckedUpdateWithoutNotificationsInput>
  }

  export type PersonnelUpdateWithoutNotificationsInput = {
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    centre?: CentreUpdateOneRequiredWithoutPersonnelsNestedInput
    aptitudeMedicale?: AptitudeMedicaleUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type PersonnelUncheckedUpdateWithoutNotificationsInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    centreId?: IntFieldUpdateOperationsInput | number
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUncheckedUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUncheckedUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PersonnelCreateWithoutAuditLogsInput = {
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    centre: CentreCreateNestedOneWithoutPersonnelsInput
    aptitudeMedicale?: AptitudeMedicaleCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPACreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPACreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPACreateNestedManyWithoutPersonnelInput
    notifications?: NotificationCreateNestedManyWithoutPersonnelInput
  }

  export type PersonnelUncheckedCreateWithoutAuditLogsInput = {
    id?: number
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    centreId: number
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedCreateNestedOneWithoutPersonnelInput
    competences?: CompetenceUncheckedCreateNestedManyWithoutPersonnelInput
    inscriptions?: InscriptionFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    sessionsFormateur?: SessionFMPAUncheckedCreateNestedManyWithoutFormateurPrincipalInput
    signatures?: SignatureFMPAUncheckedCreateNestedManyWithoutPersonnelInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutPersonnelInput
  }

  export type PersonnelCreateOrConnectWithoutAuditLogsInput = {
    where: PersonnelWhereUniqueInput
    create: XOR<PersonnelCreateWithoutAuditLogsInput, PersonnelUncheckedCreateWithoutAuditLogsInput>
  }

  export type PersonnelUpsertWithoutAuditLogsInput = {
    update: XOR<PersonnelUpdateWithoutAuditLogsInput, PersonnelUncheckedUpdateWithoutAuditLogsInput>
    create: XOR<PersonnelCreateWithoutAuditLogsInput, PersonnelUncheckedCreateWithoutAuditLogsInput>
    where?: PersonnelWhereInput
  }

  export type PersonnelUpdateToOneWithWhereWithoutAuditLogsInput = {
    where?: PersonnelWhereInput
    data: XOR<PersonnelUpdateWithoutAuditLogsInput, PersonnelUncheckedUpdateWithoutAuditLogsInput>
  }

  export type PersonnelUpdateWithoutAuditLogsInput = {
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    centre?: CentreUpdateOneRequiredWithoutPersonnelsNestedInput
    aptitudeMedicale?: AptitudeMedicaleUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUpdateManyWithoutPersonnelNestedInput
  }

  export type PersonnelUncheckedUpdateWithoutAuditLogsInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    centreId?: IntFieldUpdateOperationsInput | number
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUncheckedUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUncheckedUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutPersonnelNestedInput
  }

  export type CompetenceCreateManyPersonnelInput = {
    id?: number
    code: string
    libelle: string
    dateObtention: Date | string
    dateExpiration?: Date | string | null
    niveau?: string | null
    organisme?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type InscriptionFMPACreateManyPersonnelInput = {
    id?: number
    sessionId: number
    statut?: $Enums.StatutInscription
    present?: boolean
    signatureElectronique?: string | null
    dateSignature?: Date | string | null
    heuresValidees?: number | null
    montantTTA?: number | null
    dateInscription?: Date | string
    dateModification?: Date | string
  }

  export type SessionFMPACreateManyFormateurPrincipalInput = {
    id?: number
    typeFMPAId: number
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    centreId: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SignatureFMPACreateManyPersonnelInput = {
    id?: string
    sessionFMPAId: number
    type: string
    signature: string
    dateSignature?: Date | string
  }

  export type NotificationCreateManyPersonnelInput = {
    id?: number
    type: string
    sujet: string
    message: string
    lu?: boolean
    dateLecture?: Date | string | null
    createdAt?: Date | string
  }

  export type AuditLogCreateManyUserInput = {
    id?: string
    action: string
    entity: string
    entityId?: string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: string | null
    userAgent?: string | null
    createdAt?: Date | string
  }

  export type CompetenceUpdateWithoutPersonnelInput = {
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dateObtention?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    niveau?: NullableStringFieldUpdateOperationsInput | string | null
    organisme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompetenceUncheckedUpdateWithoutPersonnelInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dateObtention?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    niveau?: NullableStringFieldUpdateOperationsInput | string | null
    organisme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CompetenceUncheckedUpdateManyWithoutPersonnelInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    libelle?: StringFieldUpdateOperationsInput | string
    dateObtention?: DateTimeFieldUpdateOperationsInput | Date | string
    dateExpiration?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    niveau?: NullableStringFieldUpdateOperationsInput | string | null
    organisme?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscriptionFMPAUpdateWithoutPersonnelInput = {
    statut?: EnumStatutInscriptionFieldUpdateOperationsInput | $Enums.StatutInscription
    present?: BoolFieldUpdateOperationsInput | boolean
    signatureElectronique?: NullableStringFieldUpdateOperationsInput | string | null
    dateSignature?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heuresValidees?: NullableFloatFieldUpdateOperationsInput | number | null
    montantTTA?: NullableFloatFieldUpdateOperationsInput | number | null
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionFMPAUpdateOneRequiredWithoutInscriptionsNestedInput
  }

  export type InscriptionFMPAUncheckedUpdateWithoutPersonnelInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutInscriptionFieldUpdateOperationsInput | $Enums.StatutInscription
    present?: BoolFieldUpdateOperationsInput | boolean
    signatureElectronique?: NullableStringFieldUpdateOperationsInput | string | null
    dateSignature?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heuresValidees?: NullableFloatFieldUpdateOperationsInput | number | null
    montantTTA?: NullableFloatFieldUpdateOperationsInput | number | null
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscriptionFMPAUncheckedUpdateManyWithoutPersonnelInput = {
    id?: IntFieldUpdateOperationsInput | number
    sessionId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutInscriptionFieldUpdateOperationsInput | $Enums.StatutInscription
    present?: BoolFieldUpdateOperationsInput | boolean
    signatureElectronique?: NullableStringFieldUpdateOperationsInput | string | null
    dateSignature?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heuresValidees?: NullableFloatFieldUpdateOperationsInput | number | null
    montantTTA?: NullableFloatFieldUpdateOperationsInput | number | null
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionFMPAUpdateWithoutFormateurPrincipalInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeFMPA?: TypeFMPAUpdateOneRequiredWithoutSessionsNestedInput
    centre?: CentreUpdateOneRequiredWithoutSessionsNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutSessionNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutSessionNestedInput
    exportsTTA?: ExportTTAUpdateManyWithoutSessionNestedInput
  }

  export type SessionFMPAUncheckedUpdateWithoutFormateurPrincipalInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeFMPAId?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    centreId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutSessionNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutSessionNestedInput
    exportsTTA?: ExportTTAUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionFMPAUncheckedUpdateManyWithoutFormateurPrincipalInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeFMPAId?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    centreId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignatureFMPAUpdateWithoutPersonnelInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    dateSignature?: DateTimeFieldUpdateOperationsInput | Date | string
    session?: SessionFMPAUpdateOneRequiredWithoutSignaturesNestedInput
  }

  export type SignatureFMPAUncheckedUpdateWithoutPersonnelInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionFMPAId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    dateSignature?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignatureFMPAUncheckedUpdateManyWithoutPersonnelInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionFMPAId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    dateSignature?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUpdateWithoutPersonnelInput = {
    type?: StringFieldUpdateOperationsInput | string
    sujet?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    dateLecture?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateWithoutPersonnelInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    sujet?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    dateLecture?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationUncheckedUpdateManyWithoutPersonnelInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    sujet?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    lu?: BoolFieldUpdateOperationsInput | boolean
    dateLecture?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entity?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    oldValues?: NullableJsonNullValueInput | InputJsonValue
    newValues?: NullableJsonNullValueInput | InputJsonValue
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PersonnelCreateManyCentreInput = {
    id?: number
    matricule: string
    nom: string
    prenom: string
    email: string
    telephone?: string | null
    password: string
    grade: string
    categorie: $Enums.Categorie
    statut?: $Enums.StatutPersonnel
    roles?: PersonnelCreaterolesInput | $Enums.Role[]
    refreshToken?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionFMPACreateManyCentreInput = {
    id?: number
    typeFMPAId: number
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    formateurPrincipalId: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PersonnelUpdateWithoutCentreInput = {
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aptitudeMedicale?: AptitudeMedicaleUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUpdateManyWithoutUserNestedInput
  }

  export type PersonnelUncheckedUpdateWithoutCentreInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    aptitudeMedicale?: AptitudeMedicaleUncheckedUpdateOneWithoutPersonnelNestedInput
    competences?: CompetenceUncheckedUpdateManyWithoutPersonnelNestedInput
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    sessionsFormateur?: SessionFMPAUncheckedUpdateManyWithoutFormateurPrincipalNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutPersonnelNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutPersonnelNestedInput
    auditLogs?: AuditLogUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PersonnelUncheckedUpdateManyWithoutCentreInput = {
    id?: IntFieldUpdateOperationsInput | number
    matricule?: StringFieldUpdateOperationsInput | string
    nom?: StringFieldUpdateOperationsInput | string
    prenom?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    telephone?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    grade?: StringFieldUpdateOperationsInput | string
    categorie?: EnumCategorieFieldUpdateOperationsInput | $Enums.Categorie
    statut?: EnumStatutPersonnelFieldUpdateOperationsInput | $Enums.StatutPersonnel
    roles?: PersonnelUpdaterolesInput | $Enums.Role[]
    refreshToken?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionFMPAUpdateWithoutCentreInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    typeFMPA?: TypeFMPAUpdateOneRequiredWithoutSessionsNestedInput
    formateurPrincipal?: PersonnelUpdateOneRequiredWithoutSessionsFormateurNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutSessionNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutSessionNestedInput
    exportsTTA?: ExportTTAUpdateManyWithoutSessionNestedInput
  }

  export type SessionFMPAUncheckedUpdateWithoutCentreInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeFMPAId?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    formateurPrincipalId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutSessionNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutSessionNestedInput
    exportsTTA?: ExportTTAUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionFMPAUncheckedUpdateManyWithoutCentreInput = {
    id?: IntFieldUpdateOperationsInput | number
    typeFMPAId?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    formateurPrincipalId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionFMPACreateManyTypeFMPAInput = {
    id?: number
    dateDebut: Date | string
    dateFin: Date | string
    lieu: string
    placesMax?: number
    placesOccupees?: number
    formateurPrincipalId: number
    centreId: number
    statut?: $Enums.StatutSession
    codeTTA: string
    tauxHoraire?: number
    observations?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type SessionFMPAUpdateWithoutTypeFMPAInput = {
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    formateurPrincipal?: PersonnelUpdateOneRequiredWithoutSessionsFormateurNestedInput
    centre?: CentreUpdateOneRequiredWithoutSessionsNestedInput
    inscriptions?: InscriptionFMPAUpdateManyWithoutSessionNestedInput
    signatures?: SignatureFMPAUpdateManyWithoutSessionNestedInput
    exportsTTA?: ExportTTAUpdateManyWithoutSessionNestedInput
  }

  export type SessionFMPAUncheckedUpdateWithoutTypeFMPAInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    formateurPrincipalId?: IntFieldUpdateOperationsInput | number
    centreId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    inscriptions?: InscriptionFMPAUncheckedUpdateManyWithoutSessionNestedInput
    signatures?: SignatureFMPAUncheckedUpdateManyWithoutSessionNestedInput
    exportsTTA?: ExportTTAUncheckedUpdateManyWithoutSessionNestedInput
  }

  export type SessionFMPAUncheckedUpdateManyWithoutTypeFMPAInput = {
    id?: IntFieldUpdateOperationsInput | number
    dateDebut?: DateTimeFieldUpdateOperationsInput | Date | string
    dateFin?: DateTimeFieldUpdateOperationsInput | Date | string
    lieu?: StringFieldUpdateOperationsInput | string
    placesMax?: IntFieldUpdateOperationsInput | number
    placesOccupees?: IntFieldUpdateOperationsInput | number
    formateurPrincipalId?: IntFieldUpdateOperationsInput | number
    centreId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutSessionFieldUpdateOperationsInput | $Enums.StatutSession
    codeTTA?: StringFieldUpdateOperationsInput | string
    tauxHoraire?: FloatFieldUpdateOperationsInput | number
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscriptionFMPACreateManySessionInput = {
    id?: number
    personnelId: number
    statut?: $Enums.StatutInscription
    present?: boolean
    signatureElectronique?: string | null
    dateSignature?: Date | string | null
    heuresValidees?: number | null
    montantTTA?: number | null
    dateInscription?: Date | string
    dateModification?: Date | string
  }

  export type SignatureFMPACreateManySessionInput = {
    id?: string
    personnelId: number
    type: string
    signature: string
    dateSignature?: Date | string
  }

  export type ExportTTACreateManySessionInput = {
    id?: number
    mois: Date | string
    centreId: number
    nombreLignes: number
    montantTotal: number
    fichierCsv: string
    statut: string
    validePar?: number | null
    dateValidation?: Date | string | null
    createdAt?: Date | string
  }

  export type InscriptionFMPAUpdateWithoutSessionInput = {
    statut?: EnumStatutInscriptionFieldUpdateOperationsInput | $Enums.StatutInscription
    present?: BoolFieldUpdateOperationsInput | boolean
    signatureElectronique?: NullableStringFieldUpdateOperationsInput | string | null
    dateSignature?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heuresValidees?: NullableFloatFieldUpdateOperationsInput | number | null
    montantTTA?: NullableFloatFieldUpdateOperationsInput | number | null
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
    personnel?: PersonnelUpdateOneRequiredWithoutInscriptionsNestedInput
  }

  export type InscriptionFMPAUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    personnelId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutInscriptionFieldUpdateOperationsInput | $Enums.StatutInscription
    present?: BoolFieldUpdateOperationsInput | boolean
    signatureElectronique?: NullableStringFieldUpdateOperationsInput | string | null
    dateSignature?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heuresValidees?: NullableFloatFieldUpdateOperationsInput | number | null
    montantTTA?: NullableFloatFieldUpdateOperationsInput | number | null
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InscriptionFMPAUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    personnelId?: IntFieldUpdateOperationsInput | number
    statut?: EnumStatutInscriptionFieldUpdateOperationsInput | $Enums.StatutInscription
    present?: BoolFieldUpdateOperationsInput | boolean
    signatureElectronique?: NullableStringFieldUpdateOperationsInput | string | null
    dateSignature?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    heuresValidees?: NullableFloatFieldUpdateOperationsInput | number | null
    montantTTA?: NullableFloatFieldUpdateOperationsInput | number | null
    dateInscription?: DateTimeFieldUpdateOperationsInput | Date | string
    dateModification?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignatureFMPAUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    dateSignature?: DateTimeFieldUpdateOperationsInput | Date | string
    personnel?: PersonnelUpdateOneRequiredWithoutSignaturesNestedInput
  }

  export type SignatureFMPAUncheckedUpdateWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    personnelId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    dateSignature?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SignatureFMPAUncheckedUpdateManyWithoutSessionInput = {
    id?: StringFieldUpdateOperationsInput | string
    personnelId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    signature?: StringFieldUpdateOperationsInput | string
    dateSignature?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportTTAUpdateWithoutSessionInput = {
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
    centreId?: IntFieldUpdateOperationsInput | number
    nombreLignes?: IntFieldUpdateOperationsInput | number
    montantTotal?: FloatFieldUpdateOperationsInput | number
    fichierCsv?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    validePar?: NullableIntFieldUpdateOperationsInput | number | null
    dateValidation?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportTTAUncheckedUpdateWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
    centreId?: IntFieldUpdateOperationsInput | number
    nombreLignes?: IntFieldUpdateOperationsInput | number
    montantTotal?: FloatFieldUpdateOperationsInput | number
    fichierCsv?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    validePar?: NullableIntFieldUpdateOperationsInput | number | null
    dateValidation?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportTTAUncheckedUpdateManyWithoutSessionInput = {
    id?: IntFieldUpdateOperationsInput | number
    mois?: DateTimeFieldUpdateOperationsInput | Date | string
    centreId?: IntFieldUpdateOperationsInput | number
    nombreLignes?: IntFieldUpdateOperationsInput | number
    montantTotal?: FloatFieldUpdateOperationsInput | number
    fichierCsv?: StringFieldUpdateOperationsInput | string
    statut?: StringFieldUpdateOperationsInput | string
    validePar?: NullableIntFieldUpdateOperationsInput | number | null
    dateValidation?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use PersonnelCountOutputTypeDefaultArgs instead
     */
    export type PersonnelCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonnelCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CentreCountOutputTypeDefaultArgs instead
     */
    export type CentreCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CentreCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TypeFMPACountOutputTypeDefaultArgs instead
     */
    export type TypeFMPACountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TypeFMPACountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionFMPACountOutputTypeDefaultArgs instead
     */
    export type SessionFMPACountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionFMPACountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PersonnelDefaultArgs instead
     */
    export type PersonnelArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PersonnelDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CentreDefaultArgs instead
     */
    export type CentreArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CentreDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TypeFMPADefaultArgs instead
     */
    export type TypeFMPAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TypeFMPADefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionFMPADefaultArgs instead
     */
    export type SessionFMPAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionFMPADefaultArgs<ExtArgs>
    /**
     * @deprecated Use InscriptionFMPADefaultArgs instead
     */
    export type InscriptionFMPAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = InscriptionFMPADefaultArgs<ExtArgs>
    /**
     * @deprecated Use SignatureFMPADefaultArgs instead
     */
    export type SignatureFMPAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SignatureFMPADefaultArgs<ExtArgs>
    /**
     * @deprecated Use AptitudeMedicaleDefaultArgs instead
     */
    export type AptitudeMedicaleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AptitudeMedicaleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CompetenceDefaultArgs instead
     */
    export type CompetenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CompetenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExportTTADefaultArgs instead
     */
    export type ExportTTAArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExportTTADefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AuditLogDefaultArgs instead
     */
    export type AuditLogArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AuditLogDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}