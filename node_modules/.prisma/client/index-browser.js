
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.GradeScalarFieldEnum = {
  id: 'id',
  code: 'code',
  libelle: 'libelle',
  categorie: 'categorie',
  ordreHierarchique: 'ordreHierarchique',
  actif: 'actif'
};

exports.Prisma.CentreScalarFieldEnum = {
  id: 'id',
  code: 'code',
  nom: 'nom',
  type: 'type',
  adresse: 'adresse',
  ville: 'ville',
  codePostal: 'codePostal',
  telephone: 'telephone',
  email: 'email',
  actif: 'actif',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PersonnelScalarFieldEnum = {
  id: 'id',
  matricule: 'matricule',
  nom: 'nom',
  prenom: 'prenom',
  dateNaissance: 'dateNaissance',
  sexe: 'sexe',
  email: 'email',
  telephone: 'telephone',
  adresse: 'adresse',
  codePostal: 'codePostal',
  ville: 'ville',
  password: 'password',
  refreshToken: 'refreshToken',
  resetPasswordToken: 'resetPasswordToken',
  resetPasswordExpires: 'resetPasswordExpires',
  dateEntree: 'dateEntree',
  dateSortie: 'dateSortie',
  statut: 'statut',
  categorie: 'categorie',
  gradeId: 'gradeId',
  centreId: 'centreId'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  code: 'code',
  libelle: 'libelle',
  description: 'description',
  permissions: 'permissions',
  actif: 'actif'
};

exports.Prisma.PersonnelRoleScalarFieldEnum = {
  personnelId: 'personnelId',
  roleId: 'roleId',
  dateAttribution: 'dateAttribution',
  dateFin: 'dateFin'
};

exports.Prisma.TypeCompetenceScalarFieldEnum = {
  id: 'id',
  code: 'code',
  libelle: 'libelle',
  description: 'description',
  dureeValiditeMois: 'dureeValiditeMois',
  actif: 'actif'
};

exports.Prisma.PersonnelCompetenceScalarFieldEnum = {
  id: 'id',
  personnelId: 'personnelId',
  typeCompetenceId: 'typeCompetenceId',
  dateObtention: 'dateObtention',
  dateExpiration: 'dateExpiration',
  niveau: 'niveau',
  numeroDiplome: 'numeroDiplome',
  organismeDelivrance: 'organismeDelivrance',
  actif: 'actif',
  createdAt: 'createdAt'
};

exports.Prisma.AptitudeMedicaleScalarFieldEnum = {
  id: 'id',
  personnelId: 'personnelId',
  dateVisite: 'dateVisite',
  dateProchaineVisite: 'dateProchaineVisite',
  aptitude: 'aptitude',
  restrictions: 'restrictions',
  medecin: 'medecin',
  commentaires: 'commentaires',
  createdAt: 'createdAt'
};

exports.Prisma.TypeFMPAScalarFieldEnum = {
  id: 'id',
  code: 'code',
  libelle: 'libelle',
  dureeHeures: 'dureeHeures',
  obligatoire: 'obligatoire',
  periodiciteMois: 'periodiciteMois',
  description: 'description',
  actif: 'actif'
};

exports.Prisma.SessionFMPAScalarFieldEnum = {
  id: 'id',
  typeFMPAId: 'typeFMPAId',
  centreId: 'centreId',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  lieu: 'lieu',
  nombrePlacesMax: 'nombrePlacesMax',
  nombreInscrits: 'nombreInscrits',
  formateurPrincipalId: 'formateurPrincipalId',
  statut: 'statut',
  codeTTA: 'codeTTA',
  tauxHoraire: 'tauxHoraire',
  commentaires: 'commentaires',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SessionFMPAFormateurScalarFieldEnum = {
  sessionId: 'sessionId',
  personnelId: 'personnelId'
};

exports.Prisma.InscriptionFMPAScalarFieldEnum = {
  id: 'id',
  sessionFMPAId: 'sessionFMPAId',
  personnelId: 'personnelId',
  dateInscription: 'dateInscription',
  statutInscription: 'statutInscription',
  heureArrivee: 'heureArrivee',
  heureDepart: 'heureDepart',
  signatureElectronique: 'signatureElectronique',
  dateSignature: 'dateSignature',
  noteEvaluation: 'noteEvaluation',
  acquis: 'acquis',
  commentaireFormateur: 'commentaireFormateur',
  heuresValidees: 'heuresValidees',
  montantTTA: 'montantTTA',
  exportePaie: 'exportePaie',
  dateExportPaie: 'dateExportPaie',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SignatureFMPAScalarFieldEnum = {
  id: 'id',
  sessionFMPAId: 'sessionFMPAId',
  personnelId: 'personnelId',
  type: 'type',
  signature: 'signature',
  dateSignature: 'dateSignature'
};

exports.Prisma.CategorieMaterielScalarFieldEnum = {
  id: 'id',
  code: 'code',
  libelle: 'libelle',
  description: 'description',
  actif: 'actif'
};

exports.Prisma.MaterielScalarFieldEnum = {
  id: 'id',
  categorieId: 'categorieId',
  centreId: 'centreId',
  codeInventaire: 'codeInventaire',
  libelle: 'libelle',
  marque: 'marque',
  modele: 'modele',
  numeroSerie: 'numeroSerie',
  dateAcquisition: 'dateAcquisition',
  dateMiseService: 'dateMiseService',
  dateReforme: 'dateReforme',
  etat: 'etat',
  periodiciteControleJours: 'periodiciteControleJours',
  dateDernierControle: 'dateDernierControle',
  dateProchainControle: 'dateProchainControle',
  localisation: 'localisation',
  responsableId: 'responsableId',
  valeurAchat: 'valeurAchat',
  fournisseur: 'fournisseur',
  numeroMarche: 'numeroMarche',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IncidentMaterielScalarFieldEnum = {
  id: 'id',
  materielId: 'materielId',
  signaleParId: 'signaleParId',
  dateIncident: 'dateIncident',
  typeIncident: 'typeIncident',
  gravite: 'gravite',
  description: 'description',
  photosUrls: 'photosUrls',
  statut: 'statut',
  traiteParId: 'traiteParId',
  dateResolution: 'dateResolution',
  actionsCorrectives: 'actionsCorrectives',
  coutReparation: 'coutReparation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EPIScalarFieldEnum = {
  id: 'id',
  personnelId: 'personnelId',
  typeEPI: 'typeEPI',
  taille: 'taille',
  numeroSerie: 'numeroSerie',
  dateAttribution: 'dateAttribution',
  datePeremption: 'datePeremption',
  etat: 'etat',
  dateDernierControle: 'dateDernierControle',
  dateProchainControle: 'dateProchainControle',
  actif: 'actif',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  nom: 'nom',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ConversationParticipantScalarFieldEnum = {
  conversationId: 'conversationId',
  personnelId: 'personnelId',
  dateAjout: 'dateAjout',
  dateSortie: 'dateSortie',
  role: 'role',
  notificationsActives: 'notificationsActives'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  conversationId: 'conversationId',
  expediteurId: 'expediteurId',
  contenu: 'contenu',
  typeMessage: 'typeMessage',
  fichierUrl: 'fichierUrl',
  typeInteractif: 'typeInteractif',
  donneesInteractives: 'donneesInteractives',
  createdAt: 'createdAt',
  editedAt: 'editedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.MessageLuScalarFieldEnum = {
  messageId: 'messageId',
  personnelId: 'personnelId',
  dateLecture: 'dateLecture'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  destinataireId: 'destinataireId',
  typeNotification: 'typeNotification',
  titre: 'titre',
  message: 'message',
  niveau: 'niveau',
  entiteType: 'entiteType',
  entiteId: 'entiteId',
  donneesSupplementaires: 'donneesSupplementaires',
  lue: 'lue',
  dateLecture: 'dateLecture',
  envoyeePush: 'envoyeePush',
  envoyeeEmail: 'envoyeeEmail',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.EvenementScalarFieldEnum = {
  id: 'id',
  createurId: 'createurId',
  centreId: 'centreId',
  titre: 'titre',
  description: 'description',
  lieu: 'lieu',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  journeeEntiere: 'journeeEntiere',
  typeEvenement: 'typeEvenement',
  visibilite: 'visibilite',
  recurrent: 'recurrent',
  patternRecurrence: 'patternRecurrence',
  couleur: 'couleur',
  rappels: 'rappels',
  annule: 'annule',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EvenementParticipantScalarFieldEnum = {
  evenementId: 'evenementId',
  personnelId: 'personnelId',
  statutInvitation: 'statutInvitation',
  obligatoire: 'obligatoire',
  dateReponse: 'dateReponse',
  commentaire: 'commentaire'
};

exports.Prisma.ExportTTAScalarFieldEnum = {
  id: 'id',
  periodeDebut: 'periodeDebut',
  periodeFin: 'periodeFin',
  centreId: 'centreId',
  genereParId: 'genereParId',
  dateGeneration: 'dateGeneration',
  nombreLignes: 'nombreLignes',
  montantTotal: 'montantTotal',
  fichierUrl: 'fichierUrl',
  formatExport: 'formatExport',
  statut: 'statut',
  dateValidation: 'dateValidation',
  valideParId: 'valideParId',
  dateTransmission: 'dateTransmission',
  numeroBordereau: 'numeroBordereau',
  commentaires: 'commentaires',
  sessionId: 'sessionId'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  utilisateurId: 'utilisateurId',
  action: 'action',
  entiteType: 'entiteType',
  entiteId: 'entiteId',
  anciennesValeurs: 'anciennesValeurs',
  nouvellesValeurs: 'nouvellesValeurs',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Categorie = exports.$Enums.Categorie = {
  SPV: 'SPV',
  SPP: 'SPP',
  PATS: 'PATS'
};

exports.TypeCentre = exports.$Enums.TypeCentre = {
  CIS: 'CIS',
  CSP: 'CSP',
  CS: 'CS',
  CPI: 'CPI'
};

exports.Sexe = exports.$Enums.Sexe = {
  M: 'M',
  F: 'F'
};

exports.StatutPersonnel = exports.$Enums.StatutPersonnel = {
  ACTIF: 'ACTIF',
  SUSPENDU: 'SUSPENDU',
  RETRAITE: 'RETRAITE',
  MUTATION: 'MUTATION',
  DEMISSION: 'DEMISSION'
};

exports.StatutAptitude = exports.$Enums.StatutAptitude = {
  APTE: 'APTE',
  APTE_RESTRICTIONS: 'APTE_RESTRICTIONS',
  INAPTE_TEMPORAIRE: 'INAPTE_TEMPORAIRE',
  INAPTE_DEFINITIF: 'INAPTE_DEFINITIF'
};

exports.StatutSession = exports.$Enums.StatutSession = {
  PLANIFIE: 'PLANIFIE',
  CONFIRME: 'CONFIRME',
  EN_COURS: 'EN_COURS',
  TERMINE: 'TERMINE',
  ANNULE: 'ANNULE'
};

exports.StatutInscription = exports.$Enums.StatutInscription = {
  INSCRIT: 'INSCRIT',
  CONFIRME: 'CONFIRME',
  PRESENT: 'PRESENT',
  ABSENT_JUSTIFIE: 'ABSENT_JUSTIFIE',
  ABSENT_NON_JUSTIFIE: 'ABSENT_NON_JUSTIFIE',
  ANNULE: 'ANNULE'
};

exports.EtatMateriel = exports.$Enums.EtatMateriel = {
  OPERATIONNEL: 'OPERATIONNEL',
  MAINTENANCE: 'MAINTENANCE',
  REPARATION: 'REPARATION',
  REFORME: 'REFORME',
  PERDU: 'PERDU'
};

exports.TypeIncident = exports.$Enums.TypeIncident = {
  PANNE: 'PANNE',
  CASSE: 'CASSE',
  USURE: 'USURE',
  PERTE: 'PERTE',
  VOL: 'VOL',
  AUTRE: 'AUTRE'
};

exports.GraviteIncident = exports.$Enums.GraviteIncident = {
  MINEURE: 'MINEURE',
  MAJEURE: 'MAJEURE',
  CRITIQUE: 'CRITIQUE'
};

exports.StatutIncident = exports.$Enums.StatutIncident = {
  SIGNALE: 'SIGNALE',
  PRIS_EN_COMPTE: 'PRIS_EN_COMPTE',
  EN_TRAITEMENT: 'EN_TRAITEMENT',
  RESOLU: 'RESOLU',
  ABANDONNE: 'ABANDONNE'
};

exports.EtatEPI = exports.$Enums.EtatEPI = {
  NEUF: 'NEUF',
  BON: 'BON',
  USE: 'USE',
  REFORME: 'REFORME'
};

exports.TypeConversation = exports.$Enums.TypeConversation = {
  DIRECT: 'DIRECT',
  GROUPE: 'GROUPE',
  BROADCAST: 'BROADCAST'
};

exports.RoleConversation = exports.$Enums.RoleConversation = {
  MEMBRE: 'MEMBRE',
  ADMIN: 'ADMIN'
};

exports.TypeMessage = exports.$Enums.TypeMessage = {
  TEXTE: 'TEXTE',
  FICHIER: 'FICHIER',
  IMAGE: 'IMAGE',
  SYSTEM: 'SYSTEM'
};

exports.NiveauNotification = exports.$Enums.NiveauNotification = {
  INFO: 'INFO',
  WARNING: 'WARNING',
  URGENT: 'URGENT',
  CRITIQUE: 'CRITIQUE'
};

exports.VisibiliteEvenement = exports.$Enums.VisibiliteEvenement = {
  PUBLIC: 'PUBLIC',
  CENTRE: 'CENTRE',
  PRIVE: 'PRIVE'
};

exports.StatutInvitation = exports.$Enums.StatutInvitation = {
  INVITE: 'INVITE',
  ACCEPTE: 'ACCEPTE',
  DECLINE: 'DECLINE',
  TENTATIVE: 'TENTATIVE'
};

exports.FormatExport = exports.$Enums.FormatExport = {
  CSV: 'CSV',
  EXCEL: 'EXCEL',
  TXT: 'TXT'
};

exports.StatutExport = exports.$Enums.StatutExport = {
  GENERE: 'GENERE',
  VALIDE: 'VALIDE',
  TRANSMIS: 'TRANSMIS',
  TRAITE: 'TRAITE',
  ERREUR: 'ERREUR'
};

exports.Prisma.ModelName = {
  Grade: 'Grade',
  Centre: 'Centre',
  Personnel: 'Personnel',
  Role: 'Role',
  PersonnelRole: 'PersonnelRole',
  TypeCompetence: 'TypeCompetence',
  PersonnelCompetence: 'PersonnelCompetence',
  AptitudeMedicale: 'AptitudeMedicale',
  TypeFMPA: 'TypeFMPA',
  SessionFMPA: 'SessionFMPA',
  SessionFMPAFormateur: 'SessionFMPAFormateur',
  InscriptionFMPA: 'InscriptionFMPA',
  SignatureFMPA: 'SignatureFMPA',
  CategorieMateriel: 'CategorieMateriel',
  Materiel: 'Materiel',
  IncidentMateriel: 'IncidentMateriel',
  EPI: 'EPI',
  Conversation: 'Conversation',
  ConversationParticipant: 'ConversationParticipant',
  Message: 'Message',
  MessageLu: 'MessageLu',
  Notification: 'Notification',
  Evenement: 'Evenement',
  EvenementParticipant: 'EvenementParticipant',
  ExportTTA: 'ExportTTA',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
